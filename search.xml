<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GUI图形化（已弃用）</title>
    <url>/2023/02/27/JavaGUI%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JavaGUI图形化界面笔记"><a href="#JavaGUI图形化界面笔记" class="headerlink" title="JavaGUI图形化界面笔记"></a>JavaGUI图形化界面笔记</h1><h2 id="常用窗体"><a href="#常用窗体" class="headerlink" title="常用窗体"></a>常用窗体</h2><h3 id="Jframe"><a href="#Jframe" class="headerlink" title="Jframe"></a>Jframe</h3><p>新建Jframe</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">       JFrame jf=<span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;我的第一个界面&quot;</span>);</span><br><span class="line"><span class="comment">/*设置窗体大小和出现的位置*/</span></span><br><span class="line">jf.setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">500</span>,<span class="number">700</span>);</span><br><span class="line"><span class="comment">/*设置窗体是否显示*/</span></span><br><span class="line">jf.setVisible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">/*设置窗体是否可调节（默认可调）*/</span></span><br><span class="line">jf.setResizable(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>   设定窗口关闭方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*隐藏当前窗口，并释放窗体占用的所有资源*/</span></span><br><span class="line">jf.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);</span><br><span class="line"><span class="comment">/*隐藏当前窗口*/</span></span><br><span class="line">jf.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);</span><br><span class="line"><span class="comment">/*结束窗口所在的应用程序*/</span></span><br><span class="line">jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"><span class="comment">/*点击后什么都不做*/</span></span><br><span class="line">jf.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);</span><br></pre></td></tr></table></figure>

<p>设置背景颜色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jf.getContentPane().setBackground(Color.decode(<span class="string">&quot;#dddddd&quot;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="Jdialog（弹窗）"><a href="#Jdialog（弹窗）" class="headerlink" title="Jdialog（弹窗）"></a>Jdialog（弹窗）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JDialog jd=<span class="keyword">new</span> <span class="title class_">JDialog</span>(jf ,<span class="string">&quot;弹窗&quot;</span>);</span><br><span class="line">jd.setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">jd.setVisible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h2 id="常用的面板"><a href="#常用的面板" class="headerlink" title="常用的面板"></a>常用的面板</h2><p>面板也是一种swing容器，他可以作为容器容纳其他组件，但是他也必须放在一个容器内</p>
<h3 id="Jpanel"><a href="#Jpanel" class="headerlink" title="Jpanel"></a>Jpanel</h3><p>Jpanel是最基础的面板，继承自java.awt.Container类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JPanel jp=<span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line">JButton jb=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;登录&quot;</span>);</span><br><span class="line">JButton jb2=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;注册&quot;</span>);</span><br><span class="line">jp.add(jb);</span><br><span class="line">jp.add(jb2);</span><br><span class="line">jf.add(jp);</span><br></pre></td></tr></table></figure>

<h3 id="JscrollPane（滚动面板）"><a href="#JscrollPane（滚动面板）" class="headerlink" title="JscrollPane（滚动面板）"></a>JscrollPane（滚动面板）</h3><p>定义实例：JScrollPane jsp=new JScrollPane(某个继承自JPanel类的实例 pane);<br> 设置初始大小：jsp.setPreferredSize(new Dimension(200,200));</p>
<p>设置滚动条显示和隐藏</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JScrollPane waiceng1=<span class="keyword">new</span> <span class="title class_">JScrollPane</span>(waiceng,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);</span><br></pre></td></tr></table></figure>

<h2 id="常用组件"><a href="#常用组件" class="headerlink" title="常用组件"></a>常用组件</h2><h3 id="标签组件"><a href="#标签组件" class="headerlink" title="标签组件"></a>标签组件</h3><p>类：JLabel</p>
<p>作用：显示文本或者提示信息</p>
<p>构造方法：</p>
<p>new JLabel（）；</p>
<p>new JLabel（Icon icon）；       设置图标</p>
<p>new Jlabel（Icon icon，SwingConstants.CENTER） 设置图标+水平对齐方式</p>
<p>new Jlabel（String str，SwingConstants.CENTER）    设置文字+水平对齐方式</p>
<p>new Jlabel（String str，Icon icon，SwingConstants.CENTER）</p>
<p>设置文字图标+水平对齐方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jf.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);</span><br><span class="line">JLabel jl=<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;我是提示文字&quot;</span>,SwingConstants.);</span><br><span class="line">jf.add(jl);</span><br></pre></td></tr></table></figure>

<h3 id="按钮组件"><a href="#按钮组件" class="headerlink" title="按钮组件"></a>按钮组件</h3><p>类：JButton</p>
<p>构造方法：</p>
<p>new JButton（）；</p>
<p>new JButton(Icon icon);  指定图标</p>
<p>new JButton(String txt);  指定文字</p>
<p>new JButton(Icon icon,String txt);    指定文字和图标</p>
<p>其他方法：</p>
<p>setEnabled(boolean n)  按钮是否可用</p>
<p>setBorderPainted(boolean n)    按钮是否带边框</p>
<p>setToolTipText(String st)     鼠标上移提示文字</p>
<h3 id="单选多选按钮"><a href="#单选多选按钮" class="headerlink" title="单选多选按钮"></a>单选多选按钮</h3><p>单选</p>
<p>new JRadioButton（）；</p>
<p>new JRadioButton（Icon icon）；    设置图标</p>
<p>new JRadioButton（Icon icon，boolean b）  设置图标+是否选中</p>
<p>new JRadioButton（String str，boolean b）      设置文字+是否选中</p>
<p>new JRadioButton（String str，Icon icon，boolean b）</p>
<p>设置文字图标+是否选中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JRadioButton jr=<span class="keyword">new</span> <span class="title class_">JRadioButton</span>(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">JRadioButton jr2=<span class="keyword">new</span> <span class="title class_">JRadioButton</span>(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">ButtonGroup bg=<span class="keyword">new</span> <span class="title class_">ButtonGroup</span>();</span><br><span class="line">bg.add(jr);</span><br><span class="line">bg.add(jr2);</span><br><span class="line">jf.add(jr);</span><br><span class="line">jf.add(jr2);</span><br></pre></td></tr></table></figure>

<p>复选</p>
<p>new JCheckBox（）；</p>
<p>new JCheckBox (Icon icon,boolean b);    指定图标+是否被选中</p>
<p>new JCheckBox (String txt,boolean b);    指定文字+是否被选中</p>
<h3 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h3><p>构造方法</p>
<p>new JComboBox（）；</p>
<p>方法：</p>
<p>addItem：添加下拉内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JComboBox jcb=<span class="keyword">new</span> <span class="title class_">JComboBox</span>();</span><br><span class="line">jcb.addItem(<span class="string">&quot;请选择省份&quot;</span>);</span><br><span class="line">jcb.addItem(<span class="string">&quot;河北&quot;</span>);</span><br><span class="line">jcb.addItem(<span class="string">&quot;河南&quot;</span>);</span><br><span class="line">jf.add(jcb);</span><br></pre></td></tr></table></figure>

<h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h3><p>一级菜单：</p>
<p>创建菜单条 JMenuBar</p>
<p>创建菜单JMenu</p>
<p>创建菜单项JMenuItem</p>
<p>总结：菜单项依附菜单、菜单依附菜单条</p>
<p>创建菜单栏</p>
<p>创建菜单</p>
<p>创建菜单项</p>
<p>菜单添加一个菜单项</p>
<p>菜单项添加菜单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JMenuBar bar=<span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line">JMenu menu=<span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;菜单1&quot;</span>);</span><br><span class="line">JMenuItem item1=<span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;二级菜单1&quot;</span>);</span><br><span class="line">JMenuItem item2=<span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;二级菜单2&quot;</span>);</span><br><span class="line">JMenuItem item3=<span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;二级菜单3&quot;</span>);</span><br><span class="line">menu.add(item1);</span><br><span class="line">menu.add(item2);</span><br><span class="line">menu.add(item3);</span><br><span class="line">bar.add(menu);</span><br><span class="line">jf.add(bar);</span><br></pre></td></tr></table></figure>

<h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>类：JTextField</p>
<p>构造函数</p>
<p>new JTextField（）；</p>
<p>new JTextField（String text）；       设置默认文字</p>
<p>new JTextField（int fiel） 设置文本框长度</p>
<p>new JTextField（String str，int b）      默认文字+文本框长度</p>
<h3 id="密码框"><a href="#密码框" class="headerlink" title="密码框"></a>密码框</h3><p>类：JPasswordField</p>
<p>构造函数</p>
<p>new JPasswordField（）；</p>
<p>new JPasswordField（String text）；     设置默认文字</p>
<p>new JPasswordField（int fiel）   设置密码框长度</p>
<p>new JPasswordField（String str，int b）     默认文字+密码框长度</p>
<h3 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h3><p>类：JTextArea</p>
<p>构造函数</p>
<p>new JTextArea（）；</p>
<p>new JTextArea（String text）；       设置默认文字</p>
<p>new JTextArea（int fiel，int fiel）     设置文本框长度和宽度</p>
<p>方法：</p>
<p>setLineWrap（）；   设置文本框是否换行</p>
<h2 id="常用布局"><a href="#常用布局" class="headerlink" title="常用布局"></a>常用布局</h2><h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><p>构造方法：</p>
<p>FlowLayout（int aligment）;    设置对齐方式（默认居中）</p>
<p>FlowLayout（int aligment，int horizGap，int vertGap）;      设置对齐方式+上下偏移</p>
<p>通过setLayout设置布局方式</p>
<p>例如：jf.setLayout（new FlowLayout（FlowLayout.LEFT））</p>
<h3 id="网格式布局"><a href="#网格式布局" class="headerlink" title="网格式布局"></a>网格式布局</h3><p>构造方法：</p>
<p>GridLayout（int row，int col）;      指定行数和列数</p>
<p>GridLayout（int row，int col，int horizGap，int vertGap）;       设置行数列数+上下偏移</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux指令</title>
    <url>/2023/09/18/Linux%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Linux指令"><a href="#Linux指令" class="headerlink" title="Linux指令"></a>Linux指令</h1><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><h3 id="认识linux目录结构"><a href="#认识linux目录结构" class="headerlink" title="认识linux目录结构"></a>认识linux目录结构</h3><p>/:根目录标志</p>
<p><img src="/img/Linux%E6%8C%87%E4%BB%A4/image-20221230163149165.png" alt="image-20221230163149165" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/Linux%E6%8C%87%E4%BB%A4/image-20221230163757788.png" alt="image-20221230163757788" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="列出文件列表"><a href="#列出文件列表" class="headerlink" title="列出文件列表"></a>列出文件列表</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前目录下的所有文件夹</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前目录下扥所有文件（包括隐藏文件）</span></span><br><span class="line"><span class="built_in">ls</span> <span class="literal">-a</span></span><br><span class="line"><span class="comment">#以点开头的蓝色文件就是隐藏文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有目录下非隐藏文件及其详细信息</span></span><br><span class="line">ll</span><br></pre></td></tr></table></figure>

<h3 id="进入文件目录"><a href="#进入文件目录" class="headerlink" title="进入文件目录"></a>进入文件目录</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入指定目录</span></span><br><span class="line"><span class="built_in">cd</span> 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回上一级目录</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回用户目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回上一行的目录</span></span><br><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure>

<h3 id="创建和删除目录"><a href="#创建和删除目录" class="headerlink" title="创建和删除目录"></a>创建和删除目录</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个文件夹</span></span><br><span class="line">mkdir 文件夹名称</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个空文件</span></span><br><span class="line">touch a.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除一个空文件夹</span></span><br><span class="line">redir 文件夹名称</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接创建多级文件夹</span></span><br><span class="line">mkdir <span class="literal">-p</span> 父文件夹名/子文件夹</span><br></pre></td></tr></table></figure>

<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看文件所有内容</span></span><br><span class="line"><span class="built_in">cat</span> 文件名</span><br><span class="line">more 文件名	<span class="comment">#只显示一屏按回车显示一行 按空格显示一屏 按q退出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看文件最后10行的内容</span></span><br><span class="line">tail <span class="literal">-10</span> 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">#动态查看</span></span><br><span class="line">tail <span class="operator">-f</span> 文件名</span><br></pre></td></tr></table></figure>

<h3 id="删除、复制和剪切"><a href="#删除、复制和剪切" class="headerlink" title="删除、复制和剪切"></a>删除、复制和剪切</h3><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在指定文件夹下将file1复制为file2</span></span><br><span class="line"><span class="built_in">cp</span> file1 aaa/file2</span><br><span class="line"></span><br><span class="line"><span class="comment">#将file1复制到上一级文件夹</span></span><br><span class="line"><span class="built_in">cp</span> file1 ../</span><br></pre></td></tr></table></figure>

<h4 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将file1剪切到指定文件夹</span></span><br><span class="line"><span class="built_in">mv</span> file1 aaa/</span><br><span class="line"></span><br><span class="line"><span class="comment">#将file1剪切到上一级文件夹</span></span><br><span class="line"><span class="built_in">cp</span> file1 ../</span><br></pre></td></tr></table></figure>

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在询问后删除文件</span></span><br><span class="line"><span class="built_in">rm</span> bb</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除目录</span></span><br><span class="line"><span class="built_in">rm</span> <span class="literal">-r</span> bb</span><br><span class="line"></span><br><span class="line"><span class="comment">#不询问删除</span></span><br><span class="line"><span class="built_in">rm</span> <span class="literal">-rf</span> bb</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除所有东西</span></span><br><span class="line"><span class="built_in">rm</span> <span class="literal">-rf</span> /*		<span class="comment">#慎用</span></span><br></pre></td></tr></table></figure>

<h3 id="打包或解压"><a href="#打包或解压" class="headerlink" title="打包或解压"></a>打包或解压</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">压缩成a.tar</span><br><span class="line">tar -cvf a.tar 文件夹名/</span><br><span class="line">	-c:创建一个新的tar文件</span><br><span class="line">	-v:显示运行的过程信息</span><br><span class="line">	-f:指定文件名</span><br><span class="line">	-z:调用gzip压缩命令进行压缩</span><br><span class="line">	-t:查看压缩文件的内容</span><br><span class="line">	-x:解开tar文件</span><br></pre></td></tr></table></figure>

<h3 id="查找文件、查找内容"><a href="#查找文件、查找内容" class="headerlink" title="查找文件、查找内容"></a>查找文件、查找内容</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#按文件名称查找</span></span><br><span class="line">find / <span class="literal">-name</span> 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">#不太清楚名字的查找方法</span></span><br><span class="line">find / <span class="literal">-name</span> cont*.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#在aaa文件中查找字符串Address</span></span><br><span class="line">grep Address 文件路径 <span class="literal">--color</span></span><br></pre></td></tr></table></figure>

<h2 id="Vi和Vim编辑器"><a href="#Vi和Vim编辑器" class="headerlink" title="Vi和Vim编辑器"></a>Vi和Vim编辑器</h2><p>在linux下一般使用vi编辑器来编辑文件。vi即可以查看文件也可以编辑文件。</p>
<p>三种模式：命令行、插入、底行模式。</p>
<p>切换到命令行模式：按Esc键</p>
<p>切换到插入模式：按i、o、a键</p>
<p>​    i 在当前位置前插入</p>
<p>​    I 在当前行首插入</p>
<p>​    a 在当前位置后插入</p>
<p>​    A 在当前行尾插入</p>
<p>​    o 在当前行之后插入一行</p>
<p>​    O 在当前行之前插入一行</p>
<p>切换到底行模式：按冒号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">打开文件： vim file</span><br><span class="line"></span><br><span class="line">退出：esc-&gt;:q</span><br><span class="line"></span><br><span class="line">修改文件：输入i进入插入模式</span><br><span class="line"></span><br><span class="line">保存并退出：esc-&gt;:wq</span><br><span class="line"></span><br><span class="line">不保存退出</span><br></pre></td></tr></table></figure>

<h2 id="重定向输出"><a href="#重定向输出" class="headerlink" title="重定向输出"></a>重定向输出</h2><p>重定向就是将本文件中的内容复制到别的文件中</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将aaa.txt中的文字复制到bbb.txt中</span></span><br><span class="line"><span class="built_in">cat</span> aaa.txt &gt; bbb.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#将aaa.txt中的文字追加到bbb.txt中</span></span><br><span class="line"><span class="built_in">cat</span> aaa.txt &gt;&gt; bbb.txt</span><br></pre></td></tr></table></figure>

<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>管道是linux命令中重要的一个概念，其作用是<strong>将一个命令的输出用作另一个命令的输入</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> <span class="literal">--help</span> | more 	<span class="comment">#分页查询帮助信息</span></span><br><span class="line"><span class="built_in">ps</span> <span class="literal">-ef</span> | grep java 	<span class="comment">#查询名称中包含java的进程</span></span><br></pre></td></tr></table></figure>

<h2 id="Linux权限命令"><a href="#Linux权限命令" class="headerlink" title="Linux权限命令"></a>Linux权限命令</h2><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>—    ———    ———    ———</p>
<p><strong>第一个“—”表示文件的类型</strong></p>
<p>​    -：表示文件</p>
<p>​    d：表示文件夹</p>
<p>​    l：表示快捷方式</p>
<p><strong>第二个表示当前文件或文件夹的权限</strong></p>
<p>​    r：可读</p>
<p>​    w：可写</p>
<p>​    x：可运行</p>
<p><strong>第三个表示当前组内其他用户具有该文件的权限</strong></p>
<p><strong>第四个表示其他组的用户具有该文件的权限</strong></p>
<h3 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chmod u=rwx,g=rx,o=rx a.txt</span><br><span class="line"><span class="comment">#u代表当前用户 g代表当前组的其他用户 o代表其他组的用户</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以用数字的形式</span></span><br><span class="line"><span class="comment">#可读是4 可写是2 可运行是1</span></span><br><span class="line"><span class="comment">#最高权限就变成了chmod 777</span></span><br></pre></td></tr></table></figure>

<h2 id="linux上常见的网络操作"><a href="#linux上常见的网络操作" class="headerlink" title="linux上常见的网络操作"></a>linux上常见的网络操作</h2><h3 id="主机名配置"><a href="#主机名配置" class="headerlink" title="主机名配置"></a>主机名配置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hostname 		<span class="comment">#查看主机名</span></span><br><span class="line">hostname XXX	<span class="comment">#修改主机名 重启后失效</span></span><br><span class="line"><span class="comment">#如果要是永久生效，可以修改/erc/sysconfig/netword文件</span></span><br></pre></td></tr></table></figure>

<h3 id="网卡设置"><a href="#网卡设置" class="headerlink" title="网卡设置"></a>网卡设置</h3><p>修改网络初始化配置，设定网卡在系统启动时初始化</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /		<span class="comment">#进入根目录</span></span><br><span class="line"><span class="built_in">cd</span> etc </span><br><span class="line"><span class="built_in">cd</span> sysconfig</span><br><span class="line"><span class="built_in">cd</span> network<span class="literal">-scripts</span></span><br><span class="line">vi ifcfg<span class="literal">-ens33</span>	<span class="comment">#编辑ifcfg-ens33文件</span></span><br></pre></td></tr></table></figure>



<h3 id="IP地址配置"><a href="#IP地址配置" class="headerlink" title="IP地址配置"></a>IP地址配置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ifconfig <span class="comment">#查看（修改）ip地址重启后无效</span></span><br><span class="line">ifconfig etho <span class="number">192.168</span>.<span class="number">12.22</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果想要永久生效修改/etc/sysconfig/network-scripts/ifcfg-eth0文件</span></span><br><span class="line"></span><br><span class="line">DEVICE=eth0 			<span class="comment">#网卡名称</span></span><br><span class="line">BOOTPROTO=<span class="keyword">static</span> 		<span class="comment">#获取ip的方式(static/dhcp/bootp/none)</span></span><br><span class="line">HWADDR<span class="literal">-00</span>:<span class="number">0</span>c:<span class="number">29</span>:B5:B2:<span class="number">69</span> .MAC地址</span><br><span class="line">IPADDR=<span class="number">192.168</span>.<span class="number">177.129</span> 	<span class="comment">#IP地址</span></span><br><span class="line">NETMASK=<span class="number">255.255</span>.<span class="number">255.0</span> 	<span class="comment">#子网掩码</span></span><br><span class="line">NETWORK=<span class="number">192.168</span>.<span class="number">177.0</span> 	<span class="comment">#网络地址</span></span><br><span class="line">BROADCAST=<span class="number">192.168</span>.<span class="number">0.255</span> <span class="comment">#广播地址</span></span><br><span class="line">NBOOT=yes				<span class="comment">#系统启动时是否设置此网络接口</span></span><br></pre></td></tr></table></figure>

<h3 id="linux域名映射"><a href="#linux域名映射" class="headerlink" title="linux域名映射"></a>linux域名映射</h3><p>可以通过更改linux下的/etc/hosts</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改域名映射</span></span><br><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<h3 id="网络服务管理"><a href="#网络服务管理" class="headerlink" title="网络服务管理"></a>网络服务管理</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">service network status	<span class="comment">#查看指定服务的状态</span></span><br><span class="line">service network stop	<span class="comment">#停止指定服务</span></span><br><span class="line">service network <span class="built_in">start</span>	<span class="comment">#启动指定服务</span></span><br><span class="line">service network restart <span class="comment">#重启指定服务</span></span><br><span class="line">service <span class="literal">--status-al1</span>	<span class="comment">#查看系统中所有后台服务</span></span><br><span class="line">netstat <span class="literal">-nltp</span>			<span class="comment">#查看系统中网络进程的端口监听情况</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#防火墙设置</span></span><br><span class="line"><span class="comment">#防火墙根据配置文件/etc/sysconfig/iptables来控制本机的“出”、“入网络访问行为</span></span><br><span class="line">systemctl status firewalld serviceiptablesstatus <span class="comment">#查看防火墙状态</span></span><br><span class="line">systemctl disable firewalld	 <span class="comment">#关闭防火墙</span></span><br><span class="line">systemctl <span class="built_in">start</span> firewalld	<span class="comment">#启动防火墙</span></span><br><span class="line">chkconfig iptables off	<span class="comment">#禁止防火墙自启</span></span><br></pre></td></tr></table></figure>

<h2 id="linux上的软件安装"><a href="#linux上的软件安装" class="headerlink" title="linux上的软件安装"></a>linux上的软件安装</h2><ul>
<li><p>linux上软件安装有以下几种常用的方式介绍</p>
<ol>
<li><p>二进制发布包</p>
<p>软件已经针对具体平台编译打包发布只要解压修改配置即可</p>
</li>
</ol>
</li>
</ul>
<h3 id="linux上安装jdk"><a href="#linux上安装jdk" class="headerlink" title="linux上安装jdk"></a>linux上安装jdk</h3><ol>
<li><p>首先下载jdk：<a href="https://www.oracle.com/java/technologies/downloads/#java8">Java Downloads | Oracle</a></p>
</li>
<li><p>下载完之后可以通过finalshell自带的文件上传工具将jdk-8u361-linux-x64.tar.gz上传</p>
</li>
<li><p>上传之后使用命令，将文件解压到usr下的local文件夹：</p>
</li>
</ol>
<p>​        tar -zxvf jdk-8u361-linux-x64.tar.gz -C /usr/local</p>
<ol start="4">
<li><p>配置环境变量</p>
<ol>
<li><p>编辑配置文件：</p>
<p>​    vim /etc/profile</p>
</li>
<li><p><img src="/img/Linux%E6%8C%87%E4%BB%A4/image-20230417161524550.png" alt="image-20230417161524550" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/jdk1.<span class="number">8.0</span>_361</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<p>：wq保存</p>
</li>
<li><p>使修改生效：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>验证JDK是否正确安装：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">java <span class="literal">-version</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="linux上安装tomcat"><a href="#linux上安装tomcat" class="headerlink" title="linux上安装tomcat"></a>linux上安装tomcat</h3><ol>
<li><p>下载Apache Tomcat：<a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p>
</li>
<li><p>将文件上传至linux</p>
</li>
<li><p>解压</p>
<p>tar -zxvf apache-tomcat-7.0.x.tar.gz -C /usr/local</p>
</li>
<li><p>进入tomcat的bin目录启动服务，命令为sh startup.sh</p>
</li>
<li><p>查看启动日志<br>more /usr/local/ apache-tomcat-7.0.57/logs/catalina.outtail -50 /usr/local/apache-tomcat-7.0.57/logs/catalina.out</p>
</li>
<li><p>查看进程ps -ef | grep tomcat</p>
</li>
<li><p>windows上运行192.168.136.131:8080</p>
<p>注意：如果运行不了，尝试关掉防火墙</p>
</li>
<li><p>停止服务的脚本文件</p>
<p>sh shutdown.sh</p>
</li>
</ol>
<h3 id="linux安装mysql"><a href="#linux安装mysql" class="headerlink" title="linux安装mysql"></a>linux安装mysql</h3><p><strong>注意：如果当前系统中已经安装有mysql数据库，安装将失败。centos7自带mariadb，与mysql数据库冲突必须卸载</strong></p>
<p>检查当前系统中是否安装mysql数据库</p>
<p>rpm -qa                                    查询当前系统中安装的所有软件</p>
<p>rpm -qa | grep mysql               查询当前系统中安装的名称带mysql的软件</p>
<p>rpm -qa | grep mariadb            查询当前系统中安装的名称带mariadb的软件</p>
<p>rpm -e –nodeps 软件名            卸载软件</p>
<ol>
<li><p>创建文件夹</p>
<p>mkdir /usr/local/mysql</p>
</li>
<li><p>将安装包上传解压</p>
<p>tar -xvf mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar -C /usr/local/mysql</p>
</li>
<li><p>按照顺序安装rpm软件包</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rpm <span class="literal">-ivh</span> mysql<span class="literal">-community-common-5</span>.<span class="number">7.25</span><span class="literal">-1</span>.el7.x86_64.rpm</span><br><span class="line">rpm <span class="literal">-ivh</span> mysql<span class="literal">-community-libs-5</span>.<span class="number">7.25</span><span class="literal">-1</span>.el7.x86_64.rpm</span><br><span class="line">rpm <span class="literal">-ivh</span> mysql<span class="literal">-community-devel-5</span>.<span class="number">7.25</span><span class="literal">-1</span>.el7.x86_64.rpm</span><br><span class="line">rpm <span class="literal">-ivh</span> mysql<span class="literal">-community-libs-compat-5</span>.<span class="number">7.25</span><span class="literal">-1</span>.el7.x86_64.rpm</span><br><span class="line">rpm <span class="literal">-ivh</span> mysql<span class="literal">-community-client-5</span>.<span class="number">7.25</span><span class="literal">-1</span>.el7.x86_64.rpm</span><br><span class="line">yum install net<span class="literal">-tools</span></span><br><span class="line">rpm <span class="literal">-ivh</span> mysql<span class="literal">-community-server-5</span>.<span class="number">7.25</span><span class="literal">-1</span>.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>可以通过指令升级现有软件及系统内核</p>
<p>yum update</p>
</li>
<li><p>启动mysql</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld			<span class="comment">#查看mysql服务状态</span></span><br><span class="line">systemctl <span class="built_in">start</span> mysqld			<span class="comment">#启动mysql服务</span></span><br></pre></td></tr></table></figure>

<p>可以设置开机时启动mysql服务</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl enable mysqld			<span class="comment">#开机启动mysql服务</span></span><br><span class="line">netstart <span class="literal">-tunlp</span> | grep mysql	<span class="comment">#查看已经启动的服务</span></span><br><span class="line"><span class="built_in">ps</span> <span class="literal">-ef</span> | grep mysql				<span class="comment">#查看mysql进程</span></span><br></pre></td></tr></table></figure></li>
<li><p>登录mysql数据库，查阅临时密码</p>
<p>cat /var/log/mysqld.log | grep password</p>
</li>
<li><p>登录mysql，修改密码，开放访问权限</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#登录mysql（使用临时密码登录)</span></span><br><span class="line">mysql <span class="literal">-uroot</span> <span class="literal">-p</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置密码长度最低位数</span></span><br><span class="line"><span class="built_in">set</span> global validate_password_length=<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置密码安全等级低,便于密码可以修改</span></span><br><span class="line"><span class="built_in">set</span> global validate_password_policy=LOW;</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置密码为root</span></span><br><span class="line"><span class="built_in">set</span> password = password(<span class="string">&#x27;510609&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看mysql全局策略</span></span><br><span class="line">SHOW VARIABLES LIKE <span class="string">&#x27;validate_password%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启访问权限</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span><span class="string">@&#x27;%&#x27; IDENTIFIED BY &#x27;510609&#x27;;</span></span><br><span class="line"><span class="string">flush privileges;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>区别于windows，在linux中对mysql数据库的大小写有严格区分因此为了避免此类情况发生应该在etc/my.cnf中添加lower_case_table_names=1</p>
</blockquote>
<h3 id="linux安装lrzsz"><a href="#linux安装lrzsz" class="headerlink" title="linux安装lrzsz"></a>linux安装lrzsz</h3><ol>
<li><p>搜索lrzsz安装包，命名为yum list lrzsz</p>
</li>
<li><p>使用yum命令在线安装，命名为yum install lrzsz.x86_64</p>
<blockquote>
<p>Yum(全称为Yellow dog Updater, Modified)是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</p>
</blockquote>
</li>
</ol>
<h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><h3 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h3><ol>
<li>将java项目打包成jar包</li>
<li>将jar包放在/usr/local/app</li>
<li>通过java -jar jar包名称运行项目即可通过windows浏览器访问</li>
<li>目前程序运行存在的问题：<ul>
<li>线上程序霸屏不能退出也不能关闭</li>
<li>线上程序的输出日志显示在屏幕上</li>
</ul>
</li>
</ol>
<p>​    解决方法：</p>
<p>nohup命令：用于不挂断的运行指定命令，退出终端不会影响</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#后台运行且输出日志到reggie.log</span></span><br><span class="line">nohup java <span class="literal">-jar</span> reggie_take_<span class="built_in">out-1</span>.<span class="number">0</span><span class="literal">-SNAPSHOT</span>.jar &amp;&gt; reggie.log</span><br></pre></td></tr></table></figure>

<h3 id="使用shell脚本自动部署"><a href="#使用shell脚本自动部署" class="headerlink" title="使用shell脚本自动部署"></a>使用shell脚本自动部署</h3><ol>
<li><p>在linux中安装Git</p>
<p>yum list git         列出git安装包</p>
<p>yum install git    在线安装git</p>
</li>
<li><p>使用Git克隆代码</p>
<p>cd /usr/local/</p>
<p>git clone gitee地址</p>
</li>
<li><p>上传安装maven软件包</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tar <span class="literal">-zxvf</span> apache<span class="literal">-maven-3</span>.<span class="number">5.4</span><span class="literal">-bin</span>.tar.gz <span class="literal">-C</span> /usr/local</span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment">#修改配置文件，加入如下内容</span></span><br><span class="line">export MAVEN_HOME=/usr/local/apache<span class="literal">-maven-3</span>.<span class="number">5.4</span></span><br><span class="line">export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$MAVEN_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line">mvn <span class="literal">-version</span></span><br><span class="line">vim /usr/local/apache<span class="literal">-maven-3</span>.<span class="number">5.4</span>/conf/settings.xml</span><br><span class="line"><span class="comment">#修改配置文件内容如下</span></span><br><span class="line">&lt;localRepository&gt;/usr/local/repo&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Java SE笔记</title>
    <url>/2023/09/18/Java%20SE/</url>
    <content><![CDATA[<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image002.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="Java入门"><a href="#Java入门" class="headerlink" title="Java入门"></a>Java入门</h2><h3 id="Java概述"><a href="#Java概述" class="headerlink" title="Java概述"></a>Java概述</h3><p>Java是由sun公司在1996年正式发布的高级编程语言。JAVA语言的诞生解决了网络程序的安全、健壮、平台无关、可移植等很多难题。</p>
<h3 id="Java技术平台简介"><a href="#Java技术平台简介" class="headerlink" title="Java技术平台简介"></a>Java技术平台简介</h3><p>Java SE：标准版</p>
<ol>
<li><p> Java技术的基础和核心</p>
</li>
<li><p> 主要用于开发桌面应用程序</p>
</li>
</ol>
<p>Java EE：企业版</p>
<ol>
<li><p> 提供了企业级的应用开发的完整解决方案</p>
</li>
<li><p> 很多的网站都是采用Java EE技术开发</p>
</li>
</ol>
<h3 id="Java环境搭建"><a href="#Java环境搭建" class="headerlink" title="Java环境搭建"></a>Java环境搭建</h3><p>详情见：<a href="https://www.runoob.com/java/java-environment-setup.html">Java 开发环境配置 | 菜鸟教程 (runoob.com)</a></p>
<h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">aba</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123; </span><br><span class="line"></span><br><span class="line">		<span class="comment">//main()方法是java程序的入口点</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h3><p>\n 将光标移动到下一行的第一格</p>
<p>\t 将光标移到下一个水平制表位置（加制表符）</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>单行注释以//开始</p>
<p>多行注释以/* */框起来</p>
<h3 id="Java编码规范"><a href="#Java编码规范" class="headerlink" title="Java编码规范"></a>Java编码规范</h3><ol>
<li><p> 类名使用public修饰</p>
</li>
<li><p> 一行只写一句语句</p>
</li>
<li><p> 每一条Java语句必须以分号结束</p>
</li>
<li><p> { }的使用及位置</p>
</li>
<li><p> 代码缩进</p>
</li>
</ol>
<h3 id="Java输入输出"><a href="#Java输入输出" class="headerlink" title="Java输入输出"></a>Java输入输出</h3><ol>
<li> 输入</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">aaa</span> <span class="operator">=</span>input.next(); 获取键盘输入的值</span><br><span class="line"></span><br><span class="line">						 .nextInt(); 用于获取整形数</span><br><span class="line"></span><br><span class="line">                         .nextDouble() 用于获取小数</span><br><span class="line"></span><br><span class="line">                         .nextChar() 用于获取字符</span><br><span class="line"></span><br><span class="line">                         .nextBoolean() 用于获取布朗值</span><br><span class="line"></span><br><span class="line">.nextLine() 获取键盘输入的值</span><br><span class="line"></span><br><span class="line">next（）和nextLine（）的区别</span><br></pre></td></tr></table></figure>

<p>next（）：</p>
<ol>
<li><p> 一定要读取到有效字符后才能结束输入</p>
</li>
<li><p> 对输入有效字符之前遇到的空白，next（）方法会自动将其去掉</p>
</li>
<li><p> 只有输入有效字符后才能将其后面输入的空白作为分隔符或者结束符</p>
</li>
<li><p> next（）不能得到带有空格的字符串</p>
</li>
</ol>
<p>nextLine（）：</p>
<ol>
<li><p> 以enter为结束符，也就是说nextLine（）方法返回的是输入回车之前 的所有字符</p>
</li>
<li><p> 可以获得空白</p>
</li>
</ol>
<p>&nbsp;</p>
<ol>
<li> 输出</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.print(<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="数据类型和运算符"><a href="#数据类型和运算符" class="headerlink" title="数据类型和运算符"></a>数据类型和运算符</h2><h3 id="常用的数据类型"><a href="#常用的数据类型" class="headerlink" title="常用的数据类型"></a>常用的数据类型</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>byte（）</td>
<td>是8位、有符号的，以二进制补码表示的整数</td>
<td>0</td>
</tr>
<tr>
<td>char（字符型）</td>
<td>用于存储单个字符</td>
<td>‘u0000’</td>
</tr>
<tr>
<td>int（整型）</td>
<td>用于存储整数二进制以00开头，八进制以0开头，十六进制以0x开头</td>
<td>0</td>
</tr>
<tr>
<td>double（双精度）</td>
<td>用于存储小数</td>
<td>0.0d</td>
</tr>
<tr>
<td>String（字符串）</td>
<td>用于存储一串字符</td>
<td>null</td>
</tr>
<tr>
<td>long（）</td>
<td>存储int盛不下的整数</td>
<td>0L</td>
</tr>
<tr>
<td>Short（短整型）</td>
<td>整形的一种</td>
<td>0</td>
</tr>
<tr>
<td>boolean（布尔值）</td>
<td>判别真假，数据类型表示一位的信息</td>
<td>false</td>
</tr>
</tbody></table>
<p>自动类型转换规则：</p>
<p>规则一：如果一个操作数为double型，则整个表达式可提升为double型</p>
<p>规则二：两个类型要兼容，数值类型（整型和浮点型）相互兼容</p>
<p>目标类型大于源类型，例如double型&gt;float型 &gt;long型&gt;int型&gt;byte、short、char</p>
<p>强制类型转换：</p>
<p>例如：double a=10.24</p>
<p>Int b=(int)a</p>
<p>注：1.byte、short、char这三种类型都可以发生数学运算（char中的字母会默认变成ascll码处理）</p>
<p>2.小的单位在运算的时候都会被首先提升成为大类型然后在计算</p>
<p><strong>数据类型除了八种基本数据类型还会有三种引用类型</strong></p>
<p>类（class）， 接口（interface），数组（array），(枚举类型、注解类型、字符串(String)类型) </p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ol>
<li><p> 赋值运算符：=、+=、-=、*=、/=、%=</p>
</li>
<li><p> 算术运算符：+、-、*、/、%、num1++等价于num1=num1+1、–同上</p>
</li>
<li><p> 关系运算符：&gt;、&lt;、==、!=、&gt;=、&lt;=</p>
</li>
<li><p> 逻辑运算符：&amp;&amp;与、||或、!非</p>
</li>
</ol>
<blockquote>
<p>运算符的优先级：小括号&gt;算术运算符&gt;关系运算符&gt;逻辑运算符&gt;赋值运算符</p>
</blockquote>
<ol>
<li> 位运算符：</li>
</ol>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>如果相对应的位数都是1，则返回1，否则返回0</td>
</tr>
<tr>
<td>|</td>
<td>如果相对应的位数都是0，则返回0，否则返回1</td>
</tr>
<tr>
<td>^</td>
<td>如果对应位置的位数相同则返回0，如果不同则返回1</td>
</tr>
<tr>
<td>~</td>
<td>按位取反，-1在取反</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移，左移一位相当于*2</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移，右移一位相当于除以2取商</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>右移指定位数前面补零</td>
</tr>
</tbody></table>
<ol>
<li>instanceof运算符</li>
</ol>
<p>使用格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;James&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> name <span class="keyword">instanceof</span> String; <span class="comment">// 由于 name 是 String 类型，所以返回真</span></span><br></pre></td></tr></table></figure>



<ol start="2">
<li>条件运算符</li>
</ol>
<p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line">b=(a&lt;<span class="number">5</span>) ? <span class="number">6</span>:<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(b); <span class="comment">//b=9</span></span><br></pre></td></tr></table></figure>



<h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><h3 id="if选择结构"><a href="#if选择结构" class="headerlink" title="if选择结构"></a>if选择结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">	<span class="comment">//如果满足条件返回的代码块</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="comment">//如果不满足条件返回的代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="多重if选择结构"><a href="#多重if选择结构" class="headerlink" title="多重if选择结构"></a>多重if选择结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>（条件<span class="number">1</span>）&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>（条件<span class="number">2</span>）&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="switch选择结构"><a href="#switch选择结构" class="headerlink" title="switch选择结构"></a>switch选择结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">1</span>;</span><br><span class="line">	语句;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">2</span>;</span><br><span class="line">	语句;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>;</span><br><span class="line">	语句;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>switch后边的控制表达式的数据类型只能是整数和字符型，不能是boolean型</p>
<p>switch和多重if选择结构：</p>
<p>相同点：都用来处理多分支条件的结构</p>
<p>不同点：switch只能处理等值条件判断的情况，而且条件必须是整形或字符型变量</p>
<p>多重if选择结构适合某个变量处于某个连续区间时的情况</p>
<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>（<span class="type">int</span> i=<span class="number">0</span>;i&amp;lt;=<span class="number">100</span>;i++）&#123;</span><br><span class="line">	<span class="comment">//初始化参数 条件判断 迭代</span></span><br><span class="line">	System.out.println(“好好学习！”)</span><br><span class="line">	<span class="keyword">break</span>; <span class="comment">//结束这个循环</span></span><br><span class="line">	countinue；<span class="comment">//跳出这次循环执行下一次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(i&amp;lt;=<span class="number">100</span>) &#123; <span class="comment">//循环条件</span></span><br><span class="line">	System.out.println(<span class="string">&quot;&quot;</span>)； <span class="comment">//执行代码块</span></span><br><span class="line">	i++； <span class="comment">//迭代</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"></span><br><span class="line">循环操作</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>（循环条件）</span><br><span class="line"></span><br><span class="line"><span class="comment">/*注：while和do-while的区别</span></span><br><span class="line"><span class="comment">执行次序不同：while先判断在执行，do-while先执行后判断</span></span><br><span class="line"><span class="comment">初次情况不满足循环条件时：while一次都不执行</span></span><br><span class="line"><span class="comment">do-while不管任何情况都会执行一次*/</span></span><br></pre></td></tr></table></figure>



<h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><p><strong>break</strong>用于完全结束一个循环，跳出循环体</p>
<p>break不仅可以结束其所在的循环，还可以直接结束其外部循环。此时需要在break后紧跟一个标签，这个标签用于表示一个外层循环</p>
<p>详情见<a href="file:///C:\Users\Administrator\AppData\Roaming\Microsoft\Word\java笔记309855513911934490\java练习.md">带标签的break语句</a></p>
<p><strong>continue</strong>用于在循环体中结束本次循环，开始下一次循环</p>
<h2 id="递归结构"><a href="#递归结构" class="headerlink" title="递归结构"></a>递归结构</h2><p>递归结构的思想就是自己调用自己</p>
<p>递归结构两个部分：</p>
<p>定义递归头：什么时候不调用方法。如果没有头将陷入死循环，也就是结束条件</p>
<p>递归体：什么时候要调用自身方法</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h3><p>数组是一个变量存储相同数据类型的一组数据</p>
<h3 id="数组基本要素"><a href="#数组基本要素" class="headerlink" title="数组基本要素"></a>数组基本要素</h3><p>标识符：数组的名称，用于区别不同的数组</p>
<p>数组元素：向数组中存放的数据</p>
<p>元素下标：对数组元素进行编号</p>
<p>元素类型：数组元素的数据类型（数组中的所有元素必须属于相同的数据类型）</p>
<p><strong>注：数组长度固定不变，避免数组越界</strong></p>
<h3 id="使用数组四步走"><a href="#使用数组四步走" class="headerlink" title="使用数组四步走"></a>使用数组四步走</h3><ol>
<li><p>声明数组：int a[ ];(声明数组时不规定数组长度)</p>
</li>
<li><p>分配空间：a=new int[5];</p>
</li>
</ol>
<p>数据类型[ ] 数组名 = new 数组类型[大小]</p>
<ol start="3">
<li>赋值: a[0]=8;</li>
</ol>
<ul>
<li>方法一：边声明边赋值</li>
</ul>
<p>int score[ ]={89,79,76};</p>
<p>int score[ ]=new int[ ]{89,79,76}; //不能指定数组长度</p>
<ul>
<li>方法二：动态从键盘中获取信息并赋值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">I</span> <span class="operator">=</span><span class="number">0</span>;i&amp;lt;<span class="number">30</span>;i++)&#123;</span><br><span class="line">    score[i]=input.nextlnt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>处理数据:a[0]=a[0]*10</li>
</ol>
<h3 id="For-Each循环"><a href="#For-Each循环" class="headerlink" title="For-Each循环"></a>For-Each循环</h3><p>在不使用索引的情况下输出所有数组元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(数组类型 element：数组名)&#123;</span><br><span class="line">	System.out.print(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><ol>
<li> 将数组转化成长度固定的列表（Arrays.asList）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list1 = Arrays.asList(数组名);</span><br><span class="line">System.out.println(list1);</span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image003.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image004.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>成员变量和局部变量的区别</p>
<ul>
<li><p>作用域不同</p>
<ul>
<li><p>  局部变量的作用域仅限于定义它的方法</p>
</li>
<li><p>  成员变量的作用域在整个类内部都是可见的</p>
</li>
</ul>
</li>
<li><p>初始值不同</p>
<ul>
<li><p>  Java会给成员变量一个初始值</p>
</li>
<li><p>  Java不会给局部变量初始值</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>局部变量包括：方法体、代码块、形参</p>
</blockquote>
<p>注：在同一个方法中，不允许有同名局部变量；在不同的方法中，可以有同名局部变量。</p>
<p>在同一个类中，成员变量和局部变量同名时，局部变量具有更高的优先性</p>
<h2 id="Final修饰符"><a href="#Final修饰符" class="headerlink" title="Final修饰符"></a>Final修饰符</h2><p>在JAVA语言中，用关键字final来定义一个常量</p>
<p>常量一旦被初始化后就不能改变</p>
<p>声明格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> 数据类型 名称=内容；</span><br></pre></td></tr></table></figure>

<p>final</p>
<p>final关键字可以用于修饰类、变量和方法</p>
<p>final修饰变量：</p>
<p>final修饰的类变量和方法不能改变</p>
<p>final修饰的变量（常量），必须要赋初始值</p>
<p>final可以 在创建时赋值，可以在普通初始化代码块中，可以在构造方法中</p>
<p>final创建的类变量，只能在创建时赋值和在静态初始化代码中</p>
<p>final修饰方法：</p>
<p>如果用final修饰方法，如果有子类那么不能在子类中重写此方法</p>
<p>final修饰类：</p>
<p>final修饰类则此类不可派生子类</p>
<h2 id="方法（函数）"><a href="#方法（函数）" class="headerlink" title="方法（函数）"></a>方法（函数）</h2><h3 id="方法概述"><a href="#方法概述" class="headerlink" title="方法概述"></a>方法概述</h3><p>就是将一个功能抽取出来，把代码单独定义在一个大括号内形成一个独立的包装。当我们需要这个功能的时候，就可以去调用，这样既实现了代码的复用性，也解决了代码冗余的现象</p>
<h3 id="定义的格式"><a href="#定义的格式" class="headerlink" title="定义的格式"></a>定义的格式</h3><p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">score</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		System.out.println(aaa(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">aaa</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">		<span class="type">int</span> ret=a+b;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="方法定义的注意事项"><a href="#方法定义的注意事项" class="headerlink" title="方法定义的注意事项"></a>方法定义的注意事项</h3><p>方法定义的先后顺序无所谓</p>
<p>方法定义必须是挨着的，不能在一个方法的内部定义另一个方法</p>
<p>方法定义之后自己不会执行，如果希望执行，一定要进行方法的调用</p>
<h3 id="方法的返回值"><a href="#方法的返回值" class="headerlink" title="方法的返回值"></a>方法的返回值</h3><p>返回值类型分为：基本数据类型和引用数据类型</p>
<p>基本数据类型return的值必须和数据类型一致</p>
<p>引用数据类型：</p>
<p>为类时return该类的对象</p>
<p>为抽象类名时return该类的子类对象</p>
<p>为接口名时return该接口的实现类的对象</p>
<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h3 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h3><blockquote>
<p>整个程序的基本单位就是类，方法是从属于类和对象</p>
</blockquote>
<h3 id="Java是面向对象的语言"><a href="#Java是面向对象的语言" class="headerlink" title="Java是面向对象的语言"></a>Java是面向对象的语言</h3><ol>
<li><p> 所有的Java程序都是以类class为组织单元</p>
</li>
<li><p> 关键字class定义自定义的数据类型</p>
</li>
</ol>
<h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image005.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>类的方法示例</p>
<p>public 返回值类型 方法名（）{</p>
<p>​    //这里编写方法的主体</p>
<p>}</p>
<p>方法的返回值</p>
<ul>
<li><p>  如果方法具有返回值，方法中必须使用关键字return返回该值，返回值为该返回值的类型</p>
</li>
<li><p>  如果方法没有返回值，返回值类型为void</p>
</li>
</ul>
<p>注：一个文件中可以有多个类，但是公共的类只能有一个，就是public修饰的那一个，每存在一个类运行时系统就会自行创建一个class文件</p>
<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image006.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="初始化块"><a href="#初始化块" class="headerlink" title="初始化块"></a>初始化块</h2><p>初始化块分为：普通初始化块和静态初始化块</p>
<p>普通初始化和静态初始化的区别：</p>
<ol>
<li><p> 定义格式不同：普通初始化直接用{ }引起来，静态初始化要在前面加上static</p>
</li>
<li><p> 初始化对象不同：普通初始化块为对象进行初始化，静态初始化为类进行初始化</p>
</li>
<li><p> 调用方法不同： 普通初始化在创建对象时隐式调用，静态初始化在类加载时隐式调用</p>
</li>
<li><p> 调用次数不同：静态初始化可以多次被调用随着对象的创建进行添加，静态初始化只能被调用一次</p>
</li>
</ol>
<p>初始化对象执行顺序：</p>
<p>静态初始化&gt;普通初始化&gt;构造方法</p>
<p>有子类初始化对象执行顺序:</p>
<p>父类静态初始化&gt;子类静态初始化&gt;父类普通初始化&gt;父类构造方法&gt;子类普通初始化&gt;子类构造方法</p>
<p>构造方法用于初始化对象而静态初始化块用于初始化类</p>
<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>什么是构造器</p>
<p>用于对象的初始化，而不是创建对象</p>
<p>声明格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符] 类名(形参列表)&#123;  </span><br><span class="line">	<span class="comment">//n条语句  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">构造器四个要点</span><br></pre></td></tr></table></figure>



<ol>
<li><p> 构造器通过new关键字调用</p>
</li>
<li><p> 构造器不能定义返回值类型，不能使用return返回某个值</p>
</li>
<li><p> 如果我们没有定义构造器，则编译器会自动定义一个无参的构造方法</p>
</li>
<li><p> 构造器的方法名必须和类名一致</p>
</li>
</ol>
<h2 id="java虚拟机概念"><a href="#java虚拟机概念" class="headerlink" title="java虚拟机概念"></a>java虚拟机概念</h2><p>java虚拟机的内存可以分成三个区域：栈stack、堆heep、方法区method</p>
<p>内存图</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image007.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>栈的特点</p>
<ol>
<li><p> 描述的是方法执行的内存模型。每个方法被调用都会创建一个栈帧</p>
</li>
<li><p> jvm为每个线程创建一个帧，用来存放执行方法信息</p>
</li>
<li><p> 栈属于线程私有，不能实现线程的共享</p>
</li>
<li><p> 栈的存储特性是“先进后出”，“后来居上”</p>
</li>
<li><p> 栈有系统自动分配速度快（栈是一个连续的内存空间）</p>
</li>
</ol>
<p>堆的特点</p>
<ol>
<li><p> 用于存储创建好的对象和数组（数组也是对象）</p>
</li>
<li><p> jvm只有一个堆，对接所有线程共享</p>
</li>
<li><p> 是一个不连续内存空间，分配灵活速度慢</p>
</li>
<li><p> 堆被所有线程共享，和堆上的区域，会被垃圾回收器做进一步划分</p>
</li>
</ol>
<p>方法区（也是一个堆）的特点</p>
<ol>
<li><p> 方法区是Java虚拟机规范，可以有不同的实现</p>
</li>
<li><p> jvm只有一个方法区，被所有线程共享</p>
</li>
<li><p> 方法区实际也是堆，只是用于存储类、常量相关的信息</p>
</li>
<li><p> 用来存放程序中哟永远不变或者唯一的内容（类信息、静态信息、字符串信息）</p>
</li>
<li><p> 常量池存放常量：如文本字符串、final常量</p>
</li>
</ol>
<h2 id="访问权限修饰符"><a href="#访问权限修饰符" class="headerlink" title="访问权限修饰符"></a>访问权限修饰符</h2><table>
<thead>
<tr>
<th></th>
<th>private</th>
<th>friendly(默认)</th>
<th>protected</th>
<th>public</th>
</tr>
</thead>
<tbody><tr>
<td>当前类访问权限</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>包访问权限</td>
<td>×</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>子类访问权限</td>
<td>×</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>其他类访问权限</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
</tbody></table>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>构造方法是专门用来创建对象的方法，当我们通过关键字new来创建对象时其实就是在调用结构方法</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> 类名称（参数类型 参数名称）&#123;</span><br><span class="line">	方法名</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ol>
<li><p> 构造方法的名称必须和所在的类名完全一样，就连大小写也是一样</p>
</li>
<li><p> 构造方法不能写返回类型，连void都不写</p>
</li>
<li><p> 构造方法不能return一个具体的返回值</p>
</li>
<li><p> 如果没有编写任何构造方法，那么编译器将会默认赠送一个构造方法，没有参数，方法体什么事情都不做</p>
</li>
<li><p> 一旦编写了至少一个构造方法，那么编译器将不再赠送</p>
</li>
<li><p> 构造方法也是可以进行重载的</p>
</li>
</ol>
<blockquote>
<p>重载：方法名称相同，参数列表不同</p>
</blockquote>
<h2 id="面向对象三大特性"><a href="#面向对象三大特性" class="headerlink" title="面向对象三大特性"></a>面向对象三大特性</h2><h3 id="封装在java中的体现（增强安全性和简化编程）"><a href="#封装在java中的体现（增强安全性和简化编程）" class="headerlink" title="封装在java中的体现（增强安全性和简化编程）"></a>封装在java中的体现（增强安全性和简化编程）</h3><ol>
<li><p> 方法就是一种封装</p>
</li>
<li><p>关键字private也是一种封装</p>
<ol>
<li> 一旦使用了private进行修饰，那么本类当中仍然可以随意访问，但是超出了本类的范围之外就不能直接访问了</li>
</ol>
</li>
</ol>
<p>但是可以间接访问private成员变量，就是定义一对Getter和Setter方法</p>
<p>使用规则：</p>
<p>必须叫setXxx或者是getXxx的命名规则</p>
<p>对于Getter来说，不能有参数，返回值类型和成员变量对应</p>
<p>对于Setter来说，不能有返回值，参数类型和成员变量对应</p>
<p>封装就是将一些细节隐藏起来对外界不可见</p>
<h3 id="java中的继承性（解决代码可复用性）"><a href="#java中的继承性（解决代码可复用性）" class="headerlink" title="java中的继承性（解决代码可复用性）"></a>java中的继承性（解决代码可复用性）</h3><p>在继承的关系中，“子类就是一个父类”。也就是说，子类可以被当做父类看待</p>
<p>定义父类的格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 父类名称&#123;</span><br><span class="line">	…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义子类的格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 子类名称 extends 父类名称&#123;</span><br><span class="line">	…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注：子类在引用时可以找到父类中的方法和变量，但是父类就只能调用自己的</strong></p>
<p><strong>super详解：</strong></p>
<ol>
<li><p>super是Java的关键字，他是直接父类对象的引用</p>
</li>
<li><p>就像this不能出现在static修饰的方法中一样，super也不能出现在static修饰的方法中</p>
</li>
<li><p>如果子类定义里父类同名的属性，也会发生子类属性覆盖父类属性的情形。子类的方法直接访问该属性，都会访问到覆盖属性，无法访问父类被覆盖的属性—通过super访问父类被覆盖的属性</p>
</li>
<li><p>如果没有在子类中写super，系统将会自动调用</p>
</li>
<li><p>一般把super写到方法的最前面</p>
</li>
</ol>
<p><strong>在继承中，当父类有构造方法时，子类一定会调用父类的构造方法</strong></p>
<h3 id="java中的多态（增加程序可扩充性）"><a href="#java中的多态（增加程序可扩充性）" class="headerlink" title="java中的多态（增加程序可扩充性）"></a>java中的多态（增加程序可扩充性）</h3><p>多态就是：父类引用指向子类对象</p>
<p>父类名称 对象名=new 子类名称（）</p>
<p>多态只能调用子类和父类都有的方法</p>
<p>如果非要调用子类自己有的方法就需要</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image008.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image009.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>向上转型：</p>
<p>Animal an1=new Dog();</p>
<p>a1.sleep(); //报错的 原因：an1是父类对象，父类没有办法调用子类</p>
<p><strong>Dog d=(Dog)an1; 这实际上就是将父类当做子类使用，也叫作向上转型</strong></p>
<p><strong>d.sleep(); //正确的</strong></p>
<h2 id="抽象方法和抽象类"><a href="#抽象方法和抽象类" class="headerlink" title="抽象方法和抽象类"></a>抽象方法和抽象类</h2><h3 id="什么是抽象方法和抽象类"><a href="#什么是抽象方法和抽象类" class="headerlink" title="什么是抽象方法和抽象类"></a>什么是抽象方法和抽象类</h3><p>抽象方法：就是在方法的基础上加上abstract关键字，然后去掉大括号，直接分号结束</p>
<p>抽象类：就是抽象方法所在的类，必须是抽象类才行，在class前面加上abstract即可</p>
<h3 id="使用抽象方法和抽象类的注意事项"><a href="#使用抽象方法和抽象类的注意事项" class="headerlink" title="使用抽象方法和抽象类的注意事项"></a>使用抽象方法和抽象类的注意事项</h3><ol>
<li><p> 不能直接new抽象类对象，必须用一个子类来继承抽象父类</p>
</li>
<li><p> 子类必须覆盖重写抽象父类的所有的抽象方法</p>
</li>
</ol>
<blockquote>
<p>重写和覆盖的实现：子类去掉抽象方法的abstract关键字，然后补上方法的大括号</p>
</blockquote>
<ol>
<li><p> 创建子类对象进行使用</p>
</li>
<li><p> 在抽象类中，不一定包含抽象对象，但是有抽象方法的类必须是抽象类</p>
</li>
</ol>
<h3 id="abstract使用注意事项"><a href="#abstract使用注意事项" class="headerlink" title="abstract使用注意事项"></a>abstract使用注意事项</h3><ol>
<li><p> final和abstract永远不能同时使用</p>
</li>
<li><p> abstract不能修饰变量</p>
</li>
<li><p> static和abstract也不能同时使用</p>
</li>
<li><p> private和abstract也不能同时使用</p>
</li>
</ol>
<h2 id="this关键字的使用"><a href="#this关键字的使用" class="headerlink" title="this关键字的使用"></a>this关键字的使用</h2><blockquote>
<p>当方法的局部变量和成员变量重名是，根据就近原则会优先赋局部变量的值。如果想要使用成员变量的值就要用到this.成员变量名</p>
</blockquote>
<p><a href="file:///C:\Users\Administrator\AppData\Roaming\Microsoft\Word\java笔记309855513911934490\java练习.md">this案例</a></p>
<h2 id="对象数组的声明和使用"><a href="#对象数组的声明和使用" class="headerlink" title="对象数组的声明和使用"></a>对象数组的声明和使用</h2><h3 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h3><blockquote>
<p>类名称 [ ]对象数组名=new 类名称[ ]{对象,对象……}</p>
</blockquote>
<h2 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h2><h3 id="什么是ArrayList类"><a href="#什么是ArrayList类" class="headerlink" title="什么是ArrayList类"></a>什么是ArrayList类</h3><p>ArrayList是<strong>大小可变数组</strong>的实现，存储在内的东西叫元素，ArrayList可以无限往里添加元素，大小也会随着元素的变化而变化</p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>ArrayList&lt;String&gt; zu=new ArrayList&lt;&gt;();</p>
<p>ArrayList后面有一个&lt;E&gt;代表泛值</p>
<p>泛值：也就是装在集合中的所有元素，全都是统一的什么类型</p>
<p>注意，泛值只能是引用类型，不能是基本类型</p>
<p>注意事项：</p>
<p>对于ArrayList集合来说，可以直接打印内容</p>
<p>如果内容为空，得到的是空的中括号</p>
<h3 id="ArrayList添加、访问、删除和获取长度"><a href="#ArrayList添加、访问、删除和获取长度" class="headerlink" title="ArrayList添加、访问、删除和获取长度"></a>ArrayList添加、访问、删除和获取长度</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">添加：zu.add(“嗨害嗨”)；</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span></span><br><span class="line">注意事项：添加的数据类型要符合泛值类型</span><br><span class="line"></span><br><span class="line">访问：zu.get(<span class="number">0</span>);</span><br><span class="line">返回的是指定索引位置的值，</span><br><span class="line"></span><br><span class="line">删除：zu.remove(<span class="number">0</span>)</span><br><span class="line">返回的是指定索引值所删除的值</span><br><span class="line"></span><br><span class="line">访问长度：zu.size();</span><br><span class="line">返回的是数组列表的长度</span><br></pre></td></tr></table></figure>



<h3 id="向ArrayList中添加基本数据类型"><a href="#向ArrayList中添加基本数据类型" class="headerlink" title="向ArrayList中添加基本数据类型"></a>向ArrayList中添加基本数据类型</h3><p>格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; aaa=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">				Byte  </span><br><span class="line">				Short  </span><br><span class="line">				Long  </span><br><span class="line">				Float  </span><br><span class="line">				Double  </span><br><span class="line">				Character  </span><br><span class="line">				Boolean</span><br></pre></td></tr></table></figure>



<h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><p>Math.abs(a)//返回a的绝对值</p>
<p>Math.ceil(a)//上舍入</p>
<p>Math.floor(a)//下舍入</p>
<p>Math.round(a)//四舍五入</p>
<h2 id="字符串概述"><a href="#字符串概述" class="headerlink" title="字符串概述"></a>字符串概述</h2><h3 id="什么是字符串"><a href="#什么是字符串" class="headerlink" title="什么是字符串"></a>什么是字符串</h3><blockquote>
<p>在程序中，但凡是使用双引号引起来的东西就是字符串</p>
</blockquote>
<h3 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点"></a>字符串的特点</h3><ol>
<li><p> 字符串的内容是不可变的</p>
</li>
<li><p> 正是因为字符串的内容不可变，所以字符串是可以共享使用的</p>
</li>
<li><p> 字符串的效果上相当于是char[ ]字符数组，但底层原理是byte[ ]字节数组</p>
</li>
</ol>
<h3 id="创建字符串三种方法"><a href="#创建字符串三种方法" class="headerlink" title="创建字符串三种方法"></a>创建字符串三种方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过构造创建字符串对象</span></span><br><span class="line"></span><br><span class="line">String name1=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;害&quot;</span>);  </span><br><span class="line">System.out.println(name1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据字符数组创建字符串  </span></span><br><span class="line"><span class="type">char</span> []name2=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;  </span><br><span class="line">String str1=<span class="keyword">new</span> <span class="title class_">String</span>(name2);  </span><br><span class="line">System.out.println(str1);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//根据字节数组创建字符串  </span></span><br><span class="line"><span class="type">byte</span> []name3=&#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>&#125;;  </span><br><span class="line">String str2=<span class="keyword">new</span> <span class="title class_">String</span>(name3);  </span><br></pre></td></tr></table></figure>

<p>System.<em>out</em>.println(str2);</p>
<h3 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h3><p>在程序当中，直接写在双引号中的字符串都是放在常量池当中</p>
<p>对于基本类型来讲“==”是对数值进行比较</p>
<p>对于引用类型来讲“==”是对地址值进行比较</p>
<h3 id="字符串内容比较"><a href="#字符串内容比较" class="headerlink" title="字符串内容比较"></a>字符串内容比较</h3><p>.equals() //比较字符串内容(区分大小写)</p>
<p>.equalsIgnoreCase() //比较字符串内容(不区分大小写)</p>
<p>注意事项：</p>
<ol>
<li><p> 任何对象都可以用object接收</p>
</li>
<li><p> .equals有对称性，就是说a.equals（b）和b.equals（a）效果一样</p>
</li>
<li><p> 如果比较的双方一个是常量一个是变量，推荐把常量写在前面</p>
</li>
</ol>
<h3 id="字符串的获取"><a href="#字符串的获取" class="headerlink" title="字符串的获取"></a>字符串的获取</h3><p>.length() //获取字符串长度</p>
<p>str1.concat(str2) //字符串拼接</p>
<p>str1.charAt(1) //获取指定位置的字符</p>
<p>str1.indexOf(“aaa”) //返回指定字符第一次出现位置的值，如果没有返回-1</p>
<h3 id="字符串的截取"><a href="#字符串的截取" class="headerlink" title="字符串的截取"></a>字符串的截取</h3><p>str1.substring(3) //使用一个参数是从指定字符开始截到末尾</p>
<p>str1.substring(3,5) //使用两个参数是从指定位置开始截到第二个参数位不包括最后一位</p>
<h3 id="字符串的转化"><a href="#字符串的转化" class="headerlink" title="字符串的转化"></a>字符串的转化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> []aaa= &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">String zu=<span class="keyword">new</span> <span class="title class_">String</span>(aaa);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串转化为字符数组  </span></span><br><span class="line"><span class="type">char</span> [] charArray=zu.toCharArray();  </span><br><span class="line">System.out.println(charArray[<span class="number">0</span>]); <span class="comment">//a  </span></span><br><span class="line">System.out.println(<span class="string">&quot;===========&quot;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串转化为字节数组  </span></span><br><span class="line"><span class="type">byte</span> [] byteArray=zu.getBytes();  </span><br><span class="line">System.out.println(byteArray[<span class="number">0</span>]); <span class="comment">//97  </span></span><br><span class="line">System.out.println(<span class="string">&quot;===========&quot;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串替换  </span></span><br><span class="line">String str1=<span class="string">&quot;这里是一段字符串&quot;</span>;  </span><br><span class="line">String str2=str1.replace(<span class="string">&quot;是&quot;</span>,<span class="string">&quot;\*&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个参数表示要替换的字符，第二个表示替换成什么  </span></span><br><span class="line">System.out.println(str2); <span class="comment">//这里\*一段字符串</span></span><br></pre></td></tr></table></figure>



<h3 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h3><p>//字符串分割</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str3=<span class="string">&quot;aaa,bbb,ccc,ddd&quot;</span>;  </span><br><span class="line">String [] str4=str3.split(<span class="string">&quot;,&quot;</span>); <span class="comment">//用什么分割  </span></span><br><span class="line">System.out.println(str4[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>



<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="什么是接口"><a href="#什么是接口" class="headerlink" title="什么是接口"></a>什么是接口</h3><p>接口就是多个类的公共规则</p>
<p>可以通过接口来实现多重继承</p>
<p>接口是一种引用数据类型，最重要的内容就是其中的抽象方法</p>
<h3 id="如何定义一个接口"><a href="#如何定义一个接口" class="headerlink" title="如何定义一个接口"></a>如何定义一个接口</h3><p>格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface 接口名称&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="接口包含的内容"><a href="#接口包含的内容" class="headerlink" title="接口包含的内容"></a>接口包含的内容</h3><p>java7.0可以包含</p>
<p>1. 常量</p>
<p>2. 抽象方法</p>
<blockquote>
<p>java8.0额外包括</p>
<p>1. 默认方法</p>
<p>2. 静态方法</p>
<p>java9.0额外包括</p>
<p>1. 私有方法</p>
<p>注意：接口中只能是抽象方法，不能是其他方法</p>
</blockquote>
<h3 id="接口的定义和使用"><a href="#接口的定义和使用" class="headerlink" title="接口的定义和使用"></a>接口的定义和使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestInterface</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>; <span class="comment">//必须是抽象方法 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在实现类中必须重写接口中的抽象方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">extendsClass</span> <span class="keyword">implements</span> <span class="title class_">TestInterface</span>&#123; </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123; </span><br><span class="line">		System.out.println(<span class="string">&quot;我是从接口中重写的抽象方法&quot;</span>); </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="接口的默认方法使用"><a href="#接口的默认方法使用" class="headerlink" title="接口的默认方法使用"></a>接口的默认方法使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">text</span><span class="params">()</span>&#123;  </span><br><span class="line"></span><br><span class="line">	&#125; <span class="comment">//接口的默认方法  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口的默认对象可以被实现类继承和重写</p>
<p>接口的默认对象不需要在实现类中实现</p>
<p>用于解决接口的升级问题</p>
<h3 id="接口中的静态方法使用"><a href="#接口中的静态方法使用" class="headerlink" title="接口中的静态方法使用"></a>接口中的静态方法使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterfaceStatic</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodStatic</span><span class="params">()</span>&#123; </span><br><span class="line">		System.out.println(<span class="string">&quot;这是接口的静态方法&quot;</span>); </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterfaceStaticTest</span>&#123; </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">		MyInterfaceStatic.methodStatic(); </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口中的静态方法可以直接在测试类中调用，因为静态方法从属于类</span></span><br></pre></td></tr></table></figure>



<h3 id="接口中的私有方法"><a href="#接口中的私有方法" class="headerlink" title="接口中的私有方法"></a>接口中的私有方法</h3><p>可以解决的问题：</p>
<p>我们需要抽取一个共有的方法，用来解决两个默认方法之间重复的代码的问题。但是这个共有方法不应该让实现类使用，应该是私有化的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterfaceStatic</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodStatic1</span><span class="params">()</span>&#123; </span><br><span class="line">		System.out.println(<span class="string">&quot;静态方法1&quot;</span>); </span><br><span class="line">		selectStatic(); </span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodStatic2</span><span class="params">()</span>&#123; </span><br><span class="line">		System.out.println(<span class="string">&quot;静态方法2&quot;</span>); </span><br><span class="line">		selectStatic(); </span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectStatic</span><span class="params">()</span>&#123; </span><br><span class="line">		System.out.println(<span class="string">&quot;aaa&quot;</span>); </span><br><span class="line">		System.out.println(<span class="string">&quot;bbb&quot;</span>); </span><br><span class="line">		System.out.println(<span class="string">&quot;ccc&quot;</span>); </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterfaceStaticTest</span>&#123; </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">		MyInterfaceStatic.methodStatic1(); </span><br><span class="line">		MyInterfaceStatic.methodStatic2(); </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="内部类格式"><a href="#内部类格式" class="headerlink" title="内部类格式"></a>内部类格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWindow</span>&#123; <span class="comment">//外部类</span></span><br><span class="line">	String name; </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyEvent</span>&#123; <span class="comment">//内部类 </span></span><br><span class="line">		… </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部类可以使用外部类中的属性和方法</p>
<h3 id="创建内部类对象格式"><a href="#创建内部类对象格式" class="headerlink" title="创建内部类对象格式"></a>创建内部类对象格式</h3><p>外部类名.内部类名 对象名 =new 外部类名().new内部类名();</p>
<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>什么是匿名内部类？</p>
<p>​    就是一个没有名字的局部内部类</p>
<p>匿名内部类的目的是简化代码，也是开发常用的形式</p>
<p>匿名内部类的格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名|抽象类|接口（形参）&#123;</span><br><span class="line"></span><br><span class="line">方法重写</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>匿名内部类的特点：</p>
<ol>
<li><p> 匿名内部类是一个没有名字的内部类</p>
</li>
<li><p> 匿名内部类一旦写出来，就会立即创建一个匿名内部类的方法返回</p>
</li>
<li><p> 匿名内部类的对象的类型相当于是当前new的那个的类型的子类类型</p>
</li>
</ol>
<h1 id="java高级编程"><a href="#java高级编程" class="headerlink" title="java高级编程"></a>java高级编程</h1><h2 id="Java类"><a href="#Java类" class="headerlink" title="Java类"></a>Java类</h2><h3 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h3><p>Random r=new Random();</p>
<p>Int i=r.nextInt(100);</p>
<h3 id="ArrayList类-1"><a href="#ArrayList类-1" class="headerlink" title="ArrayList类"></a>ArrayList类</h3><p>是大小可变的数组</p>
<h3 id="Object类（所有的类都默认继承object）"><a href="#Object类（所有的类都默认继承object）" class="headerlink" title="Object类（所有的类都默认继承object）"></a>Object类（所有的类都默认继承object）</h3><p>toString方法（使用的话一般需要重写）</p>
<p>public String toString（）；返回一个字符串</p>
<p>equals方法</p>
<h3 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h3><ul>
<li>  用来获取日历</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得一个日历</span></span><br><span class="line">Calendar cal=Calendar.getInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取年份</span></span><br><span class="line"><span class="type">int</span> year=cal.get(cal.YEAR);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取月份用0-11来表示</span></span><br><span class="line"><span class="type">int</span> month=cal.get(cal.MONTH);</span><br></pre></td></tr></table></figure>

<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image010.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>  设置年份</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置年份</span></span><br><span class="line">cal.set(alendar.YEAR,<span class="number">2020</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//从日历的基础上增加或者减去</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> field,<span class="type">int</span> )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将年份减去三</span></span><br><span class="line">cal.add(cal.YEAR,-<span class="number">3</span>)</span><br></pre></td></tr></table></figure>



<h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><ul>
<li>  返回当前时间的毫秒值</li>
</ul>
<p>System.currentTimeMillis()</p>
<ul>
<li>  将数组中指定的数据拷贝到另一个数组中</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.arraycopy()</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> [] src=<span class="keyword">new</span> <span class="title class_">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> [] dest=&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">System.arraycopy(src,<span class="number">0</span>,dest,<span class="number">1</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>



<h3 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h3><p>向字符串追加内容</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image011.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>toString方法，将StringBuilder类转化为String类</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image012.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="封装类"><a href="#封装类" class="headerlink" title="封装类"></a>封装类</h3><p>像int，double，long等基本数据类型是不能想引用数据类型那样调用方法的</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image013.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image014.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image015.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h2><p>集合与数组的区别：数组长度是固定的，集合长度可变；数组中存储的是同一类型数据，统一集合中可以存储多种数据类型，包括基本数据类型和引用数据类型。</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image016.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">创建集合：</span><br><span class="line"></span><br><span class="line">Collection&lt;String&gt; coll=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;()</span><br><span class="line"></span><br><span class="line">常用方法：</span><br><span class="line"><span class="comment">//将给定的对象添加到当前集合中</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空集合中所有元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把给定的对象从当前集合中删除</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断集合中是否存在指定元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断集合是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//集合的长度，也就是集合中元素的长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>



<h3 id="迭代器Iterator"><a href="#迭代器Iterator" class="headerlink" title="迭代器Iterator"></a>迭代器Iterator</h3><p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image017.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image018.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>增强for:</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image019.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>collection的子接口，不但继承了Collection接口中的全部方法</p>
<p>创建list：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list1=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">list1.add(“alice”);</span><br><span class="line"></span><br><span class="line">list的子类：ArrayList</span><br><span class="line"></span><br><span class="line">list的子类：LinkedList</span><br><span class="line"></span><br><span class="line">LinkedList&lt;String&gt; kdt=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;;();</span><br><span class="line"></span><br><span class="line">	.addFirst()添加元素到列表头部</span><br><span class="line"></span><br><span class="line">	.addLast()添加元素到列表尾部</span><br><span class="line"></span><br><span class="line">	.getFist()返回列表的第一个元素</span><br><span class="line"></span><br><span class="line">	.getLast()返回列表的最后一个元素</span><br><span class="line"></span><br><span class="line">	.removeFirst()移除并返回列表的第一个元素</span><br><span class="line"></span><br><span class="line">	.removeLast()移除并返回列表的最后一个元素</span><br><span class="line"></span><br><span class="line">	.push()向列表推入一个元素（从前面推进去）</span><br><span class="line"></span><br><span class="line">	.pop()弹出一个元素</span><br></pre></td></tr></table></figure>



<h3 id="set类"><a href="#set类" class="headerlink" title="set类"></a>set类</h3><blockquote>
<p>同样是继承于Collection接口，set中所存储的元素是不重复的，并且元素是无序的</p>
</blockquote>
<ol>
<li> HashSet</li>
</ol>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image020.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>HashSet的子类LinkedHashList类</p>
<blockquote>
<p>查找速度快数据是有序的</p>
</blockquote>
<h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><p>往集合中添加一些元素</p>
<p>Collections.addAll（list,1,2,3,4,5）</p>
<p>打乱集合顺序</p>
<p>Collections.shuffle(list)</p>
<p>将集合中元素排序(默认升序)</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image021.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>Collections.sort(list)</p>
<h2 id="Map（键值对）"><a href="#Map（键值对）" class="headerlink" title="Map（键值对）"></a>Map（键值对）</h2><blockquote>
<p>与Collection不同，Collection当中的集合都是孤立的，向集合中存储元素都是一个个元素存储，Map中的元素都是成对存在的，每个元素都是值和键两部分组成，通过键可以找到对应的值</p>
</blockquote>
<p>常用的子类中有HashMap，和HashMap下还有一个子类LinkedHashMap</p>
<p>常用的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String,String&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;();</span><br><span class="line">	<span class="comment">//把指定的键于指定的值添加到map集合中</span></span><br><span class="line">	map.put( “<span class="number">218307035</span>”,”张三”); </span><br><span class="line">	<span class="comment">//移除指定的键所对应的键值对，并返回键值对的值</span></span><br><span class="line">	map.remove(“<span class="number">218307035</span>”); </span><br><span class="line">	<span class="comment">//获取这个键所对应的值</span></span><br><span class="line">	map.get(“<span class="number">218307035</span>”); </span><br><span class="line">	<span class="comment">//获取集合中所有的键</span></span><br><span class="line">	map.keySet(); </span><br><span class="line">	<span class="comment">//判断集合中是否包含指定的键</span></span><br><span class="line">	map.containskey(“<span class="number">218307035</span>”); </span><br></pre></td></tr></table></figure>

<p>遍历所有键值对</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(String key:map.keySet())&#123;</span><br><span class="line">	String v=map.get(key)</span><br><span class="line">	System.out.println(key+”:”+v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取所有的项（键值对）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">set&lt;String,String&gt; entrySet=map.entrySet();</span><br><span class="line">getkey()获取Entry键</span><br><span class="line">getValue()获取Entry对象的值</span><br></pre></td></tr></table></figure>



<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型，用来灵活的将数据类型应用到不同的类、方法、接口当中，将数据类型作为参数传递。</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="异常-1"><a href="#异常-1" class="headerlink" title="异常"></a>异常</h3><p>指的就是程序在运行过程中，出现的非正常的情况，会导致程序非正常停止</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image022.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>Error:严重错误，无法通过处理的错误，只能写程序时尽量避免</p>
<p>Exception:表示异常，可以通过处理之后，使程序继续运行</p>
<h3 id="常见的异常"><a href="#常见的异常" class="headerlink" title="常见的异常"></a>常见的异常</h3><p><strong>一、编译时异常(Checked Exception)</strong></p>
<p>　　编译时异常是在编译阶段检测到的异常，它们通常表示程序可能无法正常执行的情况，需要在代码中进行处理。常见的编译时异常包括：</p>
<p>　　<strong>1.IOException(输入输出异常)</strong></p>
<p>　　当发生输入或输出操作失败时，比如文件读写错误或网络连接问题，会抛出IOException。处理该异常可以使用try-catch语句捕获并处理异常，或者在方法声明中使用throws关键字声明抛出该异常。</p>
<p>　　<strong>2.SQLException(SQL异常)</strong></p>
<p>　　SQLException是处理数据库操作时可能发生的异常，如连接数据库失败、执行SQL语句错误等。处理方法与IOException类似，可以使用try-catch语句捕获并处理异常，或在方法声明中声明抛出SQLException。</p>
<p>　　<strong>3.ClassNotFoundException(类未找到异常)</strong></p>
<p>　　当试图加载某个类时，但找不到该类时，会抛出ClassNotFoundException。常见的情况是未正确配置类路径或引入依赖库。处理该异常可以通过检查类路径或引入正确的库来解决。</p>
<p><strong>二、运行时异常(Unchecked Exception)</strong></p>
<p>　　运行时异常是在程序运行过程中检测到的异常，它们通常表示程序错误或逻辑错误。与编译时异常不同，运行时异常不需要在代码中强制进行处理，但我们仍然应该尽力避免它们的发生。以下是几个常见的运行时异常：</p>
<p>　　<strong>1.NullPointerException(空指针异常)</strong></p>
<p>　　当尝试访问空引用或未初始化的对象时，会抛出NullPointerException。为了避免该异常，我们应该在使用对象之前进行非空判断。</p>
<p>　　<strong>2.ArrayIndexOutOfBoundsException(数组越界异常)</strong></p>
<p>　　当尝试访问数组的索引超出有效范围时，会抛出ArrayIndexOutOfBoundsException。为了避免该异常，我们应该确保使用合法的数组索引。</p>
<p>　　<strong>3.ArithmeticException(算术异常)</strong></p>
<p>　　当进行除零操作或其他不合法的数学运算时，会抛出ArithmeticException。为了避免该异常，我们应该在进行除法运算之前进行适当的检查。</p>
<p><strong>三、自定义异常(Custom Exception)</strong></p>
<p>　　除了Java提供的标准异常之外，我们还可以根据需求创建自定义异常。自定义异常可以继承自Exception或RuntimeException类，并根据具体情况添加自定义信息和逻辑。通过自定义异常，我们可以更好地捕获和处理特定的错误情况。</p>
<h3 id="异常的捕获try…catch"><a href="#异常的捕获try…catch" class="headerlink" title="异常的捕获try…catch"></a>异常的捕获try…catch</h3><ol>
<li> 将有可能发生异常的代码放在try语句中，将有可能发生异常的种类放在catch的参数中，catch语句块中处理异常、</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try&#123;</span><br><span class="line"></span><br><span class="line">	//要监听的代码</span><br><span class="line"></span><br><span class="line">&#125;catch（异常类型 异常名变量）&#123;</span><br><span class="line"></span><br><span class="line">	//针对异常进行处理的代码</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image023.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ol>
<li><p>当有多个异常种类时可以用多个catch语句进行捕获，一但捕获到某个异常try语句中，程序停止不再执行，会往下运行其他程序</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image024.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>如果try语句中还有其他异常，而catch语句并没有捕获到，可以在最后加一个catch语句，参数为所有异常的父类Exception，它能够捕获到所有的异常，但是一旦前面的某一个catch捕获到了异常，后面的所有catch语句将不在进行捕获。</p>
</li>
</ol>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image025.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="finally语句块"><a href="#finally语句块" class="headerlink" title="finally语句块"></a>finally语句块</h3><blockquote>
<p>当程序发生异常时在catch语句中捕获到，并进行处理时，可能会让程序发生跳转或者返回等等。这时发生try…catch后面的语句就不再执行，为了解决这个问题，finally语句块中的程序是无论是否发生异常都会去执行的代码。</p>
</blockquote>
<h3 id="异常的抛出throw"><a href="#异常的抛出throw" class="headerlink" title="异常的抛出throw"></a>异常的抛出throw</h3><p>1.当程序发生异常时，不做处理，可以抛出给调用者，让调用者处理。throw是写在方法内部，该方法的声明处要用throws关键字抛出异常种类。</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image026.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>2.当方法内部用了多了throw，抛出多个异常时，在方法的声明处，用throws关键字抛出多个异常种类，用逗号隔开。</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image027.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>并发：在同一时刻，有多个指令在单个CPU上<strong>交替执行</strong></p>
<p>并行：在同一时刻，有多个指令在多个CPU上<strong>同时执行</strong></p>
<p>进程：一个内存中运行的应用程序，每个进程都有独立的内存空间，一个应用处程序可以有多个进程</p>
<p>线程：是最小的执行单元，一个进程中可以有多个线程</p>
<blockquote>
<p>多线程：程序可以同时运行多个任务</p>
</blockquote>
<h3 id="创建线程（继承Thread）"><a href="#创建线程（继承Thread）" class="headerlink" title="创建线程（继承Thread）"></a>创建线程（继承Thread）</h3><ol>
<li><p>定义一个Thread的子类，并重写run（）方法，run()方法就代表了线程需要完成的任务</p>
</li>
<li><p>创建Thread子类的对象</p>
</li>
<li><p>调用线程的start（）方法来启动线程</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image-20230806152749452.png" alt="image-20230806152749452" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>结果：两线程随机交替执行100次“hello world”</p>
</li>
</ol>
<h3 id="创建线程（通过Runnable接口）："><a href="#创建线程（通过Runnable接口）：" class="headerlink" title="创建线程（通过Runnable接口）："></a>创建线程（通过Runnable接口）：</h3><ol>
<li><p>定义Runnable的实现类，重写该接口的run（）方法</p>
</li>
<li><p>创建该实现类的类对象并以此类对象作为Thread的参数来创建Thread对象，该对象才是真正的线程对象。</p>
</li>
<li><p>调用start（）方法来启动线程</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image-20230806152950189.png" alt="image-20230806152950189" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>结果：两线程随机交替执行100次“hello world”</p>
</li>
</ol>
<h3 id="Thread类主要方法"><a href="#Thread类主要方法" class="headerlink" title="Thread类主要方法"></a>Thread类主要方法</h3><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>String getName()</td>
<td>返回此线程的名称</td>
</tr>
<tr>
<td>void setName(String name)</td>
<td>设置线程的名字（构造方法也可以设置名字）</td>
</tr>
<tr>
<td>static Thread currentThread()</td>
<td>获取当前线程的对象</td>
</tr>
<tr>
<td>static void sleep(long time)</td>
<td>让线程休眠指定的时间，单位为毫秒</td>
</tr>
<tr>
<td>setPriority(int new Priority)</td>
<td>设置线程的优先级</td>
</tr>
<tr>
<td>final int getPriority()</td>
<td>获取现成的优先级</td>
</tr>
<tr>
<td>final void setDaemon(Boolean on)</td>
<td>设置为守护线程</td>
</tr>
<tr>
<td>public static void yieId()</td>
<td>出让线程/礼让线程</td>
</tr>
<tr>
<td>public static void join()</td>
<td>插入线程/插队线程</td>
</tr>
</tbody></table>
<h4 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h4><p>线程调度方式：</p>
<p>抢占式调度：主打一个随机性，<strong>谁抢到算谁的</strong>。线程的优先级有十个档次，0为最低。但是要注意，<strong>这不代表优先级高的就一定先执行完</strong>，他只是概率会很大。</p>
<h4 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h4><p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image-20230806164925334.png" alt="image-20230806164925334" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>当把一个进程设置为守护进程时，当主进程执行完而守护进程没有执行完，就会逐渐结束。</p>
<p>应用场景：QQ聊天并传送文件，聊天和文件传输各使用一个进程，当聊天页面被关闭时，文件传输进程也会随之关闭</p>
<h3 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h3><p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image-20230806171821089.png" alt="image-20230806171821089" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>什么是线程安全</p>
<p>当一个共享资源被多个线程共享时各个线程不相通，所以就会形成线程多次执行同一个任务</p>
<p>为了解决这个问题java提供了同步锁和Lock锁</p>
<p>同步锁格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> ticket=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> Object object=<span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticket &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    ticket++;</span><br><span class="line">                    System.out.println(getName() + <span class="string">&quot;正在卖第&quot;</span> + ticket + <span class="string">&quot;张票！！！&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Lock锁格式：</p>
<p><img src="img/JavaSE%E7%AC%94%E8%AE%B0/image-20230806190429892.png" alt="image-20230806190429892" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>public void lock()；加同步锁</p>
<p>public void unlock()；解锁</p>
</blockquote>
<h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image029.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="等待唤醒机制"><a href="#等待唤醒机制" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h3><ol>
<li><p> wait:线程不再活动，进入wait set中，不会浪费cpu,这时的状态就是waiting,必须等着另一个线程执行唤醒notify动作，把在waiting中的线程唤醒，这时waiting 中的线程从waiting set中释放出来。</p>
</li>
<li><p> notify：从waiting set中选取一个线程释放，</p>
</li>
<li><p> notifyAll:把waiting set中所有的线程唤醒。</p>
</li>
</ol>
<p>注意事项：从waiting set中释放的线程并不代表可以立即恢复执行，只是进入可执行状态；</p>
<p>注意事项：</p>
<p>1.wait和notify方法必须要用同一个锁对象,锁对象只能唤醒同一个锁对象中等待的线程。</p>
<p>2.锁对象可以是任意对象。</p>
<p>3.wait和notify方法必须要放在同步代码块或者同步方法中。</p>
<h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><blockquote>
<p>什么是lambda表达式</p>
<p>是一种简化匿名内部类的方法，并不是所有的匿名内部类都能简化，前提是<strong>必须是一个接口并且接口中只有一个抽象方法</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xianc</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span>  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;  </span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在运行&quot;</span>);  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;  </span><br><span class="line">	xianc xc=<span class="keyword">new</span> <span class="title class_">xianc</span>();  </span><br><span class="line">	Thread th=<span class="keyword">new</span> <span class="title class_">Thread</span>(xc);  </span><br><span class="line">	th.start(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名内部类  </span></span><br><span class="line">	Thread th=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;  </span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在运行&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">	&#125;);  </span><br><span class="line">	th.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda表达式  </span></span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;  </span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在运行&quot;</span>);  </span><br><span class="line">	&#125;).start();  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="File文件类"><a href="#File文件类" class="headerlink" title="File文件类"></a>File文件类</h2><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><p>public File(String pathname);通过给定的路径名字符串创建File实例。</p>
<p>public File(String parent,String child);第一个参数是父路径，第二个参数是文件名。</p>
<p>public File(File parent,String chilid);第一个参数是通过父路径创建的File实例。</p>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>public String getAbsolutePath():返回文件的绝对路径。</p>
<p>public String getPath();返回路径名的字符串，即定义File对象实例时，传进去的参数。</p>
<p>public String getName();获取文件的名称</p>
<p>public long length();获取文件的大小。</p>
<h3 id="判断功能方法"><a href="#判断功能方法" class="headerlink" title="判断功能方法"></a>判断功能方法</h3><p>public boolean exists();用于判断指定路径中文件是否存在</p>
<p>public boolean isDirectory();用于判断路径是否是一个目录</p>
<p>public boolean isFile();用于判断路径是否是一个文件</p>
<h3 id="创建和删除功能"><a href="#创建和删除功能" class="headerlink" title="创建和删除功能"></a>创建和删除功能</h3><p>public boolean createFile();当文件或目录不存在的时候返回true并创建，如果存在就返回false</p>
<p>public boolean delete();当文件存在时返回true否则返回false</p>
<p>public boolean mkdir();创建一个目录</p>
<p>public boolean mkdirs();创建多级目录</p>
<h3 id="遍历目录"><a href="#遍历目录" class="headerlink" title="遍历目录"></a>遍历目录</h3><p>public String[] list();返回一个String数组，表示该File目录中的所有子文件和目录。</p>
<p>只能输出一级目录下的文件和目录。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;  </span><br><span class="line">File dir=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:&quot;</span>); <span class="comment">/*创建文件对象*/</span></span><br><span class="line"></span><br><span class="line">String [] names= dir.list();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(String i:names)&#123;  </span><br><span class="line">		System.out.println(i);  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5201314.pptx</p>
<p>实训练习</p>
<p>WordPress mysqle</p>
<p>外星人就在月球背面.txt</p>
<p>课件</p>
<p>软件安装包</p>
<p>public File[] listFile();返回是一个File数组，表示该File目录中的所有子文件和目录。只能输出一级目录下的文件和目录。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">File dir=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:&quot;</span>); <span class="comment">/*创建文件对象*/</span>  </span><br><span class="line">File [] names= dir.listFiles();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(File i:names)&#123;  </span><br><span class="line">System.out.println(i);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>都是一级文件<br>/* F:$RECYCLE.BIN<br>F:5201314.pptx<br>F:实训练习<br>F:WordPress mysqle<br>F:外星人就在月球背面.txt<br>F:课件*/</p>
<h3 id="文件过滤器"><a href="#文件过滤器" class="headerlink" title="文件过滤器"></a>文件过滤器</h3><p>导入java.io.FileFilter;是一个接口，里面有一个抽象方法：</p>
<p>boolean accept(File name);</p>
<p>例子：保留所有.java类型的文件</p>
<p>方法一：先建立一个FileFilter的实现类，重写accept方法，然后在测试类里，创建该实现类的类对象，遍历目录中的所有文件，每层循环都调用一次该对象中的accept方法，返回true则输出该文件，否则不输出。</p>
<p>FileFilter的实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bianlimulu</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.FileFilter&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File pathname)</span> &#123;  </span><br><span class="line">	<span class="keyword">return</span> pathname.getName().endsWith(<span class="string">&quot;.java&quot;</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">File file=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F://&quot;</span>);  </span><br><span class="line">File [] dir=file.listFiles(); <span class="comment">/*创建数组接收文件*/</span>  </span><br><span class="line">FileFilter ff=<span class="keyword">new</span> <span class="title class_">bianlimulu</span>(); <span class="comment">/*利用多态创建对象*/</span>  </span><br><span class="line"><span class="keyword">for</span>(File a:dir)&#123; <span class="comment">/*遍历数组元素*/</span>  </span><br><span class="line">	<span class="keyword">if</span>(ff.accept(a))&#123; <span class="comment">/*如果末尾是.java*/</span>  </span><br><span class="line">		System.out.println(a); <span class="comment">/*输出*/</span>  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/*F:\\abc3.java*/</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>方法二：对方法一种，不再单独写一个类，而是用内部类来实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bianlimulu</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;  </span><br><span class="line">File file=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:&quot;</span>);  </span><br><span class="line">File [] list=file.listFiles();  </span><br><span class="line">FileFilter ff=<span class="keyword">new</span> <span class="title class_">FileFilter</span>()&#123;  </span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File pathname)</span> &#123;  </span><br><span class="line">	<span class="keyword">return</span> pathname.getName().endsWith(<span class="string">&quot;.java&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">for</span>(File f:list)&#123;  </span><br><span class="line">	<span class="keyword">if</span> (ff.accept(f)) &#123;  </span><br><span class="line">		System.*out*.println(f);  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="字节流和字符流"><a href="#字节流和字符流" class="headerlink" title="字节流和字符流"></a>字节流和字符流</h2><h3 id="IO的分类"><a href="#IO的分类" class="headerlink" title="IO的分类"></a>IO的分类</h3><p>输入流：把数据从其他设备上读取到内存中</p>
<p>输出流：把数据从内存中写出到其他设备</p>
<h3 id="字节流和字符流-1"><a href="#字节流和字符流-1" class="headerlink" title="字节流和字符流"></a>字节流和字符流</h3><p>字节流：以字节为单位，读写数据</p>
<p>字符流：以字符为单位，读写数据</p>
<h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><ol>
<li> OutputStream类是一个抽象类，表示所有字节的输出流的父类。</li>
</ol>
<p>导入java.io.FileOutputStream;必须写在try语句中，或者抛出异常IOException。</p>
<p>File dir=new File(“E:\\aaa.txt”);</p>
<p>FileOutputStream fos=new FileOutputStream(dir,true);</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image035.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>一次存放多个字节</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image036.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ol>
<li> InputStream类是一个抽象类，表示所有字节的输出流的父类。</li>
</ol>
<p>导入java.io.FileInputStream;必须写在try语句中，或者抛出异常IOException。</p>
<p>File dir=new File(“E:\\aaa.txt”);</p>
<p>FileInputStream fos=new FileInputStream(dir);</p>
<p>读一个字符</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image037.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><ol>
<li> 字符输出流</li>
</ol>
<p>当用字节流读写文件时，可能会遇到一个问题，就是遇到中文字符时，会显示乱码，这个时候可以用字符流来读取文件</p>
<p>字符输出流：Reader类是一个抽象类，用来读取文件内容，常用得一个子类就是FileReader，导入java.io.FileReader；</p>
<p>字符输入流：Writer类是一个抽象类，用来读取文件内容，常用得一个子类就是FileReader，导入java.io.FileWriter；</p>
<ol>
<li>构造方法</li>
</ol>
<p>public FileWriter(File file);以File类对象为参数创建输出流</p>
<p>public FileWriter(String filename,boolean append);以文件名为参数，创建输出流，每次都是先把文件清空，在往里写内容。第二个参数代表是否追加，即每次写的时候是在文件后面追加内容，还是先清空，再重写，如果是true,则是追加，false是清空重写，默认是false.</p>
<ol start="2">
<li>字符输入流</li>
</ol>
<p>导入java.io.FileReader；用来读取文件内容。</p>
<p>1，构造方法</p>
<p>（1）public FileReader(File file)；参数为File类对象，创建一个字符输入流。</p>
<p>（2）public FileReader(String filename);参数为文件名，创建一个字符输入流。</p>
<p>2.读取字符数据</p>
<p>（1）read();一次读取一个字符</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image038.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>(2)read(char[] c);一次读取一个字符数组</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image039.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="关闭和刷新机制"><a href="#关闭和刷新机制" class="headerlink" title="关闭和刷新机制"></a>关闭和刷新机制</h3><p>我们在利用输出流写东西时，如果不调用close()方法，所写的内容是无法写出到文件上的，但是调用了close()方法，那么就无法再继续写内容，这个时候可以用刷新机制flush()，调用flush()方法，可以将之前写的内容都呈现在文件中。</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image040.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><strong>文件输出：我爱你</strong></p>
<h3 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h3><p>缓冲流也就高效流。基本流中，每次读一次数据，写一次数据，频繁的IO操作，会降低程序运行的效率，缓冲流就是在创建流对象的时候，会创建一个缓冲区，通过缓冲区，将数据暂存在缓冲区，从而提高读写的效率。</p>
<p>1.字节缓冲流：</p>
<p>（1）字节缓冲输入流：BufferedInputStream(new FileInputSream())</p>
<p>（2）字节缓冲输出流：BufferedOutputStream(new OutputFormat</p>
<p>​    putStream())</p>
<p>2.字符缓冲流</p>
<p>（1）字符缓冲输入流：BufferedReader(new FileReader())</p>
<p>（2）字符缓冲输出流：BufferedWriter(new FileWriter())</p>
<h3 id="效率测试字节缓冲流"><a href="#效率测试字节缓冲流" class="headerlink" title="效率测试字节缓冲流"></a>效率测试字节缓冲流</h3><p>（1）基本字节流</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image041.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>运行结果：224ms</p>
<p>（2）缓冲流</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image042.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>运行结果：3ms</p>
<p>（1）基本字符流</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image043.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>运行结果：45ms</p>
<p>（2）字符缓冲流</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image044.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>运行结果：17ms</p>
<h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><blockquote>
<p>程序中，读写的文件默认是utf-8，但是往往有些时候文件并不是utf-8而是GBK或者其他编码，这个时候程序在读写时可能会出错，这个时候可以用转换流来制定读取的文件编码</p>
</blockquote>
<p>InputStreamReader类：它读取字节，并按照指定编码读取。</p>
<p>（1）构造方法：</p>
<p>public InputStramReader(InputStream in,String charsetName);创建一个指定字符集的字符流。</p>
<p>（2）指定编码读取</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image045.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>2.OutputStreamWriter:写出字节，按照指定编码</p>
<p>（1）构造方法</p>
<p>public OutputStreamWriter(OutputStream in);创建一个默认字符集的字符流</p>
<p>public OutputStramWriter(OutputStream in,String charsetName);创建一个指定字符集的字符流。</p>
<p>指定编码写出</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image046.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p>一个类对象要想序列化，这个类定义时必须实现一个接口Serializable，导入java.io.Serializable;</p>
<p>一、ObjectOutputStream类:序列化</p>
<p>构造方法：public ObjectOutputStream(outputStream out);</p>
<p>导入java.io.ObjectOutputStream;</p>
<p>1.定义一个序列化的类</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image047.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>2.在测试类里写出对象方法：writeObject()</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image048.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ol>
<li> ObjectInputStream类:反序列化</li>
</ol>
<p>构造方法：public ObjectInputStream(inputStream in);</p>
<p>导入java.io.ObjectInputStream;</p>
<p>读取对象序列化文件调用readObject()方法，必须抛出异常ClassNotFoundException；</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image049.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="属性集"><a href="#属性集" class="headerlink" title="属性集"></a>属性集</h2><p>导入java.util.Properties；使用键值对结果来存储数据，每一个键跟值都是字符串。</p>
<p>构造方法：</p>
<p>public Properties();</p>
<h3 id="基本的存储方式"><a href="#基本的存储方式" class="headerlink" title="基本的存储方式"></a>基本的存储方式</h3><p>public object setProperty(String key,String value);保存一对的属性</p>
<p>public String getProperty(String key);通过键获取对应的属性值</p>
<p>public Set&lt;String&gt; stringPropertyNames();获取所有键的名称</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image050.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="与流有关的方法"><a href="#与流有关的方法" class="headerlink" title="与流有关的方法"></a>与流有关的方法</h3><blockquote>
<p>1.public void load(InputStream in);从字节输入流中读取键值对。</p>
</blockquote>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image051.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ol>
<li> 前提是1.txt的文本存储内容为：</li>
</ol>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image052.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>2.public void store(OutputStream out,String comment );将属性集内容写出到文本文件中。</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image053.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="网络通讯协议"><a href="#网络通讯协议" class="headerlink" title="网络通讯协议"></a>网络通讯协议</h2><p>通过计算机网络可以使用多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时要遵守一定的规则，被称为网络通讯协议，它对数据的传输格式、传输速率、传输步骤等做了统一的规定，通信双方必须同时遵守才能完成数据的传输和交换。</p>
<p><strong>TCP/IP协议</strong>：传输控制协议。是面向连接的通信协议，即在传输之前，发送端和接收端建立连接，然后才传输数据，它提供了两台计算机之间可靠无差错的数据传输。三次握手：在发送端发送数据的准备阶段，客户端与服务器之间有三次交互，以保证连接的可靠。</p>
<p>第一次握手：客户端向服务器发送连接请求，等待服务器确认。</p>
<p>第二次握手：服务器端向客户端回送一个响应，通知客户端收到了连接请求。</p>
<p>第三次握手：客户端再次向服务器端发送确认信息，确认连接。</p>
<p>完成三次握手，客户端和服务器端就可以开始进行数据传输了，由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛。</p>
<p><strong>UDP协议：</strong>用户数据报协议。无连接协议，数据发送端和接收端不建立连接，即当一台计算机向另一台计算机发送数据时，发送端不用确认接收端是否存在，就直接发送数据，同样，如果接收端接收到数据了，它也不会向发送端反馈是否收到数据。由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP。</p>
<p>特点：数据被限制在64kb以内，超出这个范围就不能发送了。</p>
<h3 id="网络编程的三要素"><a href="#网络编程的三要素" class="headerlink" title="网络编程的三要素"></a>网络编程的三要素</h3><ol>
<li><p> 协议：TCP/IP或UDP等等。</p>
</li>
<li><p> IP地址：用来给一个网络中的计算机设备的唯一编号。IP地址分类主要分为IPV4和IPV6</p>
</li>
<li><p> 端口号：每台计算机都有很多进程，如果说IP地址可以唯一的标识网络中的电脑，那么端口号就可以唯一的标识电脑中的进程（应用程序）。</p>
</li>
</ol>
<blockquote>
<p>端口号一般用两个字节来表示，取值范围0~65535.</p>
</blockquote>
<p>利用协议+IP地址+端口号三元组合，就可以唯一的标识网络中的进程了。</p>
<h3 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h3><p>两端（客户端和服务器端）通信时的步骤：</p>
<ol>
<li><p> 服务器端程序，需要先启动，等待客户端的连接。</p>
</li>
<li><p> 客户端主动去连接服务器端，连接成功后才能通信，服务器端不可以主动连接客户端。</p>
</li>
</ol>
<p>在Java中，提供了两个类用于实现TCP通信程序：</p>
<ol>
<li><p> 客户端：导入java.net.Scoket;创建Socket类对象，向服务端发出连接请求，服务端相应请求，两者连接开始通信。</p>
</li>
<li><p> 服务器端：导入java.net.ServerSocket；创建ServerSocket对象，相当于开启一个服务，等待客户端的连接。</p>
</li>
</ol>
<h3 id="客户端Socket类"><a href="#客户端Socket类" class="headerlink" title="客户端Socket类"></a>客户端Socket类</h3><p>1.构造方法：public Socket(String host,int port);参数host代表的是要连接的服务器端的IP地址，port代表的指定的端口号。127.0.0.1代表的是本机地址。</p>
<p>2.成员方法：</p>
<p>（1）public InputStream getInputStream();返回输入流</p>
<p>（2）public OutputStream getOutputStream();返回输出流</p>
<p>（3）public void close();关闭套接字</p>
<p>（4）public void shutdownOutput();禁用此套接字的输出流。</p>
<h3 id="服务器端ServerSocket类"><a href="#服务器端ServerSocket类" class="headerlink" title="服务器端ServerSocket类"></a>服务器端ServerSocket类</h3><p>1.构造方法：public ServerSocket(int port);port代表的指定的端口号。</p>
<p>2.成员方法：</p>
<p>（1）public Socket accept();侦听并接收连接，返回一个新的Socket对象，用于和客户端实现通信。</p>
<h3 id="网络程序案例"><a href="#网络程序案例" class="headerlink" title="网络程序案例"></a>网络程序案例</h3><p><strong>服务器端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fuwuqiduan</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String\[\] args)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">	<span class="comment">//创建指定端口号  </span></span><br><span class="line">	ServerSocket ss=<span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">6666</span>);  </span><br><span class="line">	<span class="comment">/*侦听并接收连接*/</span>  </span><br><span class="line">	Socket server=ss.accept();  </span><br><span class="line">	<span class="comment">/*返回输入流*/</span>  </span><br><span class="line">	InputStream is=server.getInputStream();  </span><br><span class="line">	<span class="type">byte</span> [] b=<span class="keyword">new</span> <span class="title class_">byte</span> [<span class="number">100</span>];  </span><br><span class="line">	<span class="comment">/*输入流读取返回到数组b*/</span>  </span><br><span class="line">	is.read(b);  </span><br><span class="line">	<span class="keyword">for</span>(<span class="type">byte</span> i:b)&#123;  </span><br><span class="line">		System.out.print((<span class="type">char</span>)i);  </span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="comment">/*输出流*/</span>  </span><br><span class="line">	OutputStream out=server.getOutputStream();  </span><br><span class="line">	out.write(<span class="string">&quot;i am fine thanks&quot;</span>.getBytes(StandardCharsets.*UTF\_8*));  </span><br><span class="line">	out.close();  </span><br><span class="line">	ss.close();  </span><br><span class="line">	is.close();  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/*alice,how are you*/</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>客户端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">kehuduan</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">	<span class="comment">/*创建客户端对象*/</span>  </span><br><span class="line">	Socket client=<span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6666</span>);  </span><br><span class="line">	<span class="comment">/*创建输出流*/</span>  </span><br><span class="line">	OutputStream os=client.getOutputStream();  </span><br><span class="line">	os.write(<span class="string">&quot;alice,how are you&quot;</span>.getBytes(StandardCharsets.UTF_8));  </span><br><span class="line">	<span class="comment">/*创建输入流*/</span>  </span><br><span class="line">	InputStream in=client.getInputStream();  </span><br><span class="line">	<span class="type">byte</span> [] b=<span class="keyword">new</span> <span class="title class_">byte</span> [<span class="number">20</span>];  </span><br><span class="line">	in.read(b);  </span><br><span class="line">	<span class="keyword">for</span>(<span class="type">byte</span> i:b)&#123;  </span><br><span class="line">		System.*out*.print((<span class="type">char</span>)i);  </span><br><span class="line">	&#125;  </span><br><span class="line">	os.close();  </span><br><span class="line">	client.close();  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="XML文件操作"><a href="#XML文件操作" class="headerlink" title="XML文件操作"></a>XML文件操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dom</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> IOException, DocumentException &#123;  </span><br><span class="line"><span class="comment">/*创建XML对象*/</span>  </span><br><span class="line">SAXReader reader=<span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*读取指定XML文件*/</span>  </span><br><span class="line">Document docx=reader.read(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\\\Users\\\\Administrator\\\\Desktop\\\\网课练习\\\\XML操作\\\\新建文本文档.XML&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取根节点*/</span>  </span><br><span class="line">Element gen=docx.getRootElement();  </span><br><span class="line">System.*out*.println(gen.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取父节点下第一个子节点返回类型为Element*/</span>  </span><br><span class="line">Element zi1=gen.element(<span class="string">&quot;author&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取根节点下所有节点*/</span>  </span><br><span class="line">List list1= gen.elements(<span class="string">&quot;author&quot;</span>);  </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list1.size();i++)&#123;  </span><br><span class="line">	Element e1=(Element) (list1.get(i));  </span><br><span class="line">	System.*out*.println(e1.getText());  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*向指定的节点内添加一个节点*/</span>  </span><br><span class="line">Element son=zi1.addElement(<span class="string">&quot;age&quot;</span>);  </span><br><span class="line">son.setText(<span class="string">&quot;female&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改节点名*/</span>  </span><br><span class="line">son.setName(<span class="string">&quot;性别&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取当前节点的父节点 */</span>  </span><br><span class="line"><span class="comment">/*删除当前节点的子节点*/</span>  </span><br><span class="line">Element p1=gen.getParent();  </span><br><span class="line">p1.remove(gen);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*给节点添加属性*/</span>  </span><br><span class="line">gen.addAttribute(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;12345&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*节点修改属性*/</span>  </span><br><span class="line">gen.setAttributeValue(<span class="string">&quot;class&quot;</span>,<span class="string">&quot;4567&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*节点删除属性*/</span>  </span><br><span class="line">gen.remove(gen.attribute(<span class="string">&quot;class&quot;</span>));  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建输出文本字符集对象*/</span>  </span><br><span class="line">OutputFormat f=OutputFormat.createPrettyPrint();</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定用什么字符集保存  </span></span><br><span class="line">f.setEncoding(<span class="string">&quot;utf-8&quot;</span>);  </span><br><span class="line">FileOutputStream fo=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\\\Users\\\\Administrator\\\\Desktop\\\\网课练习\\\\XML操作\\\\新建文本文档.XML&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建XMLWrite对象，第一个属性是字符编码，第二个属性是文件*/</span>  </span><br><span class="line">XMLWriter w=<span class="keyword">new</span> <span class="title class_">XMLWriter</span>(fo,f);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将document对象写入到硬盘  </span></span><br><span class="line">w.write(docx);  </span><br><span class="line"><span class="comment">//关闭writer对象  </span></span><br><span class="line">fo.close();  </span><br><span class="line">w.close();  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Excel文件操作"><a href="#Excel文件操作" class="headerlink" title="Excel文件操作"></a>Excel文件操作</h2><h3 id="常见操作类：针对03版本，07版本只需把Hssp改为XSSf即可"><a href="#常见操作类：针对03版本，07版本只需把Hssp改为XSSf即可" class="headerlink" title="常见操作类：针对03版本，07版本只需把Hssp改为XSSf即可"></a>常见操作类：针对03版本，07版本只需把Hssp改为XSSf即可</h3><ol>
<li><p> HSSFWorkBook：Excel的文档对象</p>
</li>
<li><p> HSSFSheet：Excel文档中Sheet类</p>
</li>
<li><p> HSSRRow：Excel的行类</p>
</li>
<li><p> HSSFCell：Excel的列类</p>
</li>
<li><p> HSSFFont：Ecel的字体类</p>
</li>
<li><p> HSSFCellStyle：单元格样式表</p>
</li>
</ol>
<h3 id="创建一个Excel文件"><a href="#创建一个Excel文件" class="headerlink" title="创建一个Excel文件"></a>创建一个Excel文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HSSFWorkbook wb=<span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>();<span class="comment">/*创建一个Excel操作对象*/</span></span><br><span class="line"></span><br><span class="line">FileOutputStream fos=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\\\a1.xls&quot;</span>);  </span><br><span class="line">wb.write(fos);  </span><br><span class="line">fos.close();  </span><br><span class="line">wb.close();</span><br></pre></td></tr></table></figure>



<h3 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建一个Excel操作对象*/</span>  </span><br><span class="line">HSSFWorkbook wb=<span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>(); <span class="comment">/*创建一个Excel操作对象*/</span>  </span><br><span class="line">FileOutputStream fos=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\\\a1.xls&quot;</span>);  </span><br><span class="line">wb.write(fos);  </span><br><span class="line">fos.close();  </span><br><span class="line">wb.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*读入一个Excel对象*/</span>  </span><br><span class="line">FileInputStream fis=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\\\a1.xls&quot;</span>);  </span><br><span class="line">wb=<span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>(fis);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建一个sheet表*/</span>  </span><br><span class="line">wb.createSheet(<span class="string">&quot;2022.9.14&quot;</span>);  </span><br><span class="line">fos=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\\\a1.xls&quot;</span>);  </span><br><span class="line">wb.write(fos);  </span><br><span class="line">fos.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建一个sheet操作对象，定位到第一张sheet*/</span>  </span><br><span class="line">Sheet sheet= wb.getSheetAt(<span class="number">0</span>);  </span><br><span class="line">System.out.println(sheet.getSheetName());<span class="comment">/*获取sheet的名字并输出*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加行createSheet()*/</span>  </span><br><span class="line">Row r=sheet.getRow(<span class="number">0</span>);  </span><br><span class="line"><span class="keyword">if</span>(r==<span class="literal">null</span>)&#123;  </span><br><span class="line">sheet.createRow(<span class="number">0</span>);  </span><br><span class="line">System.out.println(<span class="string">&quot;创建了第一行&quot;</span>);  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">sheet.getRow(<span class="number">0</span>);  </span><br><span class="line">System.out.println(<span class="string">&quot;获取了第一行&quot;</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建多个行*/</span>  </span><br><span class="line">Row [] row=<span class="keyword">new</span> <span class="title class_">Row</span>[<span class="number">3</span>];  </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;  </span><br><span class="line">row [i]=sheet.createRow(i);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建单元格*/</span>  </span><br><span class="line">r=sheet.getRow(<span class="number">0</span>);  </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;  </span><br><span class="line">r.createCell(i).setCellValue(<span class="string">&quot;数据&quot;</span>+i);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除行内容，保留行*/</span>  </span><br><span class="line">r=sheet.getRow(<span class="number">0</span>);  </span><br><span class="line">sheet.removeRow(r);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*直接删除行*/</span>  </span><br><span class="line">sheet.shiftRows(<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>);<span class="comment">/*第一个参数是起始行，第二个参数是结尾行，-1代表下面的行上移*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*读取单元格名称*/</span>  </span><br><span class="line">r=sheet.getRow(<span class="number">0</span>);  </span><br><span class="line">Cell cell=r.getCell(<span class="number">0</span>);  </span><br><span class="line">System.*out*.println(cell.getStringCellValue());<span class="comment">/*输出单元格内容*/</span></span><br><span class="line"></span><br><span class="line">fos=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\\\a1.xls&quot;</span>);  </span><br><span class="line">wb.write(fos);  </span><br><span class="line">wb.close();  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="java爬虫"><a href="#java爬虫" class="headerlink" title="java爬虫"></a>java爬虫</h2><h3 id="Jsop类"><a href="#Jsop类" class="headerlink" title="Jsop类"></a>Jsop类</h3><p>主要是来完成对HTML的解析</p>
<p>parse（File in,String charctName）;解析HTML文件</p>
<p>connect(String url);通过网络地址获取Document对象</p>
<h3 id="Document类"><a href="#Document类" class="headerlink" title="Document类"></a>Document类</h3><p>获取整个html文档存放在Document类对象里，通过它可以获取Element和Elements对象</p>
<p>getElementById(String id);根据id属性获取唯一的Element对象。</p>
<p>getElementsByTag(String tagName);通过标签获取元素对象的集合。</p>
<p>getElementsByAttribute(String key);根据属性名称获取元素集合。</p>
<p>getElementsByAttributeValue(String key,String value);根据属性值获取元素的集合</p>
<h3 id="解析HTML"><a href="#解析HTML" class="headerlink" title="解析HTML"></a>解析HTML</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String url=<span class="string">&quot;https://www.51miz.com/sound/?utm\_term=8027759&amp;utm\_source=baidu2&amp;bd\_vid=11472151438253179744&quot;</span>;  </span><br><span class="line">Document att= Jsoup.connect(url).get();  </span><br><span class="line">Elements sound=att.getElementsByTag(<span class="string">&quot;source&quot;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="Element类"><a href="#Element类" class="headerlink" title="Element类"></a>Element类</h3><p>1.getElementByid(String id);根据id属性获取唯一的Element对象。</p>
<p>2.getElementsByTag(String tagName);通过标签获取元素对象的集合。</p>
<p>3.getElementsByAttribute(String key);根据属性名称获取元素集合。</p>
<p>4.getElementsByAttributeValue(String key,String value);根据属性值获取元素的集合。</p>
<p>String attr(String key);根据属性名称获取属性的值。</p>
<p>String text();获取文本内容。</p>
<p>String html();获取标签体的所有内容，包含标签。</p>
<h3 id="爬取图片"><a href="#爬取图片" class="headerlink" title="爬取图片"></a>爬取图片</h3><p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image054.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="爬取视频"><a href="#爬取视频" class="headerlink" title="爬取视频"></a>爬取视频</h3><p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image055.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="爬取音频"><a href="#爬取音频" class="headerlink" title="爬取音频"></a>爬取音频</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">String url=<span class="string">&quot;https://www.51miz.com/sound/?utm\_term=8027759&amp;utm\_source=baidu2&amp;bd\_vid=11472151438253179744&quot;</span>;  </span><br><span class="line">Document att= Jsoup.connect(url).get();  </span><br><span class="line">Elements sound=att.getElementsByTag(<span class="string">&quot;source&quot;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sound.size(); i++) &#123;  </span><br><span class="line">	Element e=sound.get(i);  </span><br><span class="line">	String s=e.attr(<span class="string">&quot;src&quot;</span>);  </span><br><span class="line">	<span class="keyword">if</span>(!s.startsWith(<span class="string">&quot;http&quot;</span>))&#123;  </span><br><span class="line">		s=<span class="string">&quot;http:&quot;</span>+s;  </span><br><span class="line">	&#125;  </span><br><span class="line">	URL videoUrl=<span class="keyword">new</span> <span class="title class_">URL</span>(s);  </span><br><span class="line">	String path=<span class="string">&quot;E:\\\\迅雷下载\\\\下载&quot;</span>+i+<span class="string">&quot;.mp3&quot;</span>;  </span><br><span class="line">	File file=<span class="keyword">new</span> <span class="title class_">File</span>(path);  </span><br><span class="line">	FileUtils.*copyURLToFile*(videoUrl,file);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>反射是能够直接操作类中所有的内部属性和方法</p>
</blockquote>
<h3 id="为什么不直接new对象而是使用反射呢"><a href="#为什么不直接new对象而是使用反射呢" class="headerlink" title="为什么不直接new对象而是使用反射呢"></a>为什么不直接new对象而是使用反射呢</h3><p>静态编译：在<strong>编译</strong>时就已经给定了类型，绑定了对象</p>
<p>Student stu=new Student();</p>
<p>动态编译：在<strong>运行</strong>时才给定类型，绑定对象。</p>
<p>动态编译最大限度的发挥了java的灵活性，体现了多态的应用</p>
<p>动态编译的缺点：对性能影响大</p>
<h3 id="反射机制的应用"><a href="#反射机制的应用" class="headerlink" title="反射机制的应用"></a>反射机制的应用</h3><p><strong>java反射机制提供的功能</strong></p>
<ol>
<li><p> 在运行时判断任意一个对象所属的类</p>
</li>
<li><p> 在运行时构造任意一个类的对象</p>
</li>
<li><p> 在运行时判断任意一个类所具有的成员变量和方法</p>
</li>
<li><p> 在运行时获取泛型类型</p>
</li>
<li><p> 在运行时调用任意一个对象的成员变量和方法</p>
</li>
<li><p> 在运行时处理注释</p>
</li>
<li><p> 生成状态代理（spring底层构造出的一个框架—应用工具）</p>
</li>
</ol>
<p><strong>反射相关的主要API</strong></p>
<p>java.lang.Class:代表一个类（生成的对象叫做类对象）</p>
<ol>
<li> 第一种方法：通过class关键字获取类对象（多用于知道是什么类型或传参）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">xcc xcc=<span class="keyword">new</span> <span class="title class_">xcc</span>();</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; clazz=xcc.class;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>第二种方法：通过class类的类方法forName来获取类对象（多用于指配文件，将类名定义在配置文件中，便于利用Java的反射机制生成类对象加载类）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class claxx= Class.forName(<span class="string">&quot;包名&quot;</span>);</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>第三种方法：通过class对象的getClass方法（多用于获取字节码的方式）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">xcc xcc=<span class="keyword">new</span> <span class="title class_">xcc</span>();</span><br><span class="line"></span><br><span class="line">Class clayy=xcc.getClass();</span><br></pre></td></tr></table></figure>



<ol>
<li> reflect包</li>
</ol>
<blockquote>
<p><strong>class类+java.lang.reflect=反射</strong></p>
</blockquote>
<p>java.lang包下的Class&lt;T&gt;表示一个正在运行的java应用程序中的类和接口是Reflection的起源</p>
<p>java.lang.reflect包下：</p>
<p>Field类：代表类对象的成员变量</p>
<p>Method类：代表类对象的方法</p>
<p>Constructor类：代表类的构造方法</p>
<p>Array类：提供了动态创建数组，以及访问数组的元素的静态方法</p>
<ol>
<li> Class类获取class的实例</li>
</ol>
<p>通常情况下我们通过new Object来生成一个类的实例对象，但是有的时候没办法直接new我们就必须通过反射动态生成</p>
<p>实例化无参构造方法的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.newInstance（）；</span><br><span class="line"></span><br><span class="line">Class.getConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;).newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>实例化有参构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor constr=classtype.getConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,<span class="type">int</span>.class,<span class="type">boolean</span>.class&#125;);</span><br><span class="line"></span><br><span class="line">zhi cc=(zhi) constr.newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;zhangsan&quot;</span>,<span class="number">18</span>,<span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure>

<p>调用构造方法</p>
<p>获取本身setName的所有方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method mee=classtype.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>,String.class);</span><br><span class="line"></span><br><span class="line">System.out.println(mee.getName());</span><br></pre></td></tr></table></figure>

<p>获取所有公有化的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method[] mee=classtype.getMethods()</span><br></pre></td></tr></table></figure>

<p>调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">met2.invoke(构造实例,<span class="string">&quot;setName&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>获取属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field fi2= classtype.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">field fi=clazz.getDeclaredField()</span><br><span class="line"></span><br><span class="line">Field[] fi=clazz.getFields()</span><br></pre></td></tr></table></figure>



<h3 id="class类常用的方法"><a href="#class类常用的方法" class="headerlink" title="class类常用的方法"></a>class类常用的方法</h3><p>获取空参构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor con=clazz.getConstructor().newInstance()</span><br><span class="line"></span><br><span class="line">Constructor con=clazz.getConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>获取有参构造</p>
<p>Constructor con=clazz.getCountructor(new Class[]{String.class,int.class})</p>
<p>获取所有公共方法</p>
<p>Method me=clazz.getMethod(“toString”,new Class[]{});</p>
<p>获取所有本身的方法</p>
<p>Method me=clazz.getMethods</p>
<h3 id="类的加载与classLoader（类加载器）"><a href="#类的加载与classLoader（类加载器）" class="headerlink" title="类的加载与classLoader（类加载器）"></a>类的加载与classLoader（类加载器）</h3><ol>
<li> 类的加载过程</li>
</ol>
<blockquote>
<p><strong>当程序主动使用某个类的时候。如果该类还未被加载到内存中则系统会通过三步进行该类的初始化</strong></p>
</blockquote>
<ol>
<li><p> 将类的class文件读入到内存中，并为之创建一个java.lang.Class对象，此过程由类加载器完成</p>
</li>
<li><p> 将类的二进制数据合并到JRE当中</p>
</li>
<li><p> jvm负责对类进行初始化</p>
</li>
</ol>
<p>&nbsp;</p>
<ol>
<li><p>各个步骤具体操作</p>
<ol>
<li><p> 加载：将class文件字节码内容加载到内存当中，并将这些静态数据转换成方法区的运行时数据接口，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口（引用地址）。所有需要访问和使用类数据的只能通过这个class对象。这个加载过程需要加载器的参与</p>
</li>
<li><p>链接：将java类的二进制代码合并到JVM的运行状态之中的过程</p>
<ol>
<li><p> ·验证：确保加载的类信息符合JVM规范，例如：以café开头，没有安全方面问题</p>
</li>
<li><p> 准备：正式为变量（static）分配内存并设置变量默认初始值的阶段，这些内存都将在方法区进行分配</p>
</li>
<li><p> 解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程</p>
</li>
</ol>
</li>
<li><p>初始化</p>
<ol>
<li><p> 执行类构造器&lt;clinit&gt;()方法的过程。类构造器&lt;clinit&gt;()方法是由编译器自动收集类中所有变量的赋值动作和静态代码块儿中的语句合并产生的</p>
</li>
<li><p> 当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化</p>
</li>
<li><p> 虚拟机会保证一个类的&lt;clinit&gt;()方法在多线程环境中被正确加锁和同步</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="JDBC技术"><a href="#JDBC技术" class="headerlink" title="JDBC技术"></a>JDBC技术</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>jdbc就是java操作数据库的一套API</p>
<p>全称（Java DataBase Connectivity）</p>
<h3 id="JDBC本质"><a href="#JDBC本质" class="headerlink" title="JDBC本质"></a>JDBC本质</h3><p>sun公司定义的一套关系型数据库准则，即接口，各个厂商去实现这个接口，提供数据库的驱动jar包，使用JDBC实际上执行的就是jar中的实现类</p>
<h3 id="JDBC-API详解"><a href="#JDBC-API详解" class="headerlink" title="JDBC API详解"></a>JDBC API详解</h3><p>DriverManager（驱动管理类）</p>
<ol>
<li> 注册驱动</li>
</ol>
<p>Class.forName(“com.mysql.jdbc.Driver”);</p>
<p>可以省略</p>
<ol>
<li> 获取链接</li>
</ol>
<p>Connection lian=DriverManager.getConnection(String url,String use,int password)</p>
<p>.getConnection属性值</p>
<ol>
<li> url链接路径</li>
</ol>
<p>语法：jdbc:mysql://ip地址:端口号/数据库名称</p>
<p>示例：jdbc:mysql://127.0.0.1:3306/biglist</p>
<ol start="2">
<li>Connection（连接数据库）</li>
</ol>
<p>&nbsp;</p>
<ol start="3">
<li>获取执行SQL的对象</li>
</ol>
<p>con.createStatement()</p>
<ol start="4">
<li>事务管理</li>
</ol>
<p>开启事务：setAutoCommit(boolean autoCommit);填true表示自动提交事务，false表示手动提交</p>
<p>提交事务：commit()</p>
<p>回滚事务：rollback()</p>
<p>PreparedStatement</p>
<p>PreparedStatement作用：</p>
<p>预编译SQL语句对象并切能执行：预防SQL注入问题</p>
<ol start="5">
<li>Statement(执行SQL语句)</li>
</ol>
<p>&nbsp;</p>
<ol start="6">
<li>ResultSet .executeQuery（sql）（结果集对象）</li>
</ol>
<blockquote>
<p>封装DQL查询语句的结果</p>
<p>ResultSet .executeQuery（sql）执行DQL语句，返回ResultSet对象</p>
<p>获取查询结果</p>
<p>boolean next（）；</p>
</blockquote>
<ol>
<li><p> 将光标从前位置向前移动一行</p>
</li>
<li><p> 判断当前行为有效行</p>
</li>
</ol>
<p>返回值true和false</p>
<p>xxx getXxx（参数）：获取数据</p>
<p>xxx：数据类型；如int getInt（参数）；String getString（参数）</p>
<p>参数：</p>
<p>int：列的编号，从1开始</p>
<p>String：列的名称</p>
<ol>
<li> int executeUpdate（sql）：执行DML、DDL语句</li>
</ol>
<blockquote>
<p>executeQuery <br>用于产生单个结果集的语句，例如 SELECT 语句。 被使用最多的执行 SQL 语句的方法是 executeQuery。这个方法被用来执行 SELECT 语句，它几乎是使用最多的 SQL 语句。  </p>
<p>executeUpdate<br>用于执行 INSERT、UPDATE 或 DELETE 语句以及 SQL DDL（数据定义语言）语句，例如 CREATE TABLE 和 DROP TABLE。INSERT、UPDATE 或 DELETE 语句的效果是修改表中零行或多行中的一列或多列。executeUpdate 的返回值是一个整数，指示受影响的行数（即更新计数）。对于 CREATE TABLE 或 DROP TABLE 等不操作行的语句，executeUpdate 的返回值总为零。</p>
</blockquote>
<h3 id="c3p0连接池"><a href="#c3p0连接池" class="headerlink" title="c3p0连接池"></a>c3p0连接池</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">ComboPooledDataSource cpd=new ComboPooledDataSource();</span><br><span class="line"></span><br><span class="line">Connection con= cpd.getConnection();</span><br><span class="line"></span><br><span class="line">等同于</span><br><span class="line"></span><br><span class="line">String url=”jdbc:mysql:///biglist”;</span><br><span class="line"></span><br><span class="line">String name=”root”;</span><br><span class="line"></span><br><span class="line">String pwd=”510609”;</span><br><span class="line"></span><br><span class="line">Connection con=DriverManager.getConnection(url,name,pwd)</span><br><span class="line"></span><br><span class="line">配置文件：必须放在src里面，并且只能叫c3p0-config.xml</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 默认配置，如果没有指定则使用这个配置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">default-config</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 连接参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span></span><br><span class="line">    jdbc:mysql://localhost:3306/biglist?serverTimezone=Asia/Shanghai</span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>510609<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 连接池参数 --&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--初始化申请的连接数量--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--最大的连接数量--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--超时时间--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">default-config</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">命名的配置,可以通过方法调用实现  </span><br><span class="line"><span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;mySource&quot;</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>510609<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>  </span><br><span class="line">	jdbc:mysql://localhost:3306/a1?characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!-- 如果池中数据连接不够时一次增长多少个 --&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>50<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">named-config</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="DBUtils"><a href="#DBUtils" class="headerlink" title="DBUtils"></a>DBUtils</h3><p>可以设置查询结果集的封装策略</p>
<p>QueryRunner qr=new QueryRunner(cpd);</p>
<p>QueryRunner类，用于执行数据库操作</p>
<h4 id="query（con-sql语句，查询操作）用于执行查询"><a href="#query（con-sql语句，查询操作）用于执行查询" class="headerlink" title="query（con,sql语句，查询操作）用于执行查询"></a>query（con,sql语句，查询操作）用于执行查询</h4><ul>
<li><p>ArrayHandler:把结果集中的第一行数据转成对象数组。</p>
</li>
<li><p>ArrayListHandler:把结果集中的每一行数据都转成一个对象数组，再存放到 List中。</p>
</li>
<li><p>BeanHandler:将结果集中的第一行数据封装到一个对应的JavaBean实例中。</p>
</li>
<li><p>BeanListHandler:将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</p>
</li>
<li><p>ColumnListHandler:将结果集中某一列的数据存放到List 中。</p>
</li>
<li><p>KeyedHandler:将结果集中的每一行数据都封装到一个Map里，然后再根据指定的 key把每个Map再存放到一个 Map里。</p>
</li>
<li><p>MapHandler:将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</p>
</li>
<li><p>MapListHandler:将结果集中的每一行数据都封装到一个Map 里，然后再存放到List。ScalarHandler:将结果集中某一条记录的其中某一列的数据存成object.</p>
</li>
</ul>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ComboPooledDataSource cpd=<span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">Connection con= cpd.getConnection();  </span><br><span class="line">QueryRunner qr=<span class="keyword">new</span> <span class="title class_">QueryRunner</span>(cpd);  </span><br><span class="line">String sql=<span class="string">&quot;select * from dz&quot;</span>;  </span><br><span class="line">Listshit list=qr.query(con,sql, <span class="keyword">new</span> <span class="title class_">BeanListHandlershit</span>(shit.class));  </span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>

<p>shit表示javabean实现类：包括getset、空参构造、toString</p>
<h4 id="update（）用于执行增删改"><a href="#update（）用于执行增删改" class="headerlink" title="update（）用于执行增删改"></a>update（）用于执行增删改</h4><p>ResultSetHandler接口，用于处理Result结果集</p>
<p>实现类：BeanHandler将结果集中的第一行数据封装在实现类对象中</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image056.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="Tomcat配置idea"><a href="#Tomcat配置idea" class="headerlink" title="Tomcat配置idea"></a>Tomcat配置idea</h2><blockquote>
<p><a href="https://baijiahao.baidu.com/s?id=1725595546321519849&wfr=spider&for=pc">如何在 IDEA 中创建并部署 JavaWeb 程序 (baidu.com)</a></p>
</blockquote>
<h2 id="服务器组件Servlet"><a href="#服务器组件Servlet" class="headerlink" title="服务器组件Servlet"></a>服务器组件Servlet</h2><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol>
<li><p> 创建一个java ee项目</p>
</li>
<li><p> 在src中创建一个类并且实现Servlet接口</p>
</li>
<li><p> 实现接口中的抽象方法</p>
</li>
<li><p> 配置Servlet</p>
</li>
</ol>
<blockquote>
<p>在web.xml文件中的web-app标签中写入：</p>
</blockquote>
<p>&lt;servlet&gt;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行原理：</p>
<ol>
<li><p>当服务器接收到客户端浏览器的请求后，会解析url路径，获取访问的Servlet的路径</p>
</li>
<li><p>查找web.xml中是否有对应的&lt;url-pattern&gt;标签内容</p>
</li>
<li><p>如果有则会找到对应的&lt;servlet-class&gt;全类名</p>
</li>
<li><p>Tomcat会将字节码文件加载进内存，创建类名的实例化对象</p>
</li>
<li><p>调用其方法</p>
</li>
</ol>
<h3 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h3><p>1.被创建（加载资源）</p>
<p>public void init() {<br>            /*初始化方法，在Servlet创建时执行只会执行一次*/</p>
<p>}</p>
<p>设置什么时候被创建</p>
<p>指定Servlet的创建时机，在web.xml文件的Servlet下创建<br>            1.第一次被访问时创建：&lt;load-on-startup&gt;的值为负数<br>            2.在服务器启动时创建：&lt;load-on-startup&gt;的值为0或者正整数</p>
<p>2.提供服务</p>
<p>public void service() {</p>
<p>​    System.<em>out</em>.println(“hello service”);<br>​            /*提供服务的方法，每一次Servlet被访问时会执行，可执行多次*/<br>​        }</p>
<p>3.被销毁</p>
<p>public void destroy() {  </p>
<p>​            /*销毁方法，在Servlet正常关闭时执行*/</p>
<p>}</p>
<blockquote>
<p>在Servlet被销毁之前执行，一般用于释放资源</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql数据库</title>
    <url>/2023/09/18/MySQL%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="MySQL笔记"><a href="#MySQL笔记" class="headerlink" title="MySQL笔记"></a>MySQL笔记</h1><h2 id="Mysql概述"><a href="#Mysql概述" class="headerlink" title="Mysql概述"></a>Mysql概述</h2><ul>
<li><p>数据库：存储数据的仓库，简称DataBase</p>
</li>
<li><p>数据库管理系统：操纵和管理数据库的大型软件，简称DBMS</p>
</li>
<li><p>SQL：操作关系型数据库的编程语言，定义了一套操作关系型数据库统一的标准</p>
<p>​    主流的关系型数据库管理系统：Oracle、Mysql、SQLserver等</p>
</li>
<li><p>关系型数据库：建立在关系模型基础上，有多张相互连接的二维表组成的数据库</p>
</li>
</ul>
<h2 id="Mysql操作"><a href="#Mysql操作" class="headerlink" title="Mysql操作"></a>Mysql操作</h2><h3 id="DDL定义数据库、表和字段"><a href="#DDL定义数据库、表和字段" class="headerlink" title="DDL定义数据库、表和字段"></a>DDL定义数据库、表和字段</h3><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><ol>
<li><p>创建数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database database_name;</span><br></pre></td></tr></table></figure></li>
<li><p>删除数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database database_name;</span><br></pre></td></tr></table></figure></li>
<li><p>选择数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use database_name;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><ol>
<li><p>创建表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table table_name (</span><br><span class="line">   column1 datatype,</span><br><span class="line">   column2 datatype,</span><br><span class="line">   column3 datatype,</span><br><span class="line">   ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p>删除表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table table_name;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="字段操作"><a href="#字段操作" class="headerlink" title="字段操作"></a>字段操作</h4><ol>
<li><p>添加新列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table customers add age int;</span><br></pre></td></tr></table></figure></li>
<li><p>修改列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table customers modify age date;</span><br></pre></td></tr></table></figure></li>
<li><p>删除列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table customers drop column age;</span><br></pre></td></tr></table></figure></li>
<li><p>重命名列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table customers rename column age to dob;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="DML数据增删改"><a href="#DML数据增删改" class="headerlink" title="DML数据增删改"></a>DML数据增删改</h3><h4 id="mysql数据类型"><a href="#mysql数据类型" class="headerlink" title="mysql数据类型"></a>mysql数据类型</h4><ol>
<li>数值型：</li>
</ol>
<p>　　　　　　tinyint  超小整数</p>
<p>　　　　　　smallint  小整数</p>
<p>　　　　　　mediumint  中整数</p>
<p>　　　　　　int　　整数</p>
<p>　　　　　　bigint　　大整数</p>
<p>　　　　　　float  单精度浮点型</p>
<p>　　　　　　double 双精度浮点型</p>
<ol start="2">
<li>字符型：</li>
</ol>
<p>　　　　　　char　　定长字符串</p>
<p>　　　　　　varchar　　变长字符串</p>
<p>　　　　　　blob　　二进制长文本</p>
<p>　　　　　　text　　长文本</p>
<p>　　　　　　longblob　　二进制超长文本</p>
<p>　　　　　　longtext　　超长文本</p>
<ol start="3">
<li>日期类型：</li>
</ol>
<p>　　　　　　date　　日期</p>
<p>　　　　　　time　　时间</p>
<p>　　　　　　year　　年份</p>
<p>　　　　　　datetime　　时期加时间</p>
<p>　　　　　　timestamp　　时间戳</p>
<h4 id="数据增删改"><a href="#数据增删改" class="headerlink" title="数据增删改"></a>数据增删改</h4><ol>
<li><p>插入数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名 (字段1, 字段2, ...) values (值1, 值2, ...);</span><br></pre></td></tr></table></figure></li>
<li><p>更新数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 字段1=值1, 字段2=值2, ... where 条件;</span><br></pre></td></tr></table></figure></li>
<li><p>删除数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名 where 条件;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="DQL查询"><a href="#DQL查询" class="headerlink" title="DQL查询"></a>DQL查询</h3><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><ol>
<li><p>检索所有列的数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from table_name;</span><br></pre></td></tr></table></figure></li>
<li><p>指定要检索的列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select column1, column2, ... from table_name;</span><br></pre></td></tr></table></figure></li>
<li><p>在检索结果中使用计算表达式：</p>
<p>这些查询将返回一个新的列，名为<code>new_column_name</code>，其中包含<code>column1</code>和<code>column2</code>的和</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select column1 + column2 as new_column_name from table_name;</span><br></pre></td></tr></table></figure></li>
<li><p>去除重复记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select distinct column1, column2, ... from table_name;</span><br></pre></td></tr></table></figure></li>
<li><p>对检索结果进行排序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select column1, column2, ... from table_name order by column1 asc/desc;</span><br></pre></td></tr></table></figure></li>
<li><p>限制检索结果集的数量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select column1, column2, ... from table_name limit x offset y;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><ol>
<li><p>查询所有名称以“a”开头的用户： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE name LIKE &#x27;a%&#x27;;</span><br></pre></td></tr></table></figure></li>
<li><p>查询所有年龄大于等于18岁的用户： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE age &gt;= 18;</span><br></pre></td></tr></table></figure></li>
<li><p>查询所有拥有电子邮件地址的用户： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE email IS NOT NULL;</span><br></pre></td></tr></table></figure></li>
<li><p>查询所有在2022年5月1日之前注册的用户： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE registration_date &lt; &#x27;2022-05-01&#x27;;</span><br></pre></td></tr></table></figure></li>
<li><p>查询所有来自中国的用户： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE country = &#x27;china&#x27;;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><ol>
<li><p>count：计算给定列中非空行的数量。 例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT COUNT(*) FROM table_name;</span><br></pre></td></tr></table></figure></li>
<li><p>sum：计算给定列中所有值的总和。 例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT SUM(column_name) FROM table_name;</span><br></pre></td></tr></table></figure></li>
<li><p>avg：计算给定列中所有值的平均值。 例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT AVG(column_name) FROM table_name;</span><br></pre></td></tr></table></figure></li>
<li><p>min：找出给定列中的最小值。 例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT MIN(column_name) FROM table_name;</span><br></pre></td></tr></table></figure></li>
<li><p>max：找出给定列中的最大值。 例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT MAX(column_name) FROM table_name;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>SELECT 字段列表 FROM表名 [WHERE条件 ] GROUP BY 分组字段名[HAVING 分组后过滤条件];</p>
<ol>
<li><p>对学生表按照性别进行分组查询各组的平均年龄：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select gender, avg(age) from student group by gender;</span><br></pre></td></tr></table></figure></li>
<li><p>对订单表按照客户ID和订单状态进行分组统计各组的订单数量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select customer_id, status, count(*) from orders group by customer_id, status;</span><br></pre></td></tr></table></figure></li>
<li><p>对销售表按照日期和产品类型进行分组查询各组的销售总额：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select date, product_type, sum(sales_amount) from sales group by date, product_type;</span><br></pre></td></tr></table></figure></li>
<li><p>对员工表按照职位进行分组查询各组的平均工资：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select job_title, avg(salary) from employees group by job_title;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1,字段2 排序方式2;</p>
<ol>
<li><p>从表格中选择所有行，按升序排列名为“age”的列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from table order by age asc;</span><br></pre></td></tr></table></figure></li>
<li><p>从表格中选择前10行，按降序排列名为“salary”的列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from table order by salary desc limit 10;</span><br></pre></td></tr></table></figure></li>
<li><p>从表格中选择所有行，首先按名为“category”的列进行升序排列，然后再按名为“price”的列进行降序排列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from table order by category asc, price desc;</span><br></pre></td></tr></table></figure></li>
<li><p>从表格中选择前5行，按名为“date”的列进行升序排列，如果值相同，则按名为“time”的列进行降序排列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from table order by date asc, time desc limit 5;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>SELECT 字段列表 FROM 表名 LIMIT 起始索引,查询记录数;</p>
<p>从11页开始向后查20条数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM table LIMIT 10 OFFSET 20;</span><br></pre></td></tr></table></figure>

<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>MySQL中的约束用于限制表中列的取值范围，可以提高数据完整性和一致性。下面是MySQL中常见的约束类型及其示例：</p>
<ol>
<li>PRIMARY KEY（主键）约束</li>
</ol>
<p>主键约束用于将一个或多个列标识为唯一标识该表中每一行的关键字。主键必须包含唯一的值，并且不能为NULL。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE students (</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  name VARCHAR(50),</span><br><span class="line">  age INT</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>NOT NULL（非空）约束</li>
</ol>
<p>非空约束用于确保列中不包含NULL值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE employees (</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  name VARCHAR(50) NOT NULL,</span><br><span class="line">  salary DECIMAL(10,2) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>UNIQUE（唯一性）约束</li>
</ol>
<p>唯一性约束用于确保列中的所有值都是唯一的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE books (</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  title VARCHAR(50),</span><br><span class="line">  author VARCHAR(50),</span><br><span class="line">  isbn VARCHAR(20) UNIQUE</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>FOREIGN KEY（外键）约束</li>
</ol>
<p>外键约束用于确保在一个表中的列中的值必须与另一个表中的列中的值匹配。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE orders (</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  customer_id INT,</span><br><span class="line">  FOREIGN KEY (customer_id) REFERENCES customers(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE customers (</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  name VARCHAR(50)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>CHECK（检查）约束</li>
</ol>
<p>检查约束用于确保列中的值满足特定的条件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE employees (</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  name VARCHAR(50) NOT NULL,</span><br><span class="line">  salary DECIMAL(10,2) CHECK (salary &gt;= 0)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="表间的对应关系"><a href="#表间的对应关系" class="headerlink" title="表间的对应关系"></a>表间的对应关系</h3><ol>
<li><p>一对多&amp;多对一</p>
<p>案例：部门与员工的关系</p>
<p>关系：一个部门对应多个员工，一个员工对应一个部门</p>
<p>实现：在多的一方建立外键，指向一的一方的主键</p>
<p><img src="/img/mysql/image-20230627200500679.png" alt="image-20230627200500679" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>多对多</p>
<p>案例：学生与课程的关系</p>
<p>关系：一个学生可以选秀多门课程，一门课程也可以供多个学生选择</p>
<p>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p>
<p><img src="/img/mysql/image-20230627200643389.png" alt="image-20230627200643389" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>一对一</p>
<p>案例：用户与用户详情的关系<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中<br>以提升操作效率</p>
<p>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</p>
<p><img src="/img/mysql/image-20230627200918644.png" alt="image-20230627200918644" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/mysql/image-20230627201006782.png" alt="image-20230627201006782" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ol>
<blockquote>
<p>多表联查是指在数据库中同时查询多个表，并根据它们之间的关联条件返回结果集。常见的多表联查操作包括内连接、外连接和自连接。</p>
</blockquote>
<p>内连接（INNER JOIN）：内连接通过匹配两个或多个表之间的共同值来返回满足条件的记录。只有在所有参与连接的表中存在匹配的行才会出现在结果集中。内连接使用关键字”INNER JOIN”来表示。</p>
<p>示例SQL语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM table1</span><br><span class="line">INNER JOIN table2 ON table1.column = table2.column;</span><br></pre></td></tr></table></figure>



<p>外连接（OUTER JOIN）：外连接用于返回不仅匹配的记录，还包括未匹配的记录。外连接分为左外连接（LEFT JOIN）、右外连接（RIGHT JOIN）和全外连接（FULL JOIN）。</p>
<ul>
<li>左外连接（LEFT JOIN）：返回左表中的所有记录和右表中与之匹配的记录。 示例SQL语句：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM table1</span><br><span class="line">LEFT JOIN table2 ON table1.column = table2.column;</span><br></pre></td></tr></table></figure>

<ul>
<li>右外连接（RIGHT JOIN）：返回右表中的所有记录和左表中与之匹配的记录。 示例SQL语句：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM table1</span><br><span class="line">RIGHT JOIN table2 ON table1.column = table2.column;</span><br></pre></td></tr></table></figure>

<ul>
<li>全外连接（FULL JOIN）：返回左表和右表中的所有记录。 示例SQL语句：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM table1</span><br><span class="line">FULL JOIN table2 ON table1.column = table2.column;</span><br></pre></td></tr></table></figure>



<p>自连接（SELF JOIN）：自连接是指将单个表视为两个不同的实例进行连接操作。它通常用于在表中建立父子关系或层次结构。</p>
<p>示例SQL语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM table1 t1</span><br><span class="line">INNER JOIN table1 t2 ON t1.column = t2.column;</span><br></pre></td></tr></table></figure>

<h2 id="Mysql主从复制"><a href="#Mysql主从复制" class="headerlink" title="Mysql主从复制"></a>Mysql主从复制</h2><blockquote>
<p>主从复制是一种常见的数据库架构方法，它允许在多个服务器之间同步数据。在主从复制架构中，有一个主服务器和一个或多个从服务器。主服务器负责处理所有写操作，而从服务器则对主服务器进行复制，并处理所有读操作。</p>
</blockquote>
<p> 具体实现步骤：</p>
<ol>
<li><p>设置一个mysql为主库</p>
<p>windows中：在C盘的ProgramData文件夹中找到mysql——my.ini</p>
<p>在my.ini中的[mysqld]中添加：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">log-bin</span>=mysql-bin	<span class="comment">#启用二进制日志</span></span><br><span class="line"><span class="attr">binlog-format</span>=ROW</span><br><span class="line"><span class="attr">server-id</span>=<span class="number">100</span>	<span class="comment">#设置专属id名</span></span><br></pre></td></tr></table></figure></li>
<li><p>重启服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure></li>
<li><p>登录mysql数据库，执行下面mysql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT REPLICATION SLAVE ON *.* to &#x27;xiaoming&#x27;@&#x27;%&#x27; identified by &#x27;Root@123456&#x27;;</span><br></pre></td></tr></table></figure>

<p>注:上面SQL的作用是创建一个用户xiaoming，密码为Root@123456，并且给xiaoming用户授予</p>
<p>REPLICATION SLAVE权限</p>
</li>
<li><p>执行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure>

<p><img src="/img/mysql/image-20230523153034661.png" alt="image-20230523153034661" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>设置一个或多个从库</p>
<p>linux中：var/log/my.cnf添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server-id=102</span><br></pre></td></tr></table></figure>

<p>进入mysql运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;主机ip&#x27; ,master_user=&#x27;xiaoming&#x27; ,master_password=&#x27;Root@123456&#x27;,master_log_file=&#x27;mysql-bin.000005&#x27; ,master_log_pos=441;</span><br></pre></td></tr></table></figure>

<p>master_log_file对应上面的File    master_log_pos对应上面的Position</p>
</li>
<li><p>开启io线程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">starts slave;</span><br></pre></td></tr></table></figure></li>
<li><p>查看连接情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure>

<p>出现这个即为成功：</p>
<p><img src="/img/mysql/image-20230523153614911.png" alt="image-20230523153614911" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之 “一人设计九人慌”</title>
    <url>/2023/02/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h1><h2 id="根据目的分类"><a href="#根据目的分类" class="headerlink" title="根据目的分类"></a>根据目的分类</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><p>​        用于描述”怎样创建对象“，他的主要特点是将对象的创建与使用分离</p>
<p>​        单例、原型、工厂方法、抽象工厂、建造者等物种创建型模式</p>
<h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><p>​        用于描述如何将类或对象按某种布局组成更大的结构</p>
<p>​        代理、适配器、桥接、装饰、外观、享元、组合等7种构造型模式</p>
<h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><p>​        用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责</p>
<p>​        模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等11种</p>
<h2 id="根据作用分类"><a href="#根据作用分类" class="headerlink" title="根据作用分类"></a>根据作用分类</h2><p><strong>（1）类模式：</strong></p>
<p>​          用于处理类与子类之间的继承关系，这些关系是静态的。</p>
<p>​          GoF中的工厂方法、（类）适配器、模板方法、解释器属于该模式</p>
<p><strong>（2）对象模式：</strong></p>
<p>​           用于处理对象之间的组合或聚合关系，具动态性。除了上述四种模式，都是对象                                                                     </p>
<h1 id="UML类图表示法"><a href="#UML类图表示法" class="headerlink" title="UML类图表示法"></a>UML类图表示法</h1><h2 id="类的表示方式"><a href="#类的表示方式" class="headerlink" title="类的表示方式"></a>类的表示方式</h2><p>​        在UML类图中，类使用包含类名、属性（field）和方法（method）且带有分割线的矩形表示，比如下面表示一个Employee类，它包含name、age和address这三个属性以及word方法</p>
<table>
<thead>
<tr>
<th>Employee</th>
</tr>
</thead>
<tbody><tr>
<td>-name：String   -age：int   -address：String</td>
</tr>
<tr>
<td>+work（）：void</td>
</tr>
</tbody></table>
<p>​        属性/方法名称前加的加号和减号表示这个属性/方法的可见性，UML图中表示可见性的符号有三种：</p>
<p>​        +：表示public</p>
<p>​        -：表示private</p>
<p>​        #：表示protected</p>
<h2 id="类与类之间的关系"><a href="#类与类之间的关系" class="headerlink" title="类与类之间的关系"></a>类与类之间的关系</h2><h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><h4 id="单向关联和双向关联"><a href="#单向关联和双向关联" class="headerlink" title="单向关联和双向关联"></a>单向关联和双向关联</h4><p>例如，一个学生选修一门特定的课程是学生类Student和课程类Course之间的一个关联，而一个教师教授一门课程是师资类Faculty和课程类Course之间的一个关联</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Course[] courses;</span><br><span class="line"></span><br><span class="line">          </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCourse</span><span class="params">(Course s)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Strudent[] students;</span><br><span class="line">    <span class="keyword">private</span> Faculty faculty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(Student s)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFaculty</span><span class="params">(Faculty faculty)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.faculty = faculty;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Faculty</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Course[] courses;</span><br><span class="line">           </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCourse</span><span class="params">(Course s)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><p>聚合是强关联关系，是整体和部分的关系</p>
<p>例如，一个公司有很多员工就是公司类Company和员工类Employee之间的一种聚合关系。被聚合对象和聚合对象有着各自的生命周期，即如果公司倒闭并不影响员工的存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Company</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Employee&gt; employees;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><p>组合表示类之间的整体与部分之间的关系，但它是一种更为强烈的聚合关系</p>
<p>整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不复存在。部分对象不能脱离整体对象而单独存在，就像头和嘴的关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">head</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Mouth mouth=<span class="keyword">new</span> <span class="title class_">Mouth</span>();  </span><br><span class="line">       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mouth</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>在代码中，某个类的方法通过局部变量，方法的参数或者对静态方法的调用来访问另一类中的某些方法来完成一些职责</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Driver</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">driver</span><span class="params">(Car car)</span> &#123;</span><br><span class="line">        car.move();</span><br><span class="line">    &#125;	<span class="comment">//当调用driver方法时，必定会使用形参car类对象</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>在继承的关系中，“子类就是一个父类”。也就是说，子类可以被当做父类看待</p>
<p>​       定义父类的格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 父类名称&#123;</span><br><span class="line"></span><br><span class="line">  …</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>​       定义子类的格式</p>
<p>​           </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 子类名称 extends 父类名称&#123;</span><br><span class="line"></span><br><span class="line">              …</span><br><span class="line"></span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>

<p>​       <strong>注：子类在引用时可以找到父类中的方法和变量，但是父类就只能调用自己的</strong></p>
<p>​       <strong>super****详解：</strong></p>
<p>​           <strong>1. super<strong><strong>是Java</strong></strong>的关键字，他是直接父类对象的引用</strong></p>
<p>​           *<em>2.<strong><strong>就像this</strong></strong>不能出现在static</em><em><strong>修饰的方法中一样，super</strong></em><em>也不能出现在static</em>*<strong>修饰的方法中</strong></p>
<p>​           **3.***<em>如果子类定义里父类同名的属性，也会发生子类属性覆盖父类属性的情形。子类的方法直接访问该属性，都会访问到覆盖属性，无法访问父类被覆盖的属性—<strong><strong>通过super</strong></strong>访问父类被覆盖的属性</em>*</p>
<p>​           *<em>4.<strong><strong>如果没有在子类中写super</strong></strong>，系统将会自动调用</em>*</p>
<p>​           *<em>5.<strong><strong>一般把super</strong></strong>写到方法的最前面</em>*</p>
<p>​       <strong>在继承中，当父类有构造方法时，子类一定会调用父类的构造方法</strong></p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>​    \1)    不能直接new抽象类对象，必须用一个子类来继承抽象父类</p>
<p>​    \2)    子类必须覆盖重写抽象父类的所有的抽象方法</p>
<p>​    重写和覆盖的实现：子类去掉抽象方法的abstract关键字，然后补上方法的大括号</p>
<p>​    \3)    创建子类对象进行使用</p>
<p>​    \4)    在抽象类中，不一定包含抽象对象，但是有抽象方法的类必须是抽象类</p>
<h1 id="软件设计原则"><a href="#软件设计原则" class="headerlink" title="软件设计原则"></a>软件设计原则</h1><p>在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据六条原则来开发程序，从而提高软件开发效率、节约软件开发和维护成本</p>
<h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>​    <strong>对扩展开放，对修改关闭。</strong>在程序需要进行扩展的时候，不能去修改原有的代码。实现一个热插拔的效果，简而言之，是为了是程序的扩展性好，易于维护和升级</p>
<p>想要达到这样的效果，我们需要使用接口和抽象类。</p>
<p>因为抽象类灵活性好，适应性广，只要抽象的合理，可以基本保证软件架构的稳定。而软件中容易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要根据需求重新派生一个实现类来扩展就可以了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractSkin</span> &#123;</span><br><span class="line"><span class="comment">//    输入法样式</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Default</span> <span class="keyword">extends</span> <span class="title class_">AbstractSkin</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是默认皮肤&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">AbstractSkin</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是用户自定义皮肤&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SougouInput</span> &#123;</span><br><span class="line"><span class="comment">//    创建抽象类对象</span></span><br><span class="line">    <span class="keyword">public</span> AbstractSkin skin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSkin</span><span class="params">(AbstractSkin skin)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.skin = skin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">skien</span><span class="params">(AbstractSkin skin)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.skin=skin;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>&#123;</span><br><span class="line">        skin.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">run</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        1.创建搜狗输入法</span></span><br><span class="line">        SougouInput sgi=<span class="keyword">new</span> <span class="title class_">SougouInput</span>();</span><br><span class="line"><span class="comment">//        2.创建皮肤对象</span></span><br><span class="line">        Default def=<span class="keyword">new</span> <span class="title class_">Default</span>();</span><br><span class="line"><span class="comment">//        3.将皮肤传入输入法</span></span><br><span class="line">        sgi.setSkin(def);</span><br><span class="line"><span class="comment">//        4.展示皮肤</span></span><br><span class="line">        sgi.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="里氏原则"><a href="#里氏原则" class="headerlink" title="里氏原则"></a>里氏原则</h2><p>子类可以扩展父类的功能，但不能改变父类原有的功能。即子类继承父类时，除添加新增功能外尽量不要重写父类方法</p>
<p>例子：正方形不是长方形</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">changfangxing</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getLength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">double</span> length)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">zhengfangxing</span> <span class="keyword">extends</span> <span class="title class_">changfangxing</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">double</span> length)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.setLength(length);</span><br><span class="line">        <span class="built_in">super</span>.setWidth(length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">double</span> width)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.setWidth(width);</span><br><span class="line">        <span class="built_in">super</span>.setLength(width);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RectangleDome</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        changfangxing cfx=<span class="keyword">new</span> <span class="title class_">changfangxing</span>();</span><br><span class="line">        cfx.setWidth(<span class="number">10</span>);</span><br><span class="line">        cfx.setLength(<span class="number">20</span>);</span><br><span class="line"><span class="comment">//        通过resize方法进行扩展</span></span><br><span class="line">        resize(cfx);</span><br><span class="line">        print(cfx);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        zhengfangxing zfx=<span class="keyword">new</span> <span class="title class_">zhengfangxing</span>();</span><br><span class="line">        zfx.setLength(<span class="number">10</span>);</span><br><span class="line">        resize(zfx);		<span class="comment">//会报错</span></span><br><span class="line">        print(zfx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">(changfangxing changfangxing)</span>&#123;			<span class="comment">//可以通过多态让正方形方法使用</span></span><br><span class="line">        <span class="keyword">while</span> (changfangxing.getWidth()&lt;=changfangxing.getLength())&#123;</span><br><span class="line">            changfangxing.setWidth(changfangxing.getLength()+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(changfangxing changfangxing)</span>&#123;</span><br><span class="line">        System.out.println(changfangxing.getLength());</span><br><span class="line">        System.out.println(changfangxing.getWidth());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更新后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Quadrilateral</span> &#123;</span><br><span class="line">    <span class="comment">//获取长</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">getlength</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//获取宽</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">getwidth</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">zhengfangxing</span> <span class="keyword">implements</span> <span class="title class_">Quadrilateral</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> side;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSide</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> side;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSide</span><span class="params">(<span class="type">double</span> side)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.side = side;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getlength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getwidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">changfangxing</span> <span class="keyword">implements</span> <span class="title class_">Quadrilateral</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">double</span> length)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getlength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getwidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RectangleDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        changfangxing changfangxing=<span class="keyword">new</span> <span class="title class_">changfangxing</span>();</span><br><span class="line">        changfangxing.setLength(<span class="number">20</span>);</span><br><span class="line">        changfangxing.setWidth(<span class="number">10</span>);</span><br><span class="line">        resize(changfangxing);</span><br><span class="line">        print(changfangxing);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    扩宽方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">(changfangxing changfangxing)</span>&#123;			<span class="comment">//因为没有继承关系所有正方形无法使用完美解决卡死问题</span></span><br><span class="line">        <span class="keyword">while</span> (changfangxing.getwidth()&lt;=changfangxing.getlength())&#123;</span><br><span class="line">            changfangxing.setWidth(changfangxing.getwidth()+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Quadrilateral quadrilateral)</span>&#123;</span><br><span class="line">        System.out.println(quadrilateral.getlength());</span><br><span class="line">        System.out.println(quadrilateral.getwidth());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="倒转依赖原则"><a href="#倒转依赖原则" class="headerlink" title="倒转依赖原则"></a>倒转依赖原则</h2><p>​    要对抽象进行编程不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p>
<p>​    例如：组装一台主机，要求有CPU、内存条、硬盘。而CPU有英特尔、AMD等，硬盘可以有希捷、西数，内存条可以选择金士顿和海盗船</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XijieDisk</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(String data)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用希捷硬盘存储数据为&quot;</span>+data);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用希捷硬盘取数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterCPU</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用因特尔处理器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KingSton</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用金士顿内存条&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> XijieDisk xijie;</span><br><span class="line">    <span class="keyword">private</span> InterCPU inter;</span><br><span class="line">    <span class="keyword">private</span> KingSton kingSton;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> XijieDisk <span class="title function_">getXijie</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> xijie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setXijie</span><span class="params">(XijieDisk xijie)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.xijie = xijie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> InterCPU <span class="title function_">getInter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> inter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInter</span><span class="params">(InterCPU inter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.inter = inter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> KingSton <span class="title function_">getKingSton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> kingSton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKingSton</span><span class="params">(KingSton kingSton)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.kingSton = kingSton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;运行计算机&quot;</span>);</span><br><span class="line">        String data=xijie.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;从硬盘上获取的数据是&quot;</span>+data);</span><br><span class="line">        inter.run();</span><br><span class="line">        kingSton.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">run</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        XijieDisk xijie=<span class="keyword">new</span> <span class="title class_">XijieDisk</span>();</span><br><span class="line">        InterCPU inter=<span class="keyword">new</span> <span class="title class_">InterCPU</span>();</span><br><span class="line">        KingSton kingSton=<span class="keyword">new</span> <span class="title class_">KingSton</span>();</span><br><span class="line"></span><br><span class="line">        Computer c=<span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        c.setInter(inter);</span><br><span class="line">        c.setXijie(xijie);</span><br><span class="line">        c.setKingSton(kingSton);</span><br><span class="line">        c.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven操作指南</title>
    <url>/2023/02/28/Maven/</url>
    <content><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h2><h3 id="Maven是什么"><a href="#Maven是什么" class="headerlink" title="Maven是什么"></a>Maven是什么</h3><ul>
<li>Maven的本质是一个项目管理工具</li>
</ul>
<h3 id="Maven的作用"><a href="#Maven的作用" class="headerlink" title="Maven的作用"></a>Maven的作用</h3><ul>
<li><p>项目构建：提供标准的、跨平台的自动化项目构建方式</p>
</li>
<li><p>依赖管理：方便快捷的管理项目以来的资源（jar包），避免资源间 的版本冲突问题</p>
</li>
<li><p>统一开发结构：提供标准的、统一的项目结构</p>
<p><img src="/img/Maven/image-20230208143603620.png" alt="image-20230208143603620" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ul>
<h3 id="MVC三层架构"><a href="#MVC三层架构" class="headerlink" title="MVC三层架构"></a>MVC三层架构</h3><ul>
<li><p>bean：存放数据</p>
<p>1、存放来自于数据库的数据。</p>
<p>2、存放来自客户端的数据（表单提交），存数据的中介作用</p>
</li>
</ul>
<ul>
<li>dao：data access object:数据访问对象，主要做的事情就是对数据库单表进行增删改操作，查的有可能是多表管理查询</li>
</ul>
<ul>
<li>service: 对应界面上的操作，增删改查，至于这个业务涉及到几个dao，就调用几个dao</li>
</ul>
<ul>
<li><p>servlet：</p>
<p>1、接受用户请求，进行处理（doget/dopost)调用service,得到数据</p>
<p>2、做出响应（HTML）:通过PrintWriter out = response.getWriter();通过out输出HTML代码</p>
</li>
</ul>
<p>业务流程：</p>
<p>一个业务都是从后到前，首先第一步：设计数据库<br>            dao ——– service(调用多个dao) ——- servlet（接受用户请求，做出响应）——–HTML（JSP技术）</p>
<h2 id="Maven本地仓库配置"><a href="#Maven本地仓库配置" class="headerlink" title="Maven本地仓库配置"></a>Maven本地仓库配置</h2><h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h3><p>安装目录–&gt;conf–&gt;settings.xml文件</p>
<p>文件第53行复制出来修改为本地新建的仓库地址</p>
<h3 id="修改镜像地址"><a href="#修改镜像地址" class="headerlink" title="修改镜像地址"></a>修改镜像地址</h3><p>安装目录–&gt;conf–&gt;settings.xml文件</p>
<p>文件第153~158行复制出来修改为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 此镜像的唯一标识符，用来区分不同的mirror元素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--对哪种仓库进行镜像，简单说就是替代哪个仓库--&gt;</span>				</span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorof</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorof</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--镜像名称--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--镜像URL --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Maven项目构建"><a href="#Maven项目构建" class="headerlink" title="Maven项目构建"></a>Maven项目构建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn compile			#编译</span><br><span class="line">mvn clean			#清理</span><br><span class="line">mvn test			#测试</span><br><span class="line">mvn package			#打包</span><br><span class="line">mvn install			#安装到本地仓库</span><br></pre></td></tr></table></figure>

<h2 id="分模块开发与设计"><a href="#分模块开发与设计" class="headerlink" title="分模块开发与设计"></a>分模块开发与设计</h2><p>一个项目在开发过程中，为了加快开发进程每个人都会负责其中一个小模块。最终将他们整合在一起构成一个完整的项目</p>
<ol>
<li><p>依赖于谁就将那个模块pom.xml的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Ssm_pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>将子模块的语句当做jar包进入</p>
</li>
<li><p>子模块进行install才能使用</p>
</li>
</ol>
<h2 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h2><h3 id="依赖传递-1"><a href="#依赖传递-1" class="headerlink" title="依赖传递"></a>依赖传递</h3><p>依赖具有传递性</p>
<ul>
<li>直接依赖：在pom文件中直接写的就是</li>
<li>间接依赖：直接依赖中所使用的依赖就是间接依赖</li>
</ul>
<h3 id="依赖传递冲突的问题"><a href="#依赖传递冲突的问题" class="headerlink" title="依赖传递冲突的问题"></a>依赖传递冲突的问题</h3><ul>
<li>路径优先：当依赖中出现相同的资源时，层级越靠后优先级越低，层级越靠前优先级越高</li>
<li>声明优先：当资源在相同层级被依赖时，越靠后的优先级越高</li>
<li>特殊优先：当同等级配置了不同版本，后配置的优先级最高</li>
</ul>
<h3 id="可选依赖和排除依赖"><a href="#可选依赖和排除依赖" class="headerlink" title="可选依赖和排除依赖"></a>可选依赖和排除依赖</h3><h4 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependenaies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可选依赖是隐藏当前工程所依赖的资源，隐藏后对应的资源将不具备依赖--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">optional</span>&gt;</span>false<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependenaies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Ssm_pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--排除依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>注：在排除依赖时，不区分版本是排除所有的对应依赖</em></p>
<blockquote>
<p>可选依赖和排除依赖的区别：</p>
<ul>
<li>可选依赖：对外隐藏当前所依赖的资源</li>
<li>排除依赖：外部资源给了，但是我不要主动将其屏蔽</li>
</ul>
</blockquote>
<h2 id="聚合与继承"><a href="#聚合与继承" class="headerlink" title="聚合与继承"></a>聚合与继承</h2><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>分模块开发时，当一个模块进行维护，其他依赖于这个模块的模块不知道就会产生一系列的错误。以pojo、service、dao为例</p>
<p>service和dao依赖于pojo，当pojo更新时service和dao层不能及时构建就会产生引不到pojo中的对象。</p>
<blockquote>
<p><strong>而聚合的作用就是使用一个大的，有且只有一个pom文件的类来管理所有的模块。从而保证所包含的模块进行同步构建</strong></p>
</blockquote>
<ol>
<li><p>创建聚合工程</p>
</li>
<li><p>在pom文件中</p>
<p>打包方式改为packaging</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em><strong>注意：每个maven工程都有自己对应的打包方式，其中默认是jar，web工程是war</strong></em></p>
<p>将需要管理的模块放置在modules中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">module</span>&gt;</span>../3.15SSM<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">module</span>&gt;</span>../Ssm_pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">module</span>&gt;</span>../SsmWithWeb<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>对于很多模块的很多重复的包引入看起来相当繁琐，可以通过继承从聚合工程中直接拿取</p>
<ol>
<li><p>在父工程的pom文件中配置依赖关系（子工程沿用父工程中的依赖）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置子工程中可选的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在子工程中配置当前工程所继承的父工程</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义该工程的父工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--填写父工程的pom文件地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../maven_01_parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用父工程中可选依赖的坐标（不要写版本号，版本号自动使用父工程版本）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>当我们想要更换版本时，如果一个一个更改不仅费事还有可能出现漏改的情况。对于这种情况我们可以设置一个类似于变量的东西，把属性值存放起来到时候调用这个“变量”从而达到一劳永逸的效果</p>
<ol>
<li>定义属性</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--自定义属性值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.versions</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">spring.versions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用属性</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.versions&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置文件加载属性"><a href="#配置文件加载属性" class="headerlink" title="配置文件加载属性"></a>配置文件加载属性</h2><p>所谓给配置文件加载属性就是将pom中设置的属性能灵活的赋给</p>
<ol>
<li><p>定义属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--自定义属性值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/ssm_bd<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在配置文件中写</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.url</span>=<span class="string">$&#123;jdbc.url&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>告诉资源文件可以使用加载的属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--允许使用的资源包路径--&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>../maven_02_ssm/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否使用--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="多环境开发"><a href="#多环境开发" class="headerlink" title="多环境开发"></a>多环境开发</h2><p>在将来的开发中，sql数据库地址分为三种，分别是生产环境、开发环境和测试环境每一种环境都是不同的路径</p>
<p>Maven提供了多种环境的设定，帮助开发者使用过程中随意地切换环境</p>
<p>定义属性变成了：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--开发环境--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_dep<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.1.1.1:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 设置是否是默认值--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--生产环境--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.2.2.2:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--测试环境--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.3.3.3:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果我们不想来回的写默认值，可以这样做：</p>
<p><img src="/img/Maven/image-20230320162306232.png" alt="image-20230320162306232" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>点击之后运行mvn install -P 属性id名（env_test）</p>
<h2 id="私服（Nexus）"><a href="#私服（Nexus）" class="headerlink" title="私服（Nexus）"></a>私服（Nexus）</h2><h3 id="私服与本地仓库连接"><a href="#私服与本地仓库连接" class="headerlink" title="私服与本地仓库连接"></a>私服与本地仓库连接</h3><ol>
<li><p>创建私服仓库</p>
<p><img src="/img/Maven/image-20230320174440263.png" alt="image-20230320174440263" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/Maven/image-20230320175404015.png" alt="image-20230320175404015" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>输入仓库名和地址</p>
</li>
<li><p>在本地maven仓库中配置</p>
<p>配置私服</p>
</li>
</ol>
<p><img src="/img/Maven/image-20230320174345033.png" alt="image-20230320174345033" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>​    设置私服仓库地址</p>
<p><img src="/img/Maven/image-20230320175847641.png" alt="image-20230320175847641" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="上传与下载"><a href="#上传与下载" class="headerlink" title="上传与下载"></a>上传与下载</h3><p>在父工程中配置当前工程保存在私服中的具体位置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>itheima-release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://locathost:8081/repository/itheima-release<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>itheima-snapshot<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://locathost:8081/repository/itheima-snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>发布命令：<strong>mvn deploy</strong></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Java EE笔记</title>
    <url>/2023/02/28/Jave%20EE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Jave-EE"><a href="#Jave-EE" class="headerlink" title="Jave EE"></a>Jave EE</h1><h2 id="Tomcat配置idea"><a href="#Tomcat配置idea" class="headerlink" title="Tomcat配置idea"></a>Tomcat配置idea</h2><blockquote>
<p><a href="https://baijiahao.baidu.com/s?id=1725595546321519849&wfr=spider&for=pc">如何在 IDEA 中创建并部署 JavaWeb 程序 (baidu.com)</a></p>
</blockquote>
<h2 id="服务器组件Servlet"><a href="#服务器组件Servlet" class="headerlink" title="服务器组件Servlet"></a>服务器组件Servlet</h2><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol>
<li><p> 创建一个java ee项目</p>
</li>
<li><p> 在src中创建一个类并且实现Servlet接口</p>
</li>
<li><p> 实现接口中的抽象方法</p>
</li>
<li><p> 配置Servlet</p>
</li>
</ol>
<p>在web.xml文件中的web-app标签中写入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--自定义，一般为类名--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--一定是package + .类名，项目中定位该servlet的完整路径。--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--给Servlet提供（映射)一个可供客户端访问的URI,浏览器访问该servlet要访问的url定义--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--和servlet中的name必须相同--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- servlet的映射路径 客户端访问url --&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行原理：</p>
<blockquote>
<p>1.当服务器接收到客户端浏览器的请求后，会解析url路径，获取访问的Servlet的路径</p>
<p>2.查找web.xml中是否有对应的&lt;url-pattern&gt;标签内容</p>
<p>3.如果有则会找到对应的&lt;servlet-class&gt;全类名</p>
<p>4.Tomcat会将字节码文件加载进内存，创建类名的实例化对象</p>
<p>5.调用其方法</p>
</blockquote>
<h3 id="设置默认打开的页面"><a href="#设置默认打开的页面" class="headerlink" title="设置默认打开的页面"></a>设置默认打开的页面</h3><p>在web.xml文件中</p>
<p>&lt;welcome-file-list&gt;<br>&lt;welcome-file&gt;index.html&lt;/welcome-file&gt;<br>&lt;/welcome-file-list&gt;</p>
<h3 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h3><p>1.被创建（加载资源）</p>
<p>public void init() {<br>            /*初始化方法，在Servlet创建时执行只会执行一次*/</p>
<p>}</p>
<p>设置什么时候被创建</p>
<p>指定Servlet的创建时机，在web.xml文件的Servlet下创建<br>            1.第一次被访问时创建：&lt;load-on-startup&gt;的值为负数<br>            2.在服务器启动时创建：&lt;load-on-startup&gt;的值为0或者正整数</p>
<p>2.提供服务</p>
<p>public void service() {</p>
<p>System.<em>out</em>.println(“hello service”);<br>            /*提供服务的方法，每一次Servlet被访问时会执行，可执行多次*/<br>        }</p>
<p>3.被销毁</p>
<p>public void destroy() {<br>            /*销毁方法，在Servlet正常关闭时执行*/</p>
<p>}</p>
<p>在Servlet被销毁之前执行，一般用于释放资源</p>
<h3 id="Servlet注解配置"><a href="#Servlet注解配置" class="headerlink" title="Servlet注解配置"></a>Servlet注解配置</h3><p>@WebServlet(urlPatterns = “/demo2”)</p>
<h3 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h3><blockquote>
<p>Servlet—接口</p>
<p>|</p>
<p>GenericServlet—抽象类</p>
<p>| 里面只有一个service方法（将其他的方法做了默认空实现）</p>
<p>HttpServlet—抽象类</p>
<p>| 定义类继承HttpServlet</p>
<p>重写doGet/doPost方法，用来获取方法的</p>
</blockquote>
<h3 id="request和response原理"><a href="#request和response原理" class="headerlink" title="request和response原理"></a>request和response原理</h3><ol>
<li><p> tomcat服务器会根据请求url中的资源路径，创建对应的ServletDemo1的对象</p>
</li>
<li><p> tomcat服务器会创建request和response两个对象，request</p>
</li>
<li><p> tomcat将request和response两个对象传递给service方法，并且调用service</p>
</li>
<li><p> 我们就可以通过request对象获取请求消息数据，通过response设置响应消息数据</p>
</li>
<li><p> 服务器再给浏览器作出响应之前会从response对象中拿取我们设置的响应消息数据</p>
</li>
</ol>
<p>request功能</p>
<ol>
<li> 获取请求行数据</li>
</ol>
<blockquote>
<p>GET/JavaWeb_war_exploded/s3?name=zs&amp;age=19&amp;xuehao=218&amp;class=A2&amp;zhuany=java HTTP/1.1</p>
<p>方法</p>
<p>1. 获取请求方式：GET</p>
<p>request.getMethod()</p>
<p>2. 获取虚拟目录：/JavaWeb_war_exploded</p>
<p>request.getContextPath()</p>
<p>3. 获取Servle路径：/s3</p>
<p>request.getServletPath()</p>
<p>4. 获取get方式请求参数：name=zs&amp;age=19&amp;xuehao=218</p>
<p>request.getQueryString()</p>
<p>5. 获取请求url：</p>
<p>request.getRequest URI() : /JavaWeb_war_exploded/s3</p>
<p>request.getRequestURL(): <a href="http://localhost/JavaWeb_war_exploded/s3">http://localhost/JavaWeb_war_exploded/s3</a></p>
<p>6. 获取协议及版本：HTTP/1.1</p>
<p>request.rotocol()</p>
<p>7. 获取客户机的IP地址：</p>
<p>request.getRemoteAddr()</p>
<p>8. 获取指定键的值</p>
</blockquote>
<p>String age=req.getParameter(“age”);</p>
<ol>
<li> 获取请求头数据</li>
</ol>
<blockquote>
<p>1. .getHeader() 通过请求头的名称获取请求头的值</p>
<p>2. Enumeration&lt;String&gt; getHeaderNames() 获取所有的请求头名称</p>
</blockquote>
<ol>
<li> 获取请求体数据</li>
</ol>
<blockquote>
<p>请求体：只有post请求方式，才有请求体，在请求体中封装了post请求的请求参数</p>
<p>1. 获取流对象</p>
<p>.getReader():获取字符输入流，只能操作字符数据</p>
<p>.getInputStream():获取字节输入流，可以操作所有类型数据</p>
</blockquote>
<ol>
<li> 通用方法</li>
</ol>
<blockquote>
<p>1. 获取请求参数通用方法</p>
<p><img src="/img/JavaEE%E7%AC%94%E8%AE%B0/001.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>2.解决中文乱码问题</p>
<p>resp.setCharacterEncoding(“utf-8”);</p>
<p>resp.setHeader(“content-type”,”text/html;charset=utf-8”);</p>
<p>3. 请求转发：用来跳转页面</p>
<p>req.getRequestDispatcher(“/s2”).forward(req,resp);</p>
<p>注：跳转到名为/s2的页面</p>
<p>特点：浏览器地址栏路径不变</p>
<p>只能转到当前服务器内部资源</p>
<p>转发是一次请求</p>
</blockquote>
<ol>
<li> 共享数据</li>
</ol>
<blockquote>
<p>在转发之前存储数据：request.setAttribute(“msg”,”helloworld”)</p>
<p>在被转发的页面中写上：request.getAttribute(“msg”)即可得到helloworld</p>
</blockquote>
<p>response功能</p>
<p>1. 设置响应行</p>
<p>1. 格式：HTTP/1.1 200 ok</p>
<p>2. 设置状态码：setStatus(src)</p>
<p>2. 设置响应头</p>
<p>setHeader(name,value)</p>
<p>3. 设置响应体</p>
<p>1.获取输出流</p>
<p>字节输出流：PrintWriter getWriter()</p>
<p>字节输出流：ServletOutputStream getOutputStream()</p>
<p>4. 重定向</p>
<p>resp.sendRedirect(“<a href="http://www.baidu.com&quot;/">http://www.baidu.com&quot;</a> );</p>
<h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><p>会话：一次会话中包含多次请求和响应</p>
<p>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到一方断开</p>
<p>功能：在一次会话的范围内的多次请求间共享数据</p>
<p>方法：</p>
<h4 id="1-客户端会话技术：Cookie"><a href="#1-客户端会话技术：Cookie" class="headerlink" title="1. 客户端会话技术：Cookie"></a>1. 客户端会话技术：Cookie</h4><p>概念：客户端会话技术，将数据保存到客户端</p>
<p>快速入门：</p>
<p>1. 创建Cookie对象，绑定数据</p>
<p>Cookie c=new Cookie(“msg”,”张三”);</p>
<p>2. 发送Cookie对象</p>
<p>resp.addCookie(c);</p>
<p>3. 获取Cookie拿到数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie [] co= req.getCookies();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(co!=<span class="literal">null</span>)&#123;  </span><br><span class="line">	<span class="keyword">for</span> (Cookie cookie : co) &#123;  </span><br><span class="line">		String name=cookie.getName();  </span><br><span class="line">		String value= cookie.getValue();  </span><br><span class="line">		System.*out*.println(name+<span class="string">&quot;:&quot;</span>+value);  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Cookie的细节：</p>
<p><img src="/img/JavaEE%E7%AC%94%E8%AE%B0/002.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>1. 发送多个cookie</p>
<p>只需要创建多个cookie对象，使用response调用多次addCookie方法发送cookie</p>
<p>2. Cookie存活时间</p>
<blockquote>
<p>c.setMaxAge(30);<br>// 正数：永久化存储指定的秒数<br>// 负数：默认值<br>// 零：不存储cookie</p>
</blockquote>
<p>3. cookie共享问题</p>
<p><em><strong>同一个服务器下共享：</strong></em></p>
<p>假设在一个tomcat服务器中，部署了多个项目，那么这些项目中cookie默认情况下不共享也可以通过setPath(String path)设置获取范围path设置为/</p>
<p><em><strong>在不同的tomcat服务器中共享：</strong></em></p>
<p>setDomain(String path)如果设置了一级域名相同，那么多个服务器之间cookie可以共享setDomain(“.baidu.com”)那么tieba.baidu.com和news.baidu.com中cookie可以共享</p>
<p>4. cookie作用</p>
<p>1. 存储一些自定义设置如设置了搜索历史关闭第二次打开设置依旧生效</p>
<p>2. 实现账号密码保存</p>
<h4 id="服务器端会话技术：Session"><a href="#服务器端会话技术：Session" class="headerlink" title="服务器端会话技术：Session"></a>服务器端会话技术：Session</h4><p>概念：在一次会话中的多次请求间共享数据，将数据保存在服务器端</p>
<p>快速入门：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpSession对象： HttpSession session=req.getSession();</span><br><span class="line"></span><br><span class="line">Object msg=session.getAttribute(String name) 获取session数据</span><br><span class="line"></span><br><span class="line">session.setAttribute(String name,Object value) 设置</span><br><span class="line"></span><br><span class="line">session.removeAttribute(String name) 删除</span><br></pre></td></tr></table></figure>

<p>细节：</p>
<p>1. 当客户端关闭后，服务器不关闭，两次获取的session是否为同一个？</p>
<p>默认情况下，不是</p>
<blockquote>
<p>如果需要相同，则可以创建Cookie，键为session名字，设置最大存活时间，让cookie持久化保存</p>
<p>Cookie c=new Cookie(“session”,session.getId())</p>
<p>c.setMaxAge(60*60)</p>
<p>resp.addCookie(c)</p>
</blockquote>
<p>2. 客户端不关闭，服务器关闭后两次获取的session是否为同一个？</p>
<p>不是同一个，但是要确保数据不丢失</p>
<p>1. session的钝化</p>
<p>在服务器正常关闭之后，将session的对象序列化到硬盘上</p>
<p>2. session的活化</p>
<p>在服务器启动后，将session文件转化为内存的session对象即可</p>
<p>3. session什么时候被销毁</p>
<p>1. 服务器关闭</p>
<p>2. 通过方法invalidate()销毁</p>
<p>3. session默认30分钟自动销毁</p>
<p>4. session的特点</p>
<p>1. session用于存储一次对话的多次请求的数据，存在服务器端</p>
<p>2. session可以存储任意类型，任意大小的数据</p>
<p>3. Cookie和session的区别</p>
<p>session存储在服务器端，Cookie在客户端</p>
<p>session没有数据大小限制Cookie有</p>
<p>session数据安全，Cookie相对于不安全</p>
<h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>JavaScript object notation js对象表示法</p>
<p>json多用于存储和交换文本信息的语法</p>
</blockquote>
<h3 id="json语法"><a href="#json语法" class="headerlink" title="json语法"></a>json语法</h3><blockquote>
<p>1. 基本规则</p>
</blockquote>
<ul>
<li><p>  数据是键值对</p>
</li>
<li><p>  数据由逗号分割</p>
</li>
<li><p>  花括号保存对象</p>
</li>
<li><p>  方括号保存数组</p>
</li>
</ul>
<blockquote>
<p>2. 数据类型</p>
</blockquote>
<ul>
<li><p>  数字（整数或浮点数）</p>
</li>
<li><p>  字符串（用双引号引起来）</p>
</li>
<li><p>  boolean值</p>
</li>
<li><p>  数组（在方括号中）</p>
</li>
<li><p>  对象（在花括号中）{“address”:{“province”:”山西”…}}</p>
</li>
<li><p>  null</p>
</li>
</ul>
<blockquote>
<p>3. 获取数据</p>
</blockquote>
<ul>
<li>  json对象.键名</li>
</ul>
<p>4. json数据和java对象相互转换</p>
<p>java转json</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java转json对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">javaToJson</span><span class="params">(Bread bread)</span>&#123;  </span><br><span class="line">bread.setId(<span class="string">&quot;HUAWEI&quot;</span>);  </span><br><span class="line">bread.setCompany(<span class="number">50</span>);  </span><br><span class="line">bread.setGuanggao(<span class="string">&quot;用技术改变世界&quot;</span>);  </span><br><span class="line">Gson gs=<span class="keyword">new</span> <span class="title class_">Gson</span>();  </span><br><span class="line">String str=gs.toJson(bread);  </span><br><span class="line"><span class="keyword">return</span> str;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串转javabean  </span></span><br><span class="line">Gson gson=<span class="keyword">new</span> <span class="title class_">Gson</span>();  </span><br><span class="line">String json2=<span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;username\&quot;:\&quot;张三\&quot;&#125;&quot;</span>;  </span><br><span class="line">Bread bread1=gson.fromJson(json2, Bread.class);  </span><br><span class="line">System.*out*.println(<span class="string">&quot;id号：&quot;</span>+bread1.getId());  </span><br><span class="line">System.*out*.println(<span class="string">&quot;姓名：&quot;</span>+bread1.getName());  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用javabean输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">rowJson</span><span class="params">(Connection con)</span> <span class="keyword">throws</span> SQLException&#123;  </span><br><span class="line">PreparedStatement pr=<span class="literal">null</span>;  </span><br><span class="line">String sql=<span class="string">&quot;select id,name,company,guanggao,qiyong from bread&quot;</span>;  </span><br><span class="line">pr=con.prepareStatement(sql);  </span><br><span class="line">ResultSet rs=pr.executeQuery();  </span><br><span class="line">Bread bread=<span class="keyword">new</span> <span class="title class_">Bread</span>();  </span><br><span class="line"></span><br><span class="line">String rows=<span class="string">&quot;&quot;</span>;  </span><br><span class="line">rs.beforeFirst();  </span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line"><span class="keyword">while</span> (rs.next())&#123;  </span><br><span class="line">	i=i+<span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">rs.beforeFirst();  </span><br><span class="line"><span class="type">int</span> j=<span class="number">1</span>;  </span><br><span class="line"><span class="keyword">while</span> (rs.next())&#123;  </span><br><span class="line">	bread.setId(rs.getString(<span class="string">&quot;id&quot;</span>));  </span><br><span class="line">	bread.setName(rs.getString(<span class="string">&quot;name&quot;</span>));  </span><br><span class="line">	bread.setCompany(rs.getInt(<span class="string">&quot;Company&quot;</span>));  </span><br><span class="line">	bread.setGuanggao(rs.getString(<span class="string">&quot;guanggao&quot;</span>));  </span><br><span class="line"><span class="keyword">if</span> (j!=i)&#123;  </span><br><span class="line">	rows=rows+bread.toString()+<span class="string">&quot;,&quot;</span>;  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">	rows=rows+bread.toString();  </span><br><span class="line">&#125;  </span><br><span class="line">	j=j+<span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;[&quot;</span>+rows+<span class="string">&quot;]&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="什么是jsp"><a href="#什么是jsp" class="headerlink" title="什么是jsp"></a>什么是jsp</h3><blockquote>
<p>jsp全名java server pages，中文名叫java服务器页面</p>
<p>jsp技术是在传统的网页html文件中插入java程序和jsp标记从而形成jsp文件</p>
</blockquote>
<h3 id="jsp运行机制"><a href="#jsp运行机制" class="headerlink" title="jsp运行机制"></a>jsp运行机制</h3><blockquote>
<p>jsp也是一种Servlet，其java类型为HttpJSPBase</p>
<p>jsp不能独立运行，需要jsp引擎</p>
</blockquote>
<h3 id="jsp语法"><a href="#jsp语法" class="headerlink" title="jsp语法"></a>jsp语法</h3><blockquote>
<p>jsp页面由数据模板和元素组成：</p>
<p>数据模板，jsp容器不进行处理，如jsp中的HTML内容这些内容会直接发送到客户端</p>
<p>jsp元素：jsp容器必须处理的部分。jsp元素有三种类型：</p>
</blockquote>
<h4 id="1-指令元素"><a href="#1-指令元素" class="headerlink" title="1. 指令元素"></a>1. 指令元素</h4><blockquote>
<p><em>page指令：定义与页面相关的一些属性</em></p>
</blockquote>
<p>&lt;%@ <strong>page</strong> contentType=”text/html;charset=UTF-8” language=”java” %&gt;</p>
<blockquote>
<p>常见属性：</p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>language=”java”</td>
<td>指定脚本元素中使用的脚本语言，目前只支持java</td>
</tr>
<tr>
<td>contentType=”ctinfo”</td>
<td>指定用于响应JSP页面的MIME类型和编码</td>
</tr>
<tr>
<td>pageEncoding=”en”</td>
<td>指定当前JSP页面使用的字符编码</td>
</tr>
<tr>
<td>import=”importList”</td>
<td>用来引入使用到的Java类</td>
</tr>
<tr>
<td>errorPage=”url”</td>
<td>用于当JSP页面发送异常时，转向的错误页面</td>
</tr>
<tr>
<td>isErrorPage=”true”</td>
<td>指定页面是否是错误处理页面，默认值为false</td>
</tr>
<tr>
<td>session=”true/false”</td>
<td>用于指定该JSP是否参与到会话中，默认值为true</td>
</tr>
<tr>
<td>buffer=”none/size”</td>
<td>用于指定out对象使用的缓冲区大小，8kb为默认值</td>
</tr>
<tr>
<td>isELIgnored=”true”</td>
<td>指定JSP页面是否忽略EL表达式，默认值为false</td>
</tr>
</tbody></table>
<blockquote>
<p><em>include指令：页面包含的。导入页面的资源文件</em></p>
</blockquote>
<p>&lt;%@include file=”top.jsp”%&gt;</p>
<blockquote>
<p><em>taglib指令：在JSP页面中使用第三方的标签库时，需要使用taglib指令来“导包</em></p>
<p>&lt;%@ taglib prefix=”c” uri=”<a href="http://java.sun.com/jsp/jstl/core&quot;">http://java.sun.com/jsp/jstl/core&quot;</a> %&gt;</p>
</blockquote>
<h4 id="2-脚本元素：jsp定义java代码的方式"><a href="#2-脚本元素：jsp定义java代码的方式" class="headerlink" title="2. 脚本元素：jsp定义java代码的方式"></a>2. 脚本元素：jsp定义java代码的方式</h4><blockquote>
<p>&lt;% %&gt;定义的java代码，在service中可以定义什么，这个脚本中就能写什么</p>
<p>&lt;%! %&gt;定义的java代码，放在全局变量位置</p>
<p>&lt;%= %&gt;会输出到页面上的语句</p>
</blockquote>
<h4 id="3-jsp的内置对象"><a href="#3-jsp的内置对象" class="headerlink" title="3. jsp的内置对象"></a>3. jsp的内置对象</h4><blockquote>
<p>在jsp页面中不需要获取或创建就可以直接使用的对象</p>
</blockquote>
<ul>
<li>  request</li>
</ul>
<blockquote>
<p>request对象是javax.servlet.http.HttpServletRequest类的实例。每当客户端请求一个JSP页面时，JSP引擎就会制造一个新的request对象来代表这个请求。</p>
<p>request对象提供了一系列方法来获取HTTP头信息，cookies，HTTP方法等等</p>
</blockquote>
<ul>
<li>  response</li>
</ul>
<blockquote>
<p>response对象是javax.servlet.http.HttpServletResponse类的实例。当服务器创建request对象时会同时创建用于响应这个客户端的response对象。</p>
<p>response对象也定义了处理HTTP头模块的接口。通过这个对象，开发者们可以添加新的cookies，时间戳，HTTP状态码等等。</p>
</blockquote>
<ul>
<li>  session</li>
</ul>
<blockquote>
<p>session对象是javax.servlet.http.HttpSession类的实例。</p>
<p>session对象是由服务器自动创建的与用户请求相关的对象。服务器为每个用户都生成一个session对象，用于保存该用户的信息，跟踪用户的操作状态。session对象内部使用Map类来保存数据，因此保存数据的格式为Key/value。session对象的value可以使复杂的对象类型，而不仅仅局限于字符串类型。</p>
</blockquote>
<ul>
<li>  out：字符输出流对象，可以利用数据输出到页面上和response.getWrite类似</li>
</ul>
<blockquote>
<p>在tomcat作出响应之前，总是会先执行response.getWrite再去找out缓冲区</p>
</blockquote>
<ul>
<li>  application</li>
</ul>
<blockquote>
<p>服务器启动后就产生了这个application对象，当客户在所访问的网站的各个页面之间浏览时，这个application对象都是同一个，直到服务器关闭。但是与session不同的是，所有客户的application对象都是同一个，即所有客户共享这个内置的application对象。</p>
<p>2．application对象常用方法:</p>
<p>(1)public void setAttribute(String key,Object obj): 将参数Object指定的对象obj添加到application对象中，并为添加的对象指定一个索引关键字。</p>
<p>(2)public Object getAttribute(String key): 获取application对象中含有关键字的对象。</p>
</blockquote>
<ul>
<li><p>  page 对应this关键字。JSP网页本身</p>
</li>
<li><p>  config</p>
</li>
</ul>
<blockquote>
<p>javax.servlet. ServletConfig 的实例，该实例代表该JSP 的配置信息。常用的方法有getInitPararneter(String paramNarne) 及getInitPararneternarnes() 等方法</p>
</blockquote>
<ul>
<li>  exception</li>
</ul>
<blockquote>
<p>该实例代表其他页面中的异常和错误。只有当页面是错误处理页面，即编译指令page 的isErrorPage 属性为true 时，该对象才可以使用。常用的方法有getMessage()和printStackTrace()。</p>
</blockquote>
<ul>
<li>  pageContext</li>
</ul>
<blockquote>
<p>javax.servlet.jsp.PageContext 的实例，对象直译时可以称作“页面上下文”对象，代表的是当前页面运行的一些属性，通过此对象可以拿到其他8大对象，使用该对象可以访问页面中的共享数据。常用的方法有getServletContextO和getServletConfigO等。</p>
<p>//使用pageContext 设置属性，该属性默认在page 范围内</p>
<p>pageContext. setAttribute (“page” , “hello”) ;</p>
<p>//使用request 设置属性，该属性默认在request 范围内</p>
<p>request. setAttribute (“request” , “hello”);</p>
<p>//使用pageContext将属性设置在request 范围中</p>
<p>pageContext.setAttribute(“request2”,”hello”,pageContext.REQUEST_SCOPE);</p>
<p>// 使用session将属性设置在session 范围中</p>
<p>session.setAttribute(“session” , “hello”);</p>
<p>//使用pageContext将属性设置在session范围中</p>
<p>pageContext.setAttribute(“session2”,”hello”,pageContext.SESSION_SCOPE);</p>
<p>//使用application将属性设置在application范围中</p>
<p>application. setAttribute (“app” , “hello”) ;</p>
<p>//使用pageContext 将属性设置在application 范围中</p>
<p>pageContext.setAttribute(“app2”,”hello”,pageContext.APPL CATION_SCOPE) ;</p>
</blockquote>
<h4 id="4-四个作用域"><a href="#4-四个作用域" class="headerlink" title="4. 四个作用域"></a>4. 四个作用域</h4><blockquote>
<p>page，request，session，application四个对象对应作用域</p>
<p>*page:*表示将javabean对象存储在pageContext对象中。可以被当前jsp页面的当前请求的响应过程中调用的各个组件访问</p>
<p><em>request：</em>表示将javabean对象存储在request对象中，可以被属于同一个请求的所有Servlet和jsp页面访问，并且保证线程安全</p>
<p>*session:*表示将javabean对象存储在session对象中，可以被属于同一个对话中的所有Servlet和JSP页面访问</p>
<p><em>application：</em>表示将javabean对象存储在ServletContext对象中，可以被同一个web应用程序中的所有servlet和jsp页面访问，不同的用户在不同的jsp界面、servlet中都可以使用该javabean对象</p>
</blockquote>
<h4 id="5-jsp中的javabean"><a href="#5-jsp中的javabean" class="headerlink" title="5. jsp中的javabean"></a>5. jsp中的javabean</h4><p>在jsp中使用javabean方式</p>
<p>直接在脚本元素中使用</p>
<blockquote>
<p>&lt;%</p>
<p>User user=new User();<br>user.setId(1001);<br>user.setUsername(“zhangsan”);<br>user.setPassWord(“123456”);<br>user.setRealName(“张三”);<br>%&gt;</p>
<p>利用动作元素来使用</p>
</blockquote>
<p>&lt;%– 用于实例化JavaBean，或者是从指定的范围中访问一个已存在的JavaBean实例–%&gt;</p>
<p>&lt;<strong>jsp:useBean</strong> id=”user1” class=”hb.rj.bean.User” scope=”page”/&gt;<br>* id：JavaBean的实例名称<br>* class：JavaBean的全限定名(全类名)<br>* type：指定脚本变量的类型，可以是该JavaBean本身、父类或者该JavaBean实现的接口<br>* scope：指定一个范围，在这个范围中JavaBean实例是可用的，取值可以为：page/request/session/application，默认值为page  </p>
<p>&lt;<strong>jsp:setProperty</strong> name=”user1” property=”id” value=”12345”/&gt;<br>&lt;<strong>jsp:setProperty</strong> name=”user1” property=”passWord” value=”8888888”/&gt;<br>&lt;<strong>jsp:setProperty</strong> name=”user1” property=”username” value=”zhangSan”/&gt;<br>&lt;<strong>jsp:setProperty</strong> name=”user1” property=”realName” value=”张三”/&gt;  </p>
<p>&lt;<strong>jsp:getProperty</strong> name=”user1” property=”id” /&gt;<br>&lt;<strong>jsp:getProperty</strong> name= “user1” property=”username “ /&gt;<br>&lt;<strong>jsp:getProperty</strong> name= “user1” property=”password” /&gt;<br>&lt;<strong>jsp:getProperty</strong> name=”user1” property=”realName” /&gt;  </p>
<p>* name：JavaBean实例的名称，必须是在&lt;<strong>jsp:useBean</strong>&gt;中定义的id属性值<br>* property：JavaBean的属性名称<br>* value：属性值<br>* param：指定请求中的参数名。如果请求参数名和JavaBean的属性名不同时，可以使用param指定参数名。注意不能和value同时使用</p>
<h3 id="EL表达式（用于简化jsp开发）"><a href="#EL表达式（用于简化jsp开发）" class="headerlink" title="EL表达式（用于简化jsp开发）"></a>EL表达式（用于简化jsp开发）</h3><p>例如：获取user中的userName对象</p>
<p>初始写法：</p>
<p>&lt;%=user.getUserName()%&gt;</p>
<p>&lt;jsp:getProperty name=”user” property=”userName”/&gt;</p>
<p>EL表达式写法：</p>
<p>${user.userName}</p>
<h4 id="1-JSP-EL内置对象"><a href="#1-JSP-EL内置对象" class="headerlink" title="1. JSP EL内置对象"></a>1. JSP EL内置对象</h4><blockquote>
<p>在作用域相关的EL内置对象有pageScope、requestScope、sessionScope和applicationScope。利用他们来对应jsp内置对象中的page、request、session和application</p>
<p>例如：</p>
<p>sessiom.getAttribute(“username”)</p>
<p>在EL中可以使用：</p>
<p>${sessionScope.username}</p>
</blockquote>
<h4 id="2-与输入有关的EL内置对象"><a href="#2-与输入有关的EL内置对象" class="headerlink" title="2. 与输入有关的EL内置对象"></a>2. 与输入有关的EL内置对象</h4><p>param：返回一个请求参数的单个值</p>
<p>${param.userName} 等价于</p>
<p>&lt;%=request.getParameter(“userName”)</p>
<p>paramValues：的返回值是一个字符串数组</p>
<p>${paramValue.userId[0]} 等价于</p>
<p>&lt;%=request.getParameter(“userId”)&gt;</p>
<h4 id="3-代表HTTP请求消息头集合的内置对象"><a href="#3-代表HTTP请求消息头集合的内置对象" class="headerlink" title="3. 代表HTTP请求消息头集合的内置对象"></a>3. 代表HTTP请求消息头集合的内置对象</h4><p>header：用于获取客户端访问JSP页面所传递的请求头字段的值</p>
<p>${header[“userName”]} 可以获得userName请求头字段的值</p>
<p>headerValue：用于获取请求头字段的所有值</p>
<h4 id="4-EL操作javabean"><a href="#4-EL操作javabean" class="headerlink" title="4. EL操作javabean"></a>4. EL操作javabean</h4><p>&lt;%</p>
<p>Person person = new Person();<br>p.setName(“李四”);<br>p.setAge(27);<br>p.setSalary(3600.0);<br>p.setBirth(new java.util.Date());<br>request.setAttribute(“person”, p);<br>%&gt;<br>EL：&lt;br&gt;<br>姓名：${person.name }&lt;br&gt;<br>年龄：${person.age }&lt;br&gt;<br>薪资：${person.salary }&lt;br&gt;<br>生日：${person.birth }&lt;br&gt;<br>薪资2：${person[“salary”] }&lt;br&gt;</p>
<h4 id="5-访问数组"><a href="#5-访问数组" class="headerlink" title="5. 访问数组"></a>5. 访问数组</h4><p>&lt;%</p>
<p>String[] arr = {“hello”,”java”,”html”,”servlet”};<br>request.setAttribute(“arr”, arr);<br>%&gt;<br>EL表达式获取数组&lt;br&gt;<br>数组对象：${arr}&lt;br&gt;<br>数组中的数据：${arr[0]}&lt;br&gt;<br>数组中的数据：${arr[1]}&lt;br&gt;</p>
<h4 id="6-访问list集合"><a href="#6-访问list集合" class="headerlink" title="6. 访问list集合"></a>6. 访问list集合</h4><p>&lt;%</p>
<p>List&lt;Person&gt; list = new ArrayList&lt;Person&gt;();<br>Person p = new Person();<br>p.setName(“王五”);<br>list.add(p);<br>Person p2 = new Person();<br>p2.setName(“赵六”);<br>list.add(p2);<br>request.setAttribute(“personList”, list);<br>%&gt;<br>EL表达式获取List集合&lt;br&gt;<br>集合：${personList }&lt;br&gt;<br>集合中的数据：${personList[0].name }&lt;br&gt;<br>集合中的数据：${personList[1].name }&lt;br&gt;</p>
<h4 id="7-访问Map集合"><a href="#7-访问Map集合" class="headerlink" title="7. 访问Map集合"></a>7. 访问Map集合</h4><p>&lt;%</p>
<p>Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();<br>map.put(“name”, “tom”);<br>map.put(“pwd”, “123456”);<br>request.setAttribute(“mymap”, map);<br>%&gt;<br>EL表达式获取Map集合&lt;br&gt;<br>集合：${mymap }&lt;br&gt;<br>集合中的数据：${mymap.name }&lt;br&gt;<br>集合中的数据：${mymap[‘pwd’] }&lt;br&gt;</p>
<h3 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h3><h4 id="1-什么是JSTL"><a href="#1-什么是JSTL" class="headerlink" title="1. 什么是JSTL"></a>1. 什么是JSTL</h4><p>JSP标准标签库</p>
<p>JSTL的目标是简化JSP页面，虽然EL表达式可以访问JavaBean的属性，但是并不能实现在JSP中进行逻辑判断和流程控制，因而要使用JSTL标签</p>
<h4 id="2-引入JSTL包"><a href="#2-引入JSTL包" class="headerlink" title="2. 引入JSTL包"></a>2. 引入JSTL包</h4><ul>
<li><p>  导入相关的包，jstl-1.2.jar，将包拷入到Web目录下的WEB-INF\lib目录中并导入。</p>
</li>
<li><p>  taglib指令，JSP页面导入标签</p>
</li>
</ul>
<blockquote>
<p>&lt;%@ <strong>taglib</strong> prefix=”c” uri=”<a href="http://java.sun.com/jsp/jstl/core&quot;">http://java.sun.com/jsp/jstl/core&quot;</a> %&gt;</p>
</blockquote>
<h4 id="3-JSTL的标准"><a href="#3-JSTL的标准" class="headerlink" title="3. JSTL的标准"></a>3. JSTL的标准</h4><table>
<thead>
<tr>
<th><strong>功能</strong></th>
<th><strong>说明</strong></th>
<th><strong>前缀</strong></th>
<th><strong>uri</strong></th>
</tr>
</thead>
<tbody><tr>
<td>core</td>
<td>核心标签库</td>
<td>c</td>
<td><a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a></td>
</tr>
<tr>
<td>i18n</td>
<td>格式化标签库</td>
<td>fmt</td>
<td><a href="http://java.sun.com/jsp/jstl/fmt">http://java.sun.com/jsp/jstl/fmt</a></td>
</tr>
<tr>
<td>sql</td>
<td>数据库标签库</td>
<td>sql</td>
<td><a href="http://java.sun.com/jsp/jstl/sql">http://java.sun.com/jsp/jstl/sql</a></td>
</tr>
<tr>
<td>xml</td>
<td>xml标签库</td>
<td>x</td>
<td><a href="http://java.sun.com/jsp/jstl/xml">http://java.sun.com/jsp/jstl/xml</a></td>
</tr>
<tr>
<td>functions</td>
<td>函数标签库</td>
<td>fn</td>
<td><a href="http://java.sun.com/jsp/jstl/function">http://java.sun.com/jsp/jstl/function</a></td>
</tr>
</tbody></table>
<h4 id="4-set标签"><a href="#4-set标签" class="headerlink" title="4. set标签"></a>4. set标签</h4><p>用于把某一个对象存放在指定的域范围内，相等于setAttribute()方法</p>
<p>&lt;<strong>c:set</strong> value=”${pageScope.name}” var=”name” scope=”page”/&gt;</p>
<table>
<thead>
<tr>
<th><strong>属性名</strong></th>
<th><strong>是否支持EL</strong></th>
<th><strong>属性类型</strong></th>
<th><strong>属性描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>value</td>
<td>true</td>
<td>Object</td>
<td>指定属性值</td>
</tr>
<tr>
<td>var</td>
<td>false</td>
<td>String</td>
<td>指定要设置的属性名称</td>
</tr>
<tr>
<td>scope</td>
<td>false</td>
<td>String</td>
<td>指定属性所在的Web域</td>
</tr>
<tr>
<td>target</td>
<td>true</td>
<td>Object</td>
<td>指定要设置属性的对象，这个对象必须是JavaBean对象或集合对象</td>
</tr>
<tr>
<td>property</td>
<td>true</td>
<td>string</td>
<td>指定当前要为对象设置的属性名称</td>
</tr>
</tbody></table>
<h4 id="5-out标签"><a href="#5-out标签" class="headerlink" title="5. out标签"></a>5. out标签</h4><p>向浏览器写入文本内容</p>
<p>&lt;<strong>c:out</strong> value=”${pageScope.name}”/&gt;</p>
<table>
<thead>
<tr>
<th><strong>属性名</strong></th>
<th><strong>是否支持EL</strong></th>
<th><strong>属性类型</strong></th>
<th><strong>属性描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>value</td>
<td>true</td>
<td>Object</td>
<td>指定要输出的内容</td>
</tr>
<tr>
<td>escapeXml</td>
<td>true</td>
<td>Boolean</td>
<td>指定是否将&gt;、&lt;、&amp;、’、” 等特殊字符进行HTML编码转换后再进行输出。默认值为true</td>
</tr>
<tr>
<td>default</td>
<td>true</td>
<td>Object</td>
<td>指定如果value属性的值为null或””时所输出的默认值</td>
</tr>
</tbody></table>
<h4 id="6-remove标签"><a href="#6-remove标签" class="headerlink" title="6. remove标签"></a>6. remove标签</h4><p>删除指定范围内的变量</p>
<p>&lt;<strong>c:remove</strong> var=”name” scope=”session”/&gt; &lt;%–移除session中的name属性变量–%&gt;</p>
<h4 id="7-catch标签"><a href="#7-catch标签" class="headerlink" title="7. catch标签"></a>7. catch标签</h4><p>用于捕获异常，进行异常处理</p>
<p>&lt;<strong>c:catch</strong> var=”ex”&gt;</p>
<p>&lt;%–ex用来存放发生异常的信息，此标签是双标签，两个标签之间是被保护的语句–%&gt;</p>
<p>&lt;%<br>String[] ss={“abc”};<br>System.<em>out</em>.println(ss[1]);<br>%&gt;<br>&lt;/<strong>c:catch</strong>&gt;</p>
<h4 id="8-if标签"><a href="#8-if标签" class="headerlink" title="8. if标签"></a>8. if标签</h4><p>单条件的判断语句，相当于java中的if(true){ …}</p>
<p>&lt;<strong>c:if</strong> test=”${ex!=null}”&gt;<br>&lt;p&gt;异常为：${ex}&lt;/p&gt;<br>&lt;p&gt;异常的内容为：${ex.message}&lt;/p&gt;</p>
<p>&lt;/<strong>c:if</strong>&gt;</p>
<h4 id="9-choose-when-otherwise标签"><a href="#9-choose-when-otherwise标签" class="headerlink" title="9. choose,when,otherwise标签"></a>9. choose,when,otherwise标签</h4><p>多分支判断语句。choose标签用于指定多个条件选择的组合边界，它必须与when标签和otherwise标签一起使用。使用&lt;c:choose&gt;，&lt;c:when&gt;和&lt;c:otherwise&gt;三个标签，可以构造类似 “if-else if-else” 的复杂条件判断结构。</p>
<p>&lt;<strong>c:choose</strong>&gt;</p>
<p>&lt;<strong>c:when</strong> test=”${score&gt;=90&amp;&amp;score&lt;=100}”&gt;<br>优秀&lt;br&gt;<br>&lt;/<strong>c:when</strong>&gt;<br>&lt;<strong>c:when</strong> test=”${score&gt;=80&amp;&amp;score&lt;=89}”&gt;<br>良好&lt;br&gt;<br>&lt;/<strong>c:when</strong>&gt;<br>&lt;<strong>c:when</strong> test=”${score&gt;=70&amp;&amp;score&lt;=79}”&gt;<br>中等&lt;br&gt;<br>&lt;/<strong>c:when</strong>&gt;<br>&lt;<strong>c:when</strong> test=”${score&gt;=60&amp;&amp;score&lt;=69}”&gt;<br>及格&lt;br&gt;<br>&lt;/<strong>c:when</strong>&gt;<br>&lt;<strong>c:when</strong> test=”${score&gt;=0&amp;&amp;score&lt;=59}”&gt;<br>不及格&lt;br&gt;<br>&lt;/<strong>c:when</strong>&gt;<br>&lt;<strong>c:otherwise</strong>&gt; &lt;%–当上面when标签的条件不成立，执行otherwise的内容–%&gt;<br>&lt;h1 style=”color:red”&gt;分数有误&lt;/h1&gt;<br>&lt;/<strong>c:otherwise</strong>&gt;<br>&lt;/<strong>c:choose</strong>&gt;</p>
<h4 id="10-redirect标签"><a href="#10-redirect标签" class="headerlink" title="10. redirect标签"></a>10. redirect标签</h4><p>用于重定向</p>
<p>&lt;<strong>c:redirect</strong> url=”<a href="http://www.baidu.com&quot;&gt;&lt;/**c:redirect">http://www.baidu.com&quot;&gt;&lt;/**c:redirect</a>**&gt;</p>
<h4 id="11-数据库标签库"><a href="#11-数据库标签库" class="headerlink" title="11. 数据库标签库"></a>11. 数据库标签库</h4><ul>
<li>  setDataSource标签</li>
</ul>
<p>设置数据源，与数据库建立连接</p>
<blockquote>
<p>&lt;<strong>sql:setDataSource</strong> driver=”com.mysql.cj.jdbc.Driver”</p>
<p>url=”jdbc:mysql://localhost:3306/biglist?characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai”<br>user=”root” password=”510609” var=”ds”/&gt;<br>数据源：${ds}&lt;br/&gt;</p>
</blockquote>
<ul>
<li>  query标签</li>
</ul>
<blockquote>
<p>数据查询</p>
<p>&lt;<strong>sql:query</strong> var=”rs” dataSource=”${ds}”</p>
<p>sql=”selectname,age,club,transfer,Goal,Country from player” /&gt;<br>&lt;%–结果集：${rs}–%&gt;  </p>
<p>&lt;%–foreach遍历出结果集中的数据，rs.rows意思是以行为单位进行遍历–%&gt;<br>&lt;<strong>c:forEach</strong> items=”${rs.rows}” var=”row”&gt;<br>${row.name}–名字：${row.age}–年龄<br>&lt;/<strong>c:forEach</strong>&gt;</p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>返回值</strong></th>
<th><strong>函数名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>String</td>
<td>toUpperCase(String input)</td>
<td>将字符串转换为大写</td>
</tr>
<tr>
<td>String</td>
<td>toLowerCase(String input)</td>
<td>将字符串转换为小写</td>
</tr>
<tr>
<td>int</td>
<td>indexOf(String input, String substring)</td>
<td>在一个字符串input种查找指定子串substring，返回最先匹配的第一个字符的位置</td>
</tr>
<tr>
<td>boolean</td>
<td>contains(String input, String substring)</td>
<td>判断字符串input中是否包含了指定的子串substring</td>
</tr>
<tr>
<td>boolean</td>
<td>contains(String input, String substring)</td>
<td>判断字符串input中是否包含了指定的子串substring</td>
</tr>
<tr>
<td>boolean</td>
<td>containsIgnoreCase(String input, String substring)</td>
<td>判断一个字符串input是否包含指定的子串substring，且忽略大小写</td>
</tr>
<tr>
<td>boolean</td>
<td>startsWith(String input, String prefix)</td>
<td>判断字符串input是否有指定的前缀prefix开始</td>
</tr>
<tr>
<td>boolean</td>
<td>endsWith(String input, String suffix)</td>
<td>判断字符串input是否由指定的后缀suffix开始</td>
</tr>
<tr>
<td>String</td>
<td>substring(String input, int beginIndex, int endIndex)</td>
<td>截取字符串input的某一部分，返回截取后的子串substring</td>
</tr>
<tr>
<td>String</td>
<td>substringAfter(String input, String substring)</td>
<td>截取指定的子串，返回子串之后的字符串</td>
</tr>
<tr>
<td>String</td>
<td>substringBefore(String input, String substring)</td>
<td>截取指定的子串，返回子串之后的字符串</td>
</tr>
<tr>
<td>String</td>
<td>escapeXml(String input)</td>
<td>将字符串的&lt;、&gt;、’ 、”和&amp;转换为对应字符引用或者实体引用</td>
</tr>
<tr>
<td>String</td>
<td>trim(String input)</td>
<td>去除字符串前后的空白字符</td>
</tr>
<tr>
<td>String</td>
<td>replace(String input, String substringBefore, String substringAfter)</td>
<td>将一个字符串的某一部分替换为另外一部分，返回替换后的结果</td>
</tr>
<tr>
<td>String[]</td>
<td>split(String input, String delimiters)</td>
<td>将一个字符串input使用指定的分隔符delimiters分割为数组</td>
</tr>
<tr>
<td>int</td>
<td>length(Object obj)</td>
<td>获取字符串、数组、各种集合的长度</td>
</tr>
<tr>
<td>String</td>
<td>join(String array[], String separator)</td>
<td>将一个数组array使用分隔符separator连接为一个字符串</td>
</tr>
</tbody></table>
<h4 id="12-函数标签库"><a href="#12-函数标签库" class="headerlink" title="12.函数标签库"></a>12.函数标签库</h4><p>字符串包含&lt;br&gt;</p>
<p>${fn:contains(“javascript”, “java”) }&lt;br&gt;<br>截取子字符串&lt;br&gt;<br>${fn:substring(“hello”,1,4) }&lt;br&gt;<br>是否以…开始或结束&lt;br&gt;<br>${fn:startsWith(“mysql”, “my”) }&lt;br&gt;<br>${fn:endsWith(“oracle”, “abc”) }&lt;br&gt;<br>位置&lt;br&gt;<br>${fn:indexOf(“html”,”x”) }&lt;br&gt;<br>替换&lt;br&gt;<br>${fn:replace(“how are you”,” “,”-“) }&lt;br&gt;<br>拆分&lt;br&gt;<br>${fn:split(“tom@jerry”,”@”) }&lt;br&gt;<br>${fn:length(fn:split(“tom@jerry”,”@”)) }&lt;br&gt;<br>组合字符串&lt;br&gt;<br>${fn:join(fn:split(“aa#bb#cc#dd”,”#“),”,”) }</p>
<h2 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h2><h3 id="过滤器概念"><a href="#过滤器概念" class="headerlink" title="过滤器概念"></a>过滤器概念</h3><p>web中的过滤器：当访问服务器资源的时候，过滤器可以将请求拦截下来，完成一些特殊的功能</p>
<p>过滤器的作用：一般用于完成通用的操作。如：登录验证、统一编码处理、敏感字符过滤。</p>
<h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><p>步骤：</p>
<blockquote>
<p>1. 定义一个类、实现接口Filter</p>
<p>2. 复写方法</p>
<p>3. 配置拦截路径</p>
<p>web.xml配置 注解配置 @WebFilter(“/*“)//访问所有资源都会执行过滤器</p>
</blockquote>
<p>| |</p>
<p>| |</p>
<p>\/</p>
<blockquote>
<p>&lt;filter&gt;</p>
<p>&lt;filter-name&gt;Filter1&lt;/filter-name&gt;<br>&lt;filter-class&gt;hb.rj.bean.Filter1&lt;/filter-class&gt;<br>&lt;/filter&gt;<br>&lt;filter-mapping&gt;<br>&lt;filter-name&gt;Filter1&lt;/filter-name&gt;<br>&lt;url-pattern&gt;/*&lt;/url-pattern&gt;<br>&lt;/filter-mapping&gt;</p>
</blockquote>
<h3 id="过滤器执行流程（生命周期）"><a href="#过滤器执行流程（生命周期）" class="headerlink" title="过滤器执行流程（生命周期）"></a>过滤器执行流程（生命周期）</h3><blockquote>
<p>init：在服务器启动后，会创建Filter对象，然后调用init方法。只能执行一次，用于加载资源</p>
<p>doFilter：每一次请求被拦截资源时，会执行。执行多次，</p>
<p>执行过滤器</p>
<p>执行放行后的资源</p>
<p>回来执行过滤器放行代码下边的代码</p>
<p> 注意:在Filter的doFilter方法内如果没有执行chain.doFilter(request,response)<br>　　　　　　　　那么资源是不会被访问到的。</p>
<p>destroy：在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行，只执行一次。一般用于释放资源</p>
</blockquote>
<h3 id="过滤器配置详解"><a href="#过滤器配置详解" class="headerlink" title="过滤器配置详解"></a>过滤器配置详解</h3><blockquote>
<p>拦截路径配置</p>
<p>1. 具体资源路径：/index.jsp 只有访问index.jsp资源时，过滤器才会被执行</p>
<p>2. 拦截目录：/user/* 访问/user下的所有资源时，过滤器都会被执行</p>
<p>3. 后缀名拦截：*.jsp 访问所有后缀名为jsp的资源是，过滤器都会被执行</p>
<p>4. 拦截所有资源：/* 访问所有资源时，过滤器都会被执行</p>
<p>拦截方式配置：资源被访问的方式</p>
<p>设置dispatcherTypes属性</p>
<p>1. request：默认值。浏览器直接请求资源</p>
<p>2. forward：转发访问资源时</p>
<p>3. include：包含访问资源时</p>
<p>4. error：错误跳转资源</p>
<p>5. async：异步访问资源</p>
</blockquote>
<p>@WebFilter(value = “/*“,dispatcherTypes = {DispatcherType.<em>REQUEST</em>,DispatcherType.<em>FORWARD</em>})</p>
<p>//浏览器直接请求或者转发访问资源时进行拦截</p>
<p>web.xml配置</p>
<p>&lt;filter&gt;</p>
<p>&lt;filter-name&gt;Filter1&lt;/filter-name&gt;<br>&lt;filter-class&gt;hb.rj.bean.Filter1&lt;/filter-class&gt;<br>&lt;/filter&gt;<br>&lt;filter-mapping&gt;<br>&lt;filter-name&gt;Filter1&lt;/filter-name&gt;<br>&lt;url-pattern&gt;/*&lt;/url-pattern&gt;<br>&lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt;<br>&lt;/filter-mapping&gt;</p>
<h3 id="过滤器链（配置多个过滤器）"><a href="#过滤器链（配置多个过滤器）" class="headerlink" title="过滤器链（配置多个过滤器）"></a>过滤器链（配置多个过滤器）</h3><p>执行顺序：如果有两个过滤器：过滤器1和过滤器2</p>
<blockquote>
<p>过滤器1 –&gt; 过滤器2 –&gt; 资源执行 –&gt; 过滤器2 –&gt; 过滤器1</p>
</blockquote>
<p>过滤器先后顺序问题</p>
<p>注解配置：按照类名的字符串比较规则比较，值小的先执行</p>
<p>web.xml配置：谁定义在上边谁先执行</p>
<h2 id="Listener：监听器"><a href="#Listener：监听器" class="headerlink" title="Listener：监听器"></a>Listener：监听器</h2><h3 id="概念：web三大组件之一"><a href="#概念：web三大组件之一" class="headerlink" title="概念：web三大组件之一"></a>概念：web三大组件之一</h3><blockquote>
<p>事件监听机制</p>
<p>事件 –&gt; 事件发生的地方 –&gt; 监听器：监听一个对象 –&gt; 注册监听：将事件事件源监听器绑定在一起。当事件源上发生某一个事件后，执行监听代码</p>
</blockquote>
<h3 id="监听器的实质"><a href="#监听器的实质" class="headerlink" title="监听器的实质"></a>监听器的实质</h3><p>一个类实现某个监听器接口，然后实现接口对应的方法，达到监听具体事项的动作</p>
<h3 id="监听器的接口有哪些"><a href="#监听器的接口有哪些" class="headerlink" title="监听器的接口有哪些"></a>监听器的接口有哪些</h3><p>监听器接口分三类：ServletContext，HttpSession，ServletRequest。</p>
<p><strong>ServletContext</strong></p>
<p>—-ServletContextListener监听ServletContext对象</p>
<p>—-ServletContextAttributeListener监听对ServletContext属性的操作，比如说增加，删除，修改</p>
<p><strong>HttpSession</strong></p>
<p>—-HttpSessionListener监听Session对象</p>
<p>—-HttpSessionAttributeListener监听Session的属性操作</p>
<p>—-HttpSessionActivationListener监听HTTP会话的active和passivate情况，passivate是指非活动的session被写入持久设备（如硬盘），active相反。</p>
<p>—-HttpSessionBindingListener监听器感知Session绑定的事件监听器</p>
<p>Servlet 规范中定义了两个特殊的监听器接口”HttpSessionBindingListener和HttpSessionActivationListener”来帮助JavaBean</p>
<p>对象了解自己在Session域中的这些状态： ，实现这两个接口的类不需要 web.xml 文件中进行注册。</p>
<p><strong>ServletRequest</strong></p>
<p>—-ServletRequestListener监听Requst对象</p>
<p>—-ServletRequestAttributeListener监听Request中的属性操作。ServletContextListener</p>
<h3 id="监听ServletContext的创建和销毁"><a href="#监听ServletContext的创建和销毁" class="headerlink" title="监听ServletContext的创建和销毁"></a>监听ServletContext的创建和销毁</h3><p>public class listen implements ServletContextListener {</p>
<p>// 在服务器ServletContext方法启动时调用<br>@Override<br>public void contextDestroyed(ServletContextEvent sce) {<br>// 1.获取ServletContext对象<br>ServletContext servletcontext= sce.getServletContext();  </p>
<p>// 2.加载资源文件<br>String cont=servletcontext.getInitParameter(“contextConfig”);<br>}<br>// 在服务器ServletContext方法销毁时执行<br>@Override<br>public void contextInitialized(ServletContextEvent sce) {<br>ServletContextListener.super.contextInitialized(sce);<br>}<br>}</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring整合Mybatis操作数据库</title>
    <url>/2023/03/07/Spring%E6%95%B4%E5%90%88Mybatis/</url>
    <content><![CDATA[<h1 id="Spring整合Mybatis操作数据库"><a href="#Spring整合Mybatis操作数据库" class="headerlink" title="Spring整合Mybatis操作数据库"></a>Spring整合Mybatis操作数据库</h1><p>作为一个新技术，Spring在对老技术的支持上已经是非常全面，而Mybatis同时向Spring提供了对应的依赖，以保证能够完美兼容</p>
<h2 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h2><p>需要引入的依赖有：<br>spring-context | spring-jdbc | mybatis | mybatis-spring | mysql-connector-java | druid | lombok</p>
<h2 id="搭建三层架构"><a href="#搭建三层架构" class="headerlink" title="搭建三层架构"></a>搭建三层架构</h2><p><img src="/img/Spring%E6%95%B4%E5%90%88Mybatis/image-20230306181813170.png" alt="image-20230306181813170" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol>
<li><p>配置一个名叫jdbc.properties的数据源用来存放关于jdbc的信息</p>
</li>
<li><p>配置类</p>
<ol>
<li><p>Spring配置类</p>
<ol>
<li>使用@Configurable声明</li>
<li>设置扫描com.itheima下的文件</li>
<li>引入对应的数据源（jdbc.properties）</li>
<li>导入Jdbc配置类和Mybatis配置类</li>
</ol>
</li>
<li><p>Jdbc配置类</p>
<p>这个类主要是将数据源中的数据取出并通过druid的DataSource方法使用</p>
</li>
<li><p>MybatisConfig</p>
<p>将Mybatis的xml简写</p>
</li>
</ol>
</li>
<li><p>domain层</p>
<p>pojo层Getter、Setter</p>
</li>
<li><p>Dao层</p>
<p>利用注解设置增删改查方法</p>
</li>
<li><p>Service层</p>
<p>设置Service层接口和实现类</p>
<ol>
<li><p>实现类中</p>
<p>利用自动装配的dao层，将参数传到Service中</p>
</li>
</ol>
</li>
<li><p>运行类</p>
</li>
</ol>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p><img src="/img/Spring%E6%95%B4%E5%90%88Mybatis/image-20230306185446664.png" alt="image-20230306185446664" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><p>SpringConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Configurable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建spring配置类*/</span></span><br><span class="line"><span class="meta">@Configurable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*扫描包路径*/</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="comment">/*引入配置文件*/</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="comment">/*导入对应的Jdbc配置*/</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JdbcConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        DruidDataSource ds=<span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(username);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MybatisConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.mapper.MapperScannerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        SqlSessionFactoryBean ssf=<span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        <span class="comment">/*设置类型包*/</span></span><br><span class="line">        ssf.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">        ssf.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ssf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        MapperScannerConfigurer msc=<span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="domain层"><a href="#domain层" class="headerlink" title="domain层"></a>domain层</h3><p>Account</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoney</span><span class="params">(Double money)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h3><p>接口AccountDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_account(id,name,money)values(#&#123;id&#125;,#&#123;name&#125;,#&#123;money&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_account where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_account set name = #&#123;name&#125; , money = #&#123;money&#125; where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account&quot;)</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    Account <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h3><p>接口AccountService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">selectAll</span><span class="params">(Account account)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类AccountServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.Dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*新增*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>&#123;</span><br><span class="line">        accountDao.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*删除*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        accountDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*修改*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>&#123;</span><br><span class="line">        accountDao.update(account);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*查找*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">selectAll</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行类"><a href="#运行类" class="headerlink" title="运行类"></a>运行类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.config.SpringConfig;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.impl.AccountServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ApplicationContext crx=<span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        AccountService accountService=crx.getBean(AccountService.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*新增数据*/</span></span><br><span class="line">        Account account=<span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line">        account.setId(<span class="number">3</span>);</span><br><span class="line">        account.setMoney(<span class="number">400.0</span>);</span><br><span class="line">        account.setName(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        accountService.save(account);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*删除数据*/</span></span><br><span class="line">        accountService.delete(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*修改数据*/</span></span><br><span class="line">        Account account=<span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line">        account.setId(<span class="number">3</span>);</span><br><span class="line">        account.setName(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        account.setMoney(<span class="number">500.0</span>);</span><br><span class="line">        accountService.update(account);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*查找全部*/</span></span><br><span class="line">        Account account=<span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line">        List&lt;Account&gt; list1=accountService.selectAll(account);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis持久层框架</title>
    <url>/2023/03/07/Mybatis/</url>
    <content><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h2><ul>
<li>MyBatis是一款优秀的持久层框架，用于简化JDBC开发<ul>
<li>持久层</li>
</ul>
</li>
</ul>
<p>​                    负责将数据到保存到数据库的那一层代码</p>
<p>​                    JavaEE三层架构：表现层、业务层、持久层</p>
<h2 id="MyBatis快速入门-Mapper代理开发"><a href="#MyBatis快速入门-Mapper代理开发" class="headerlink" title="MyBatis快速入门/Mapper代理开发"></a>MyBatis快速入门/Mapper代理开发</h2><p>使用MyBatis查询表中的所有信息</p>
<p>（1）安装MyBatis</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）创建mybatis核心配置文件mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据连接信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;510609&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载SQL映射--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（3）定义与SQL映射文件同名的Mapper接口，并且将Mapper接口和SQL映射文件放置在同一目录下</p>
<p><strong>UserMapper.java****：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dome;</span><br><span class="line"><span class="keyword">import</span> pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;                          </span><br></pre></td></tr></table></figure>

<p>resultType：可选pojo，预计返回值类型</p>
<p>id是接口中的方法名</p>
<p>设置SQL映射的namespace属性为Mapper接口全限定名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    namespace：名称空间</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dome.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（4）     在实体类中调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisDemo</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*1.加载mybatis的核心配置文件，获取SqlSessionFactory*/</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*2.获取SqlSessionFactory对象，用它来执行sql*/</span></span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*3.执行sql*/</span></span><br><span class="line">        UserMapper userMapper=sqlSession.getMapper(UserMapper.class);</span><br><span class="line">		List&lt;User&gt; users=userMapper.selectAll();</span><br><span class="line"></span><br><span class="line">        System.out.println(users);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*4.释放资源*/</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MyBatis核心配置文件设置"><a href="#MyBatis核心配置文件设置" class="headerlink" title="MyBatis核心配置文件设置"></a>MyBatis核心配置文件设置</h2><p><environments>：配置数据库连接环境信息，可以配置多个environment，通过default属性切换不同的environment</p>
<p><typeAliases>：指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.demo.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="MyBatis之查询"><a href="#MyBatis之查询" class="headerlink" title="MyBatis之查询"></a>MyBatis之查询</h2><p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BrandMapper</span> &#123;</span><br><span class="line">    <span class="comment">/*查询所有*/</span></span><br><span class="line">    String <span class="title function_">selectById</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sql语句设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.demo.mapper.BrandMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">       select brandName from tb_brand where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>获取返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BrandMapper brandMapper=sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"> </span><br><span class="line">String brand= brandMapper.selectById(id);</span><br></pre></td></tr></table></figure>

<h2 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h2><p>接口这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Brand&gt; <span class="title function_">selectByCondition</span><span class="params">(<span class="meta">@Param(&quot;status&quot;)</span> <span class="type">int</span> status,<span class="meta">@Param(&quot;companyName&quot;)</span> String companyName,<span class="meta">@Param(&quot;brandName&quot;)</span> String brandName)</span>;</span><br></pre></td></tr></table></figure>

<p>SQL语句设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.demo.mapper.BrandMapper&quot;</span>&gt;</span>   </span><br><span class="line"><span class="comment">&lt;!--多条件/模糊查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Brand&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_brand</span><br><span class="line">        where status = #&#123;status&#125;</span><br><span class="line">        and companyName like #&#123;companyName&#125;</span><br><span class="line">        and brandName like #&#123;brandName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>获取查询到的数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> status=<span class="number">1</span>;</span><br><span class="line">String companyName=<span class="string">&quot;华为&quot;</span>;</span><br><span class="line">String brandName=<span class="string">&quot;华为&quot;</span>;</span><br><span class="line"><span class="comment">/*处理参数*/</span></span><br><span class="line">companyName=<span class="string">&quot;%&quot;</span>+companyName+<span class="string">&quot;%&quot;</span>;</span><br><span class="line">brandName=<span class="string">&quot;%&quot;</span>+brandName+<span class="string">&quot;%&quot;</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">List&lt;Brand&gt; list=brandMapper.selectByCondition(status,companyName,brandName);</span><br><span class="line">System.out.println(list);</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h2 id="选择性多条件查询"><a href="#选择性多条件查询" class="headerlink" title="选择性多条件查询"></a>选择性多条件查询</h2><p>在日常使用中，有时候可能用户不会填写所有的条件，而是选填一部分对此可以：</p>
<p>sql语句：</p>
<p>if标签判断是否为空</p>
<p>where用来解决and造成的问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Brand&quot;</span>&gt;</span></span><br><span class="line">    select * from tb_brand</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status!=null&quot;</span>&gt;</span></span><br><span class="line">            status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName!=null and companyName!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and companyName like #&#123;companyName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName!=null and brandName!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and brandName like #&#123;brandName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="单条件查询"><a href="#单条件查询" class="headerlink" title="单条件查询"></a>单条件查询</h2><p>在使用时经常使用下拉列表进行单项查询，所以使用类似于switch进行选择判断</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Brand&quot;</span>&gt;</span></span><br><span class="line">select * from tb_brand</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span>        /*类似于switch*/</span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;status!=null&quot;</span>&gt;</span>    /*类似于case选项*/</span><br><span class="line">            status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;companyName!=null and companyName!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and companyName like #&#123;companyName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;brandName!=null and brandName!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and brandName like #&#123;brandName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span>    /*类似于default*/</span><br><span class="line">            1=1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><p>接口添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure>

<p>sql语句：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">    insert into tb_brand(brandName,companyName,ordered,description,status)</span><br><span class="line">    values (</span><br><span class="line">        #&#123;brandName&#125;,</span><br><span class="line">        #&#123;companyName&#125;,</span><br><span class="line">        #&#123;ordered&#125;,</span><br><span class="line">        #&#123;description&#125;,</span><br><span class="line">        #&#123;status&#125;</span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="type">int</span> status=<span class="number">1</span>;</span><br><span class="line">      String companyName=<span class="string">&quot;Samsung&quot;</span>;</span><br><span class="line">      String brandName=<span class="string">&quot;三星&quot;</span>;</span><br><span class="line">      String description=<span class="string">&quot;手机中的战斗机&quot;</span>;</span><br><span class="line">      <span class="type">int</span> ordered=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*封装对象*/</span></span><br><span class="line">      Brand brand=<span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">      brand.setStatus(status);</span><br><span class="line">      brand.setCompanyName(companyName);</span><br><span class="line">      brand.setBrandName(brandName);</span><br><span class="line">      brand.setDescription(description);</span><br><span class="line">      brand.setOrdered(ordered);</span><br><span class="line"> </span><br><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">      <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">      <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">      SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*获取UserMapper的接口的代理对象*/</span></span><br><span class="line">      BrandMapper brandMapper=sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">      brandMapper.add(brand);</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/*提交事务*/</span></span><br><span class="line">sqlSession.commit();</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>如果不想提交事务，可以在</p>
<p>SqlSession sqlSession=sqlSessionFactory.openSession();</p>
<p>openSession中填true即可自动添加</p>
<p>返回主键操作：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="修改全部字段"><a href="#修改全部字段" class="headerlink" title="修改全部字段"></a>修改全部字段</h2><p>接口修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure>

<p>sql语句：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update tb_brand</span><br><span class="line">    set brandName=#&#123;brandName&#125;,</span><br><span class="line">        companyName=#&#123;companyName&#125;,</span><br><span class="line">        ordered=#&#123;ordered&#125;,</span><br><span class="line">        description=#&#123;description&#125;,</span><br><span class="line">        status=#&#123;status&#125;</span><br><span class="line">    where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改数据操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> status=<span class="number">1</span>;</span><br><span class="line">String companyName=<span class="string">&quot;博导&quot;</span>;</span><br><span class="line">String brandName=<span class="string">&quot;博导手机&quot;</span>;</span><br><span class="line">String description=<span class="string">&quot;手机中的战斗机&quot;</span>;</span><br><span class="line"><span class="type">int</span> ordered=<span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*封装对象*/</span></span><br><span class="line">Brand brand=<span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">brand.setStatus(status);</span><br><span class="line">brand.setCompanyName(companyName);</span><br><span class="line">brand.setBrandName(brandName);</span><br><span class="line">brand.setDescription(description);</span><br><span class="line">brand.setOrdered(ordered);</span><br><span class="line">brand.setId(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*处理参数*/</span></span><br><span class="line">companyName=<span class="string">&quot;%&quot;</span>+companyName+<span class="string">&quot;%&quot;</span>;</span><br><span class="line">brandName=<span class="string">&quot;%&quot;</span>+brandName+<span class="string">&quot;%&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取UserMapper的接口的代理对象*/</span></span><br><span class="line">BrandMapper brandMapper=sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count=brandMapper.update(brand);</span><br><span class="line">System.out.println(count);</span><br><span class="line"></span><br><span class="line">sqlSession.commit();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*4.释放资源*/</span></span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>接口文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<p>sql映射：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span>&gt;</span></span><br><span class="line">    delete from tb_brand where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>删除操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line">brandMapper.deleteById(id);</span><br><span class="line"></span><br><span class="line">sqlSession.commit();</span><br></pre></td></tr></table></figure>

<h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><p>接口文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span><span class="type">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure>

<p>sql映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">    delete  from tb_brand where id</span><br><span class="line">    in(</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>批量删除操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] ids=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">53</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取UserMapper的接口的代理对象*/</span></span><br><span class="line">BrandMapper brandMapper=sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">brandMapper.deleteByIds(ids);</span><br><span class="line"></span><br><span class="line">sqlSession.commit();</span><br><span class="line"><span class="comment">/*4.释放资源*/</span></span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure>

<h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p> 使用注解开发会比配置文件开发更加方便</p>
<p>在接口中写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from tb_user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<p>查询：@Select</p>
<p>添加：@Insert</p>
<p>修改：@Update</p>
<p>删除：@Delete</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记</title>
    <url>/2023/03/07/Spring/</url>
    <content><![CDATA[<p><img src="/img/Spring/image-20230222231348077.png" alt="image-20230222231348077" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h1 id="Spring"><a href="#Spring" class="headerlink" title=".Spring"></a>.Spring</h1><h2 id="Spring-Framework系统架构"><a href="#Spring-Framework系统架构" class="headerlink" title="Spring Framework系统架构"></a>Spring Framework系统架构</h2><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul>
<li>IoC( Inversion of Control )控制反转：使用对象时，不通过程序创建，而是通过在外部的IoC容器直接创建，这种行为叫做控制反转</li>
</ul>
<p>​        IoC负责对象的创建、初始化等一一系列的工作，被创建或被管理的对象在IoC容器中被通称为“Bean”</p>
<ul>
<li>DI（Dependency Injection）依赖注入</li>
</ul>
<p>​        在容器中建立bean与bean之间的依赖关系的整个过程，称为依赖注入</p>
<p>​        就是说两个bean之间有依赖关系DI会自动绑好这个关系</p>
<p>最终效果</p>
<p>​    使用对象时不仅可以直接从IoC容器中获取，而且获取到的bean已经绑定好了所有依赖关系</p>
<h3 id="IoC和DI基本使用"><a href="#IoC和DI基本使用" class="headerlink" title="IoC和DI基本使用"></a>IoC和DI基本使用</h3><p>使用“<a href="SSM%E6%A1%86%E6%9E%B6%5CMavenDemo%5Csrc%5Cmain%5Cjava%5Crun.java">详情见</a>”</p>
<h4 id="Spring使用"><a href="#Spring使用" class="headerlink" title="Spring使用"></a>Spring使用</h4><ol>
<li>在pom.xml中配置</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在resources中右击创建applicationContext.xml</li>
</ol>
<h4 id="IoC使用"><a href="#IoC使用" class="headerlink" title="IoC使用"></a>IoC使用</h4><ol>
<li><p>在dao.impl和service.impl中分别创建java类BookDaoImpl.java和BookServiceImpl.java</p>
<p>BookDaoImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BookServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"><span class="comment">//    5.删除业务层中使用new的方法创建的dao对象</span></span><br><span class="line">    <span class="keyword">public</span> BookDao bookDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    6.提供对应的set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao=bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建接口BookDao和BookService</p>
<p>BookDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BookService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在applicationContext.xml中添加</p>
</li>
</ol>
<p>配置bean</p>
<p>bean标签表示配置bean</p>
<p>id属性表示给bean起名字</p>
<p>class属性表示给bean定义类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="2">
<li>在运行界面写获取IoC容器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ctx=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>获取&amp;使用bean</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BookDao bookDao=(BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">bookDao.save();</span><br></pre></td></tr></table></figure>

<p>返回值：book dao save …</p>
<h4 id="DI使用"><a href="#DI使用" class="headerlink" title="DI使用"></a>DI使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    5.删除业务层中使用new的方法创建的dao对象</span></span><br><span class="line"><span class="keyword">public</span> BookDao bookDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    6.提供对应的set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao=bookDao;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在applicationContext.xml中设置，将bookDao注入bookService</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    7.配置service和dao的关系--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--    property标签表示配置当前bean的属性--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--    name属性表示配置哪个具体的属性--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--    ref属性表示参照哪一个bean--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="bean配置"><a href="#bean配置" class="headerlink" title="bean配置"></a>bean配置</h3><h4 id="bean的基础配置"><a href="#bean的基础配置" class="headerlink" title="bean的基础配置"></a>bean的基础配置</h4><ol>
<li>给bean起个别名</li>
</ol>
<p>name属性:别名，可以定义多个，使用逗号、分号或空格分隔</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dao bookDaoiml&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dao&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>bean作用范围</li>
</ol>
<p>scope属性：定义bean的作用范围，可选范围如下</p>
<p>singleton：单例（默认）    一个类只有一个实例</p>
<p>prototype：非单例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dao bookDaoiml&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.impl.BookDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="bean实例化方式"><a href="#bean实例化方式" class="headerlink" title="bean实例化方式"></a>bean实例化方式</h4><h5 id="通过构造方法实例化"><a href="#通过构造方法实例化" class="headerlink" title="通过构造方法实例化"></a>通过构造方法实例化</h5><p>bean本质上就是对象，String创建bean其实是使用构造方法完成的</p>
<blockquote>
<p>bean只能默认调用无参构造方法</p>
</blockquote>
<h5 id="通过静态工厂实例化bean"><a href="#通过静态工厂实例化bean" class="headerlink" title="通过静态工厂实例化bean"></a>通过静态工厂实例化bean</h5><p>静态工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoFactory</span> <span class="keyword">implements</span> <span class="title class_">OrderDao</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> OrderDao <span class="title function_">getOrderDao</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;factory setup...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderDaoFactory</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDao&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getOrderDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.factory.OrderDaoFactory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="实例工厂实例化bean"><a href="#实例工厂实例化bean" class="headerlink" title="实例工厂实例化bean"></a>实例工厂实例化bean</h5><p>实例工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoFactory</span> <span class="keyword">implements</span> <span class="title class_">OrderDao</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> OrderDao <span class="title function_">getOrderDao</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;factory setup...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderDaoFactory</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.factory.OrderDaoFactory&quot;</span>/&gt;</span></span><br><span class="line">			=======================================================﹀</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFactory&quot;</span>  <span class="attr">factory-method</span>=<span class="string">&quot;getOrderDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;orderDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p>第二种实例</p>
<p>实力工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoFactory</span> <span class="keyword">implements</span> <span class="title class_">OrderDao</span>&#123;</span><br><span class="line">    <span class="comment">//getObject是spring提供的固定写法</span></span><br><span class="line">    <span class="keyword">public</span> OrderDao <span class="title function_">getObject</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderDaoFactory</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObiectType()&#123;</span><br><span class="line">        <span class="keyword">return</span> OrderDao.class;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置是否为单例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.factory.OrderDaoFactory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="bean生命周期"><a href="#bean生命周期" class="headerlink" title="bean生命周期"></a>bean生命周期</h3><ul>
<li><p>初始化容器</p>
<ol>
<li><p>创建对象（分配地址）</p>
</li>
<li><p>执行构造方法</p>
</li>
<li><p>执行属性注入（set操作）</p>
</li>
<li><p>执行bean初始化方法</p>
<p>第一种：通过属性值设置生命周期钩子</p>
<p>BookDaoImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.impl.BookDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>第二种：通过Spring接口设置生命周期钩子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>,InitializingBean, DisposableBean &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookDaoImpl</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="属性值注入"><a href="#属性值注入" class="headerlink" title="属性值注入"></a>属性值注入</h3><blockquote>
<p>在注入时，ref用于引用类型，value用于简单类型</p>
</blockquote>
<h4 id="setting注入"><a href="#setting注入" class="headerlink" title="setting注入"></a>setting注入</h4><blockquote>
<p>为私有属性注入值有两种方式，分别是<span style="color:red">setting的简单注入</span>，另一个就是使用<span style="color:red">构造方法</span></p>
</blockquote>
<p>applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionNumber&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sql&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>BookDaoImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> String connectionNumber;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setConnectionNumber</span><span class="params">(String connectionNumber)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.connectionNumber = connectionNumber;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(connectionNumber);	<span class="comment">//返回“sql”</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h4><p>applicationContext.xml</p>
<p>index设置构造函数第几个参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sql&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>BookDaoImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String connectionNumber;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BookDaoImpl</span><span class="params">(String s, <span class="type">int</span> s2)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.connectionNumber=s;</span><br><span class="line">    <span class="built_in">this</span>.num=s2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;book dao save ...&quot;</span>+connectionNumber+num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="属性值注入方法选择"><a href="#属性值注入方法选择" class="headerlink" title="属性值注入方法选择"></a>属性值注入方法选择</h4><ul>
<li><p>用setting注入</p>
<ul>
<li>可选依赖</li>
<li>自己开发的推荐使用setting注入</li>
</ul>
</li>
<li><p>用构造器注入</p>
<ul>
<li>强制依赖</li>
<li>Spring框架推荐使用构造器方法，且第三方框架基本都是用Spring</li>
</ul>
</li>
</ul>
<h4 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h4><p>#所谓自动装配即不用指明两个对象的关系，由Spring自动完成</p>
<p>autowire属性设置使用什么方式进行装配，</p>
<p>byType：通过类型        byName：通过名字</p>
<p>例如：</p>
<p>applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.impl.BookServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ol>
<li>自动装配只适用于引用类型，不能对简单类型进行操作</li>
<li>推荐使用按类型装配，必须保证容器中相同类型的bean唯一</li>
<li>不推荐使用byName，必须保证容器中的bean名称唯一，导致变量名和配置耦合度更高</li>
<li>自动装配优先级低于setting和构造方法</li>
</ol>
</blockquote>
<p>BookServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"><span class="comment">//    5.删除业务层中使用new的方法创建的dao对象</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h4><p>applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>300<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>itcase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>itheima<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>itcase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>itheima<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;country&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;province&quot;</span> <span class="attr">value</span>=<span class="string">&quot;henan&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;city&quot;</span> <span class="attr">value</span>=<span class="string">&quot;kaifeng&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;country&quot;</span> &gt;</span>china<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;province&quot;</span> &gt;</span>henan<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;city&quot;</span>&gt;</span>kaifeng<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>BookDaoImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] array;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArray</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.array = array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSet</span><span class="params">(Set&lt;String&gt; set)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.set = set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMap</span><span class="params">(Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;遍历数组：&quot;</span>+ Arrays.toString(array));</span><br><span class="line">        System.out.println(<span class="string">&quot;遍历list&quot;</span>+list);</span><br><span class="line">        System.out.println(<span class="string">&quot;遍历set&quot;</span>+set);</span><br><span class="line">        System.out.println(<span class="string">&quot;遍历map&quot;</span>+map);</span><br><span class="line">        System.out.println(<span class="string">&quot;遍历properties&quot;</span>+properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><p>方法一：类路径加载配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ctx=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>方法二：文件路径加载配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ctx=<span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;C:\\applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>方法三：加载多个配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ctx=<span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>,<span class="string">&quot;bean2.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="获取bean"><a href="#获取bean" class="headerlink" title="获取bean"></a>获取bean</h4><p>方法一：使用bean名称获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BookDao bookDao=(BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>方法二：使用bean名获取并获取类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BookDao bookDao= ctx.getBean(<span class="string">&quot;bookDao&quot;</span>,BookDao.class);</span><br></pre></td></tr></table></figure>

<p>方法三：使用bean类型获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BookDao bookDao= ctx.getBean(BookDao.class);</span><br></pre></td></tr></table></figure>

<h3 id="核心容器总结"><a href="#核心容器总结" class="headerlink" title="核心容器总结"></a>核心容器总结</h3><p>bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean</span><br><span class="line">id=<span class="string">&quot;bookDao&quot;</span>								bean的Id</span><br><span class="line">name=<span class="string">&quot;dao bookDaoImpl daoImpl&quot;</span>				bean别名</span><br><span class="line">class=<span class="string">&quot;com,itheima.dao,impl,BookDaoImp1&quot;</span>	bean类型，静态工厂类，FactoryBean类</span><br><span class="line">scope=<span class="string">&quot;singleton&quot;</span>							控制bean的实例数量</span><br><span class="line">init-method=<span class="string">&quot;init&quot;</span>							生命周期初始化方法</span><br><span class="line">destroy-method<span class="string">&quot;destory&quot;</span>						生命周期销毁方法</span><br><span class="line">autowire=<span class="string">&quot;byType&quot;</span>							自动装配类型</span><br><span class="line">factory-method=<span class="string">&quot;getInstance&quot;</span></span><br><span class="line">factory-bean=<span class="string">&quot;com.itheima.factory.BookDaoFactory&#x27;lazy-init=&quot;</span><span class="literal">true</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">bean工厂方法，应用于静态工厂或实例工厂实例工厂bean控制bean延迟加载</span></span><br><span class="line"><span class="string">/&gt;</span></span><br></pre></td></tr></table></figure>

<p>依赖注入相关</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;bookService&quot;</span> class=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span><br><span class="line">	<span class="comment">//构造器注入引用类型</span></span><br><span class="line">    &lt;constructor-arg name=<span class="string">&quot;bookDao&quot;</span> ref=<span class="string">&quot;bookDao&quot;</span>/&gt;</span><br><span class="line">	&lt;constructor-arg name=<span class="string">&quot;userDao&quot;</span> ref=<span class="string">&quot;userDao&quot;</span> /&gt;</span><br><span class="line">    <span class="comment">//构造器注入简单类型</span></span><br><span class="line">	&lt;constructor-arg name=<span class="string">&quot;msg&quot;</span> value=<span class="string">&quot;WARN&quot;</span><span class="string">&quot; /&gt;</span></span><br><span class="line"><span class="string">	//类型匹配与索引匹配</span></span><br><span class="line"><span class="string">	&lt;constructor-arg type=&quot;</span>java.lang.String<span class="string">&quot; index=&quot;</span><span class="number">3</span><span class="string">&quot; value=&quot;</span>wARN<span class="string">&quot;/&gt;</span></span><br><span class="line"><span class="string">	//setter注入引用类型</span></span><br><span class="line"><span class="string">	&lt;property name=&quot;</span>bookDao<span class="string">&quot; ref=&quot;</span>bookDao<span class="string">&quot; /&gt;</span></span><br><span class="line"><span class="string">	&lt;property name=&quot;</span>userDao<span class="string">&quot; ref=&quot;</span>userDao<span class="string">&quot; /&gt;</span></span><br><span class="line"><span class="string">    //setter注入简单类型</span></span><br><span class="line"><span class="string">	&lt;property name=&quot;</span>msg<span class="string">&quot; value=&quot;</span>WARN<span class="string">&quot; /&gt;</span></span><br><span class="line"><span class="string">	//setter注入集合类型</span></span><br><span class="line"><span class="string">	&lt;property name=&quot;</span>names<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">    //list集合</span></span><br><span class="line"><span class="string">		&lt;list&gt;</span></span><br><span class="line"><span class="string">    		//集合注入简单类型</span></span><br><span class="line"><span class="string">			&lt;value&gt;itcast&lt; /value&gt;</span></span><br><span class="line"><span class="string">			//集合注入引用类型</span></span><br><span class="line"><span class="string">			&lt;ref bean=&quot;</span>dataSource<span class="string">&quot; / &gt;</span></span><br><span class="line"><span class="string">		&lt;/list&gt;</span></span><br><span class="line"><span class="string">	&lt;/ property&gt;</span></span><br><span class="line"><span class="string">&lt;/ bean&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="注解开发定义bean"><a href="#注解开发定义bean" class="headerlink" title="注解开发定义bean"></a>注解开发定义bean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用@component定义bean</span></span><br><span class="line"> <span class="meta">@Component(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoIml</span> implement BookDao&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在核心配置文件中通过组件扫描加载bean</span></span><br><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.itheima&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>String为了方便开发提供了@component的三个衍生注解</p>
<ol>
<li>@Conteoller：用于表现层bean定义</li>
<li>@Service：用于业务层bean定义</li>
<li>@Repository：用于数据层bean定义</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而当使用三个衍生注解时也不能用单纯的名称了，而是要通过实体类BookDao.class</p>
<h3 id="纯注解开发"><a href="#纯注解开发" class="headerlink" title="纯注解开发"></a>纯注解开发</h3><p>在Spring3.0中开启了纯注解开发模式，使用java类来代替配置文件</p>
<p>第一步：删除applcationContext.xml文件</p>
<p>第二步：新建SpringConfig.java配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置此类为spring配置类</span></span><br><span class="line"><span class="meta">@Configurable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置注解扫描地址</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.ithm.service&quot;,&quot;com.ithm.dao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步：设置加载配置文件类初始化容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ctx=<span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br></pre></td></tr></table></figure>

<h3 id="bean的作用范围和生命周期"><a href="#bean的作用范围和生命周期" class="headerlink" title="bean的作用范围和生命周期"></a>bean的作用范围和生命周期</h3><p>单例和非单例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//带参数的是设置为非单例</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br></pre></td></tr></table></figure>

<p>生命周期</p>
<p>通过注释@PostConstruct设置初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreDestory</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注解依赖注入"><a href="#注解依赖注入" class="headerlink" title="注解依赖注入"></a>注解依赖注入</h3><h4 id="引用类型的依赖注入"><a href="#引用类型的依赖注入" class="headerlink" title="引用类型的依赖注入"></a>引用类型的依赖注入</h4><p>Service中需要使用dao层：</p>
<p>在dao对象上添加注解@Autowired就会自动匹配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run Service ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>指定匹配注解：@Qualifier(“bookDao”)</p>
<p>注意：@Qualifier要配合@Autowired使用</p>
<h4 id="简单数据类型的依赖注入"><a href="#简单数据类型的依赖注入" class="headerlink" title="简单数据类型的依赖注入"></a>简单数据类型的依赖注入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;三国演义&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String book;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;15&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> price;</span><br></pre></td></tr></table></figure>

<p>使用资源文件为数据添加依赖</p>
<p>资源文件（放置在resources中）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=ithm888;</span><br></pre></td></tr></table></figure>

<p>配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置此类为Spring配置类</span></span><br><span class="line"><span class="meta">@Configurable</span></span><br><span class="line"><span class="comment">//设置注解扫描地址</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.ithm&quot;)</span></span><br><span class="line"><span class="comment">//引入资源文件</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Service层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将资源文件中的指定值注入    </span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String book;</span><br></pre></td></tr></table></figure>

<h3 id="注解开发管理第三方bean"><a href="#注解开发管理第三方bean" class="headerlink" title="注解开发管理第三方bean"></a>注解开发管理第三方bean</h3><blockquote>
<p>在开发时时常会用到第三方的bean，而每一个bean都会有对应的一个专用类管理</p>
</blockquote>
<p>例如：</p>
<p>JdbcConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">    DruidDataSource ds=<span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/Spring_db&quot;</span>);</span><br><span class="line">    ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置此类为Spring配置类</span></span><br><span class="line"><span class="meta">@Configurable</span></span><br><span class="line"><span class="comment">//设置注解扫描地址</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.ithm&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="comment">//将第三方bean的配置类引入</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">run</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ApplicationContext ctx=<span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        </span><br><span class="line">        DataSource dataSource=ctx.getBean(DataSource.class);</span><br><span class="line">        System.out.println(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注解开发第三方Bean注入"><a href="#注解开发第三方Bean注入" class="headerlink" title="注解开发第三方Bean注入"></a>注解开发第三方Bean注入</h3><h4 id="简单类型"><a href="#简单类型" class="headerlink" title="简单类型"></a>简单类型</h4><p>专属配置类中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;com.mysql.jdbc.Driver&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;jdbc:mysql://localhost:3306/Spring_db&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        DruidDataSource ds=<span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(passWord);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><p>在注入引用类型时只需要为bean定义方法设置形参</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;com.mysql.jdbc.Driver&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;jdbc:mysql://localhost:3306/Spring_db&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(BookDao bookDao)</span>&#123;</span><br><span class="line">        DruidDataSource ds=<span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(passWord);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="整合——XML和注解开发"><a href="#整合——XML和注解开发" class="headerlink" title="整合——XML和注解开发"></a>整合——XML和注解开发</h3><p><img src="/img/Spring/image-20230301163310820.png" alt="image-20230301163310820" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><h4 id="AOP简介"><a href="#AOP简介" class="headerlink" title="AOP简介"></a>AOP简介</h4><p>AOP：面向切面编程，一种编程范式，指导开发者如何组织程序结构</p>
<p>作用：在不惊动原始设计的情况下为其进行功能增强</p>
<h4 id="AOP核心概念"><a href="#AOP核心概念" class="headerlink" title="AOP核心概念"></a>AOP核心概念</h4><p><img src="/img/Spring/image-20230302115437654.png" alt="image-20230302115437654" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h4 id="AOP入门案例"><a href="#AOP入门案例" class="headerlink" title="AOP入门案例"></a>AOP入门案例</h4><ol>
<li><p>导入AOP相关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>定义dao接口和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dao接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao update...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao delete...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao select...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定义通知类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//定义切入点，当运行到updata这个方法的时候加功能</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将method添加到上面的切入点pt()中</span></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">totalTime</span> <span class="operator">=</span> endTime - startTime;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行万次消耗时间&quot;</span> + totalTime + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定义通知类受Spring容器管理，并定义当前类为切面类</p>
</li>
</ol>
<p>​    注解@Aspect（上面代码的第二行）</p>
<ol start="5">
<li><p>设置Spring对AOP的支持</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="AOP切入点表达式"><a href="#AOP切入点表达式" class="headerlink" title="AOP切入点表达式"></a>AOP切入点表达式</h4><p>可以使用通配符描述切入点，快速描述</p>
<ul>
<li><ul>
<li>：单个独立的任意符号，可以独立出现，已可以作为前缀或者后缀的匹配符出现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execture(<span class="keyword">public</span> * com.itheima.*.UserService.find*(*))</span><br></pre></td></tr></table></figure>

<p>匹配com.itheima包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法</p>
</li>
<li><p>.. ：多个连续的任意符号，可以独立出现，常用于简化包与参数的书写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execture(<span class="keyword">public</span> User com...UserService.findById(..))</span><br></pre></td></tr></table></figure>

<p>匹配com包下的任意包中的UserService类或接口中所有名称为findById的方法</p>
</li>
</ul>
</li>
</ol>
<h4 id="AOP通知类型"><a href="#AOP通知类型" class="headerlink" title="AOP通知类型"></a>AOP通知类型</h4><p>@Before：在原方法之前执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">qian</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我在前！！！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@After：在原方法之后执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@After(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hou</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我在后！！！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Around</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">rao</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我将带头冲锋&quot;</span>);</span><br><span class="line">    <span class="comment">//用来区分原方法之前执行什么之后执行什么</span></span><br><span class="line">    Object ret=pjp.proceed();</span><br><span class="line">    System.out.println(<span class="string">&quot;我将掩护撤退&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="AOP通知获取数据"><a href="#AOP通知获取数据" class="headerlink" title="AOP通知获取数据"></a>AOP通知获取数据</h4><p>日常使用时，经常会用到给的数值需要通过加工或改变，因此AOP中可以通过切面来进行数据的更改和加工</p>
<p>@Before和@After</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">qian</span><span class="params">(JoinPoint jp)</span> &#123;   <span class="comment">/*JoinPoint参数实现拿取参数*/</span></span><br><span class="line">    Object[] args=jp.getArgs();</span><br><span class="line">    System.out.println(Arrays.toString(args));</span><br><span class="line">    System.out.println(<span class="string">&quot;我在前！！！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Around</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">	<span class="comment">//ProceedingJoinPoint继承于JoinPoint因此可以直接使用getArgs属性</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">rao</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    Object[] args= pjp.getArgs();</span><br><span class="line">    System.out.println(Arrays.toString(args));</span><br><span class="line">    args[<span class="number">0</span>]=<span class="number">666</span>;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;我将带头冲锋&quot;</span>);</span><br><span class="line">    Object ret=pjp.proceed(args);</span><br><span class="line">    System.out.println(<span class="string">&quot;我将掩护撤退&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Spring-事务"><a href="#Spring-事务" class="headerlink" title="Spring 事务"></a>Spring 事务</h3><h4 id="事务的基本原理"><a href="#事务的基本原理" class="headerlink" title="事务的基本原理"></a>事务的基本原理</h4><p>Spring事务的本质其实就是数据库对于事务的支持，当我们使用jdbc时就是利用java.sql.Connection对象完成对事务的提交</p>
<blockquote>
<p><strong>事务是一系列的动作，一旦其中有一个动作出现了错误，必须全部回滚。系统将事务中对数据库的所有已完成的操作进行撤销，避免了出现数据不一致而导致的错误。</strong></p>
</blockquote>
<p>服务层接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"><span class="comment">//    1.使用@Transactional在业务层接口上添加Spring事务管理</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in,Double money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JDBC配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*2.在配置类中配置事务管理器*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">    DataSourceTransactionManager transactionManager=<span class="keyword">new</span> 		<span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">    transactionManager.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> transactionManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*3.告诉配置类使用注解式事务管理*/</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="事务相关配置"><a href="#事务相关配置" class="headerlink" title="事务相关配置"></a>事务相关配置</h4><p>在@Transactional()中写</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>readOnly</td>
<td>设置是否为只读事务</td>
<td>readOnly=true 只读事务</td>
</tr>
<tr>
<td>timeout</td>
<td>设置事务超时时间</td>
<td>timeout=-1（永不超时）</td>
</tr>
<tr>
<td>rollbackFor</td>
<td>设置事务回滚异常（class）</td>
<td>rollbackFor={NullPointException.class}</td>
</tr>
<tr>
<td>propagation</td>
<td>设置事务传播行为</td>
<td>……</td>
</tr>
</tbody></table>
<HR>

<p>在使用默认是一个出错所有事务都回滚，而这不能满足我们的要求</p>
<p>例如：银行转账模式，当我们取消转账时仍要添加一个日志说明交易取消这就要保证在sql语句不运行的基础上继续通过service层来添加日志</p>
<p>因此，有了设置事务传播行为的枚举</p>
<table class="md-table"><thead><tr class="md-end-block" cid="n521" mdtype="table_row"><th><span contenteditable="true" class="td-span" cid="n522" mdtype="table_cell"><span md-inline="plain" class="md-plain">传播属性</span></span></th><th><span contenteditable="true" class="td-span" cid="n523" mdtype="table_cell"><span md-inline="plain" class="md-plain">事务管理员</span></span></th><th><span contenteditable="true" class="td-span" cid="n524" mdtype="table_cell"><span md-inline="plain" class="md-plain">事务协调员</span></span></th></tr></thead><tbody><tr class="md-end-block" cid="n525" mdtype="table_row"><td rowspan="2"><span contenteditable="true" class="td-span" cid="n526" mdtype="table_cell"><span md-inline="plain" class="md-plain">REQUIRED(默认)</span></span></td><td><span contenteditable="true" class="td-span" cid="n527" mdtype="table_cell"><span md-inline="plain" class="md-plain">开启T</span></span></td><td><span contenteditable="true" class="td-span" cid="n528" mdtype="table_cell"><span md-inline="plain" class="md-plain">加入T</span></span></td></tr><tr class="md-end-block" cid="n563" mdtype="table_row"><td><span contenteditable="true" class="td-span" cid="n565" mdtype="table_cell"><span md-inline="plain" class="md-plain">无</span></span></td><td><span contenteditable="true" class="td-span" cid="n566" mdtype="table_cell"><span md-inline="plain" class="md-plain">新建T2</span></span></td></tr><tr class="md-end-block" cid="n559" mdtype="table_row"><td rowspan="2"><span contenteditable="true" class="td-span" cid="n560" mdtype="table_cell"><span md-inline="plain" class="md-plain">REQUIRES_NEW</span></span></td><td><span contenteditable="true" class="td-span" cid="n561" mdtype="table_cell"><span md-inline="plain" class="md-plain">开启T</span></span></td><td><span contenteditable="true" class="td-span" cid="n562" mdtype="table_cell"><span md-inline="plain" class="md-plain">新建T2</span></span></td></tr><tr class="md-end-block" cid="n555" mdtype="table_row"><td><span contenteditable="true" class="td-span" cid="n557" mdtype="table_cell"><span md-inline="plain" class="md-plain">无</span></span></td><td><span contenteditable="true" class="td-span" cid="n558" mdtype="table_cell"><span md-inline="plain" class="md-plain">新建T2</span></span></td></tr><tr class="md-end-block" cid="n529" mdtype="table_row"><td rowspan="2"><span contenteditable="true" class="td-span" cid="n530" mdtype="table_cell"><span md-inline="plain" class="md-plain">SUPPORTS</span></span></td><td><span contenteditable="true" class="td-span" cid="n531" mdtype="table_cell"><span md-inline="plain" class="md-plain">开启T</span></span></td><td><span contenteditable="true" class="td-span" cid="n532" mdtype="table_cell"><span md-inline="plain" class="md-plain">加入T</span></span></td></tr><tr class="md-end-block" cid="n533" mdtype="table_row"><td><span contenteditable="true" class="td-span" cid="n535" mdtype="table_cell"><span md-inline="plain" class="md-plain">无</span></span></td><td><span contenteditable="true" class="td-span" cid="n536" mdtype="table_cell"><span md-inline="plain" class="md-plain">无</span></span></td></tr><tr class="md-end-block" cid="n537" mdtype="table_row"><td rowspan="2"><span contenteditable="true" class="td-span" cid="n538" mdtype="table_cell"><span md-inline="plain" class="md-plain">NOT_SUPPORTED</span></span></td><td><span contenteditable="true" class="td-span" cid="n539" mdtype="table_cell"><span md-inline="plain" class="md-plain">开启T</span></span></td><td><span contenteditable="true" class="td-span" cid="n540" mdtype="table_cell"><span md-inline="plain" class="md-plain">无</span></span></td></tr><tr class="md-end-block" cid="n541" mdtype="table_row"><td><span contenteditable="true" class="td-span" cid="n543" mdtype="table_cell"><span md-inline="plain" class="md-plain">无</span></span></td><td><span contenteditable="true" class="td-span" cid="n544" mdtype="table_cell"><span md-inline="plain" class="md-plain">无</span></span></td></tr><tr class="md-end-block" cid="n545" mdtype="table_row"><td rowspan="2"><span contenteditable="true" class="td-span" cid="n546" mdtype="table_cell"><span md-inline="plain" class="md-plain">MANDATORY</span></span></td><td><span contenteditable="true" class="td-span" cid="n547" mdtype="table_cell"><span md-inline="plain" class="md-plain">开启T</span></span></td><td><span contenteditable="true" class="td-span" cid="n548" mdtype="table_cell"><span md-inline="plain" class="md-plain">加入T</span></span></td></tr><tr class="md-end-block" cid="n549" mdtype="table_row"><td><span contenteditable="true" class="td-span" cid="n551" mdtype="table_cell"><span md-inline="plain" class="md-plain">无</span></span></td><td><span contenteditable="true" class="td-span" cid="n552" mdtype="table_cell"><span md-inline="html_inline" class="md-html-inline" spellcheck="false"><span class="md-meta md-before md-raw-inline">&lt;font color="red"&gt;</span><font color="red"><span md-inline="plain" class="md-plain">ERROR</span></font><span class="md-meta md-after md-raw-inline">&lt;/font&gt;</span></span></span></td></tr><tr class="md-end-block" cid="n567" mdtype="table_row"><td rowspan="2"><span contenteditable="true" class="td-span" cid="n568" mdtype="table_cell"><span md-inline="plain" class="md-plain">NEVER</span></span></td><td><span contenteditable="true" class="td-span" cid="n569" mdtype="table_cell"><span md-inline="plain" class="md-plain">开启T</span></span></td><td><span contenteditable="true" class="td-span" cid="n570" mdtype="table_cell"><span md-inline="html_inline" class="md-html-inline" spellcheck="false"><span class="md-meta md-before md-raw-inline">&lt;font color="red"&gt;</span><font color="red"><span md-inline="plain" class="md-plain">ERROR</span></font><span class="md-meta md-after md-raw-inline">&lt;/font&gt;</span></span></span></td></tr><tr class="md-end-block md-focus-container" cid="n571" mdtype="table_row"><td><span contenteditable="true" class="td-span md-focus" cid="n573" mdtype="table_cell"><span md-inline="plain" class="md-plain md-expand">无</span></span></td><td><span contenteditable="true" class="td-span" cid="n574" mdtype="table_cell"><span md-inline="plain" class="md-plain">无</span></span></td></tr><tr class="md-end-block" cid="n575" mdtype="table_row"><td><span contenteditable="true" class="td-span" cid="n576" mdtype="table_cell"><span md-inline="plain" class="md-plain">NESTED</span></span></td><td colspan="2"><span contenteditable="true" class="td-span" cid="n577" mdtype="table_cell"><span md-inline="plain" class="md-plain">设置savePoint，一旦事务回滚，事务将回滚到savePoint处，交给客户响应提交/回滚</span></span></td></tr></tbody></table>

<p>例如：@Transactional(propagation = Propagation.REQUIRES_NEW)</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM整合</title>
    <url>/2023/03/15/SSM%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><h2 id="ssm整合原理"><a href="#ssm整合原理" class="headerlink" title="ssm整合原理"></a>ssm整合原理</h2><p>ssm框架是指Spring（业务层）、SpringMVC（web层）和Mybatis（持久层）将系统分成表现层、controller层、service层、dao层四层从而达到加速开发、简化开发的目的</p>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringMVC_Case<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="架构及文件分布"><a href="#架构及文件分布" class="headerlink" title="架构及文件分布"></a>架构及文件分布</h2><p><img src="/img/SSM%E6%95%B4%E5%90%88/image-20230314092948345.png" alt="image-20230314092948345" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><p>JdbcConfig.java：传递关于数据库的信息，包括地址名字密码等，另外还需要配置事务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        DruidDataSource dds=<span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dds.setDriverClassName(driver);</span><br><span class="line">        dds.setUrl(url);</span><br><span class="line">        dds.setUsername(username);</span><br><span class="line">        dds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        DataSourceTransactionManager dataSourceTransactionManager=<span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Mybatis.java：用来放置Mybatis配置，包括类型包扫描、dao层包扫描</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.mapper.MapperScannerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sfb=<span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sfb.setDataSource(dataSource);</span><br><span class="line">        sfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sfb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        MapperScannerConfigurer msc=<span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ServletConfig.java：servlet的配置类，用来设置由上往下的加载Spring配置，加载SpringMvc和设置那些请求需要经过SpringMvc处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SpringMvcConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;,&quot;com.itheima.config&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SpringConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建pojo文件"><a href="#创建pojo文件" class="headerlink" title="创建pojo文件"></a>创建pojo文件</h2><p>Book.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.domain;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">book</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line">  <span class="keyword">private</span> String type;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> type;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(String type)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.type = type;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> description;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.description = description;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Dao层（连接数据库）"><a href="#Dao层（连接数据库）" class="headerlink" title="Dao层（连接数据库）"></a>Dao层（连接数据库）</h2><p>创建接口BookDao：</p>
<p>其中查询全部返回结果需要一个大的列表所以返回值设为<strong>List&lt;pojo类&gt;</strong></p>
<p>通过id号查找只需要返回一个记录，所以返回值设为一个<strong>pojo类</strong>即可</p>
<p>新增、删除、修改都不需要返回东西，只需要一个展示已经执行成功的信息这件事交给service来办就可以</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Update;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.print.Book;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="comment">/*查询全部*/</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book&quot;)</span></span><br><span class="line">    Boolean <span class="title function_">select</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*通过id号查询*/</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*新增*/</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_book (type,name,description) values (#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*删除*/</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_book where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*修改*/</span></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_book set type=#&#123;type&#125;,name=#&#123;name&#125;,description=#&#123;description&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h2><p>BookService接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.domain.book;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.operations.Bool;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">/*检索所有数据*/</span></span><br><span class="line">    List&lt;Book&gt; <span class="title function_">select</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*通过id查找*/</span></span><br><span class="line">    Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*新增*/</span></span><br><span class="line">    Boolean <span class="title function_">save</span><span class="params">(Book Book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*删除*/</span></span><br><span class="line">    Boolean <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*修改*/</span></span><br><span class="line">    Boolean <span class="title function_">update</span><span class="params">(Book Book)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>BookService实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> com.learn.domain.book;</span><br><span class="line"><span class="keyword">import</span> com.learn.service.BookService;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.operations.Bool;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> BookDao bookDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.select();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">save</span><span class="params">(Book Book)</span> &#123;</span><br><span class="line">        bookDao.save(Book);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        bookDao.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(Book Book)</span> &#123;</span><br><span class="line">        bookDao.update(Book);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="前端接收设置"><a href="#前端接收设置" class="headerlink" title="前端接收设置"></a>前端接收设置</h2><p>在前后端交换数据的过程中，前后端缺乏约定性的格式</p>
<p>对于这个前后端有个约定：</p>
<p>格式为：类似这种</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机理论&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring实战 第5版&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring入门经典教程，深入理解Spring原理技术内幕&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">20011</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>我们后端需要做的就是：</p>
<ol>
<li><p>定义Code，用于设置返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer GET_OK=<span class="number">20011</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer SAVE_OK=<span class="number">20021</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DELETE_OK=<span class="number">20031</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer UPDATE_OK=<span class="number">20041</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer GET_ERR=<span class="number">20010</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer SAVE_ERR=<span class="number">20020</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DELETE_ERR=<span class="number">20030</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer UPDATE_ERR=<span class="number">20040</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定义Result，关于data、code、msg的pojo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">result</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">result</span><span class="params">(Object data, Integer code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">result</span><span class="params">(Object data, Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">result</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>BookController，类似于servlet类用来前后端交互</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.domain.book;</span><br><span class="line"><span class="keyword">import</span> com.learn.service.BookService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> result <span class="title function_">select</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Book&gt; list=bookService.select();</span><br><span class="line">        Integer code=list!=<span class="literal">null</span> ? Code.GET_OK:Code.GET_ERR;</span><br><span class="line">        String msg= list!=<span class="literal">null</span> ? <span class="string">&quot;&quot;</span>:<span class="string">&quot;啥也没查到&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">result</span>(list,code,msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        Book book=bookService.getById(id);</span><br><span class="line">        Integer code=book!=<span class="literal">null</span> ? Code.GET_OK:Code.GET_ERR;</span><br><span class="line">        String msg= book!=<span class="literal">null</span> ? <span class="string">&quot;&quot;</span>:<span class="string">&quot;啥也没查到&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">result</span>(book,code,msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> flag= bookService.save(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">result</span>(flag,flag ? Code.SAVE_OK:Code.SAVE_ERR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> flag= bookService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">result</span>(flag,flag?Code.DELETE_OK:Code.DELETE_ERR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> flag= bookService.update(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">result</span>(flag,flag?Code.UPDATE_OK:Code.UPDATE_ERR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三层架构的调用基本上是这样的</p>
<p>以删除操作为例：</p>
<img src="/img/SSM整合/image-20230314214903545.png" alt="image-20230314214903545" style="zoom: 150%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<h2 id="常见出错"><a href="#常见出错" class="headerlink" title="常见出错"></a>常见出错</h2><ol>
<li>使用maven架构，必须带webapp切记</li>
<li>别忘记在JdbcConfig中设置事务和在service中添加事务</li>
<li>jdbc资源包属性和统一</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Git项目管理</title>
    <url>/2023/03/21/git%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="Git分布式版本控制工具"><a href="#Git分布式版本控制工具" class="headerlink" title="Git分布式版本控制工具"></a>Git分布式版本控制工具</h1><h2 id="Git下载和安装"><a href="#Git下载和安装" class="headerlink" title="Git下载和安装"></a>Git下载和安装</h2><p> <a href="https://git-scm.com/">Git (git-scm.com)</a></p>
<p><img src="/img/git%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/image-20230321092419566.png" alt="image-20230321092419566" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>下载后安装：</p>
<p><img src="/img/git%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/e1bba68d04694d5fb98bc92500a6b013.png" alt="在这里插入图片描述" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/git%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/dd6fab0c1ae049729a7df0105c8951f4.png" alt="在这里插入图片描述" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>安装后在桌面右击出现</p>
<p><img src="/img/git%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/image-20230321093344175.png" alt="image-20230321093344175" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>表示安装成功！！！</p>
<p>备注：Git GUI Here：Git提供的图形界面工具</p>
<p>​          Git Bash：Git提供的命令行工具</p>
<h2 id="Git配置及常用命令"><a href="#Git配置及常用命令" class="headerlink" title="Git配置及常用命令"></a>Git配置及常用命令</h2><h3 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h3><p>git config –global user.name “ljs”</p>
<p>git config –global user.email “<a href="mailto:&#100;&#x66;&#97;&#100;&#102;&#97;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d;">&#100;&#x66;&#97;&#100;&#102;&#97;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d;</a>“</p>
<h3 id="获取本地仓库"><a href="#获取本地仓库" class="headerlink" title="获取本地仓库"></a>获取本地仓库</h3><p>要使用Git对我们的代码进行版本控制，首先需要获得本地仓库</p>
<ol>
<li>在电脑某位置创建一个空目录作为本地的Git仓库</li>
<li>进入这个目录中，右键点击Git bash窗口</li>
<li>执行命令git init</li>
</ol>
<h3 id="Git工作流程图"><a href="#Git工作流程图" class="headerlink" title="Git工作流程图"></a>Git工作流程图</h3><p><img src="/img/git%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/image-20230321105722423.png" alt="image-20230321105722423" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="基础操作指令"><a href="#基础操作指令" class="headerlink" title="基础操作指令"></a>基础操作指令</h3><h4 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h4><p>git add .（工作区–&gt;暂存区）</p>
<p>git commit（暂存区–&gt;本地仓库）</p>
<h4 id="查看修改的状态"><a href="#查看修改的状态" class="headerlink" title="查看修改的状态"></a>查看修改的状态</h4><p>git status</p>
<p>作用：查看修改的状态</p>
<h4 id="添加工作区到暂存区"><a href="#添加工作区到暂存区" class="headerlink" title="添加工作区到暂存区"></a>添加工作区到暂存区</h4><p>git add 单个文件名 通配符</p>
<p>作用：添加工作区一个或多个文件的修改到暂存区</p>
<h4 id="提交暂存区到本地仓库"><a href="#提交暂存区到本地仓库" class="headerlink" title="提交暂存区到本地仓库"></a>提交暂存区到本地仓库</h4><p>git commitm ‘注释内容’</p>
<p>作用：提交暂存区内容到本地仓库的当前分支</p>
<h4 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h4><p>git log [option]</p>
<p>​    options：</p>
<pre><code>        * --all 显示所有分支
        * --pretty=oneline 将提示信息显示为一行
        * --abbrev-commit 使得输出的commitId更简短
        * --graph 以图的形式显示
</code></pre>
<p>示例：git log –pretty=oneline –all –graph –abbrev-commit</p>
<h4 id="为常用配置设置别名"><a href="#为常用配置设置别名" class="headerlink" title="为常用配置设置别名"></a>为常用配置设置别名</h4><p>有时候命令太长一个字一个字输入太麻烦，可以为他取个别名到时候输入别名就相当于输了这个长命令。例如上面的那句示例可以这样写：</p>
<p>alias git-log=’git log –pretty=oneline –all –graph –abbrev-commit’</p>
<p>这样就只需输入git-log就能简介明了查看提交记录</p>
<h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><p>git reset ID名 –hard</p>
<h3 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>git branch 分支名</p>
<h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><p>git branch</p>
<h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><p>git checkout 分支名</p>
<h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p>一个分支上的提交可以合并到另一个分支</p>
<p>git merge 分支名称</p>
<h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><p>git branch -d b1 删除分支时，需要做各种检查<br>       git branch -D b1 不做任何检查，强制删除</p>
<h4 id="开发时分支使用原则与流程"><a href="#开发时分支使用原则与流程" class="headerlink" title="开发时分支使用原则与流程"></a>开发时分支使用原则与流程</h4><p>在开发时，一般如下分支使用原则与流程</p>
<ul>
<li><p>master （生产）  分支 </p>
<p>线上分支，主分支，中小规模项目作为线上运行的应用对应的分支； </p>
</li>
<li><p>develop（开发）分支 </p>
<p>是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线 要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支,准备上线。 </p>
</li>
<li><p>feature/xxxx分支 </p>
<p>从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完 成后合并到develop分支。 </p>
</li>
<li><p>hotﬁx/xxxx分支， </p>
<p>从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、test、 develop分支。 </p>
</li>
<li><p>还有一些其他分支，在此不再详述，例如test分支（用于代码测试）、pre分支（预上线分支）等 等。</p>
</li>
</ul>
<h2 id="Git远程仓库"><a href="#Git远程仓库" class="headerlink" title="Git远程仓库"></a>Git远程仓库</h2><h3 id="操作远程仓库"><a href="#操作远程仓库" class="headerlink" title="操作远程仓库"></a>操作远程仓库</h3><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><p>此操作实现初始化本地库，然后与已创建的远程库进行对接</p>
<p>git remote add &lt;远端名称&gt; &lt;仓库路径&gt;</p>
<ul>
<li>远程名称：默认为origin</li>
<li>仓库路径，从远端服务器获取此URL</li>
</ul>
<h4 id="查看远端仓库"><a href="#查看远端仓库" class="headerlink" title="查看远端仓库"></a>查看远端仓库</h4><p>git remote</p>
<h4 id="推送至远端仓库"><a href="#推送至远端仓库" class="headerlink" title="推送至远端仓库"></a>推送至远端仓库</h4><p>git push [-f] [–set-upstream] [远端名称 [:远端分支名] ]</p>
<ul>
<li>如果远程分支名和本地分支名称相同，则可以只写本地分支 <ul>
<li>git push origin master </li>
</ul>
</li>
<li>-f 表示强制覆盖 </li>
<li>–set-upstream 推送到远端的同时并且建立起和远端分支的关联关系。 <ul>
<li>git push –set-upstream origin master </li>
</ul>
</li>
<li>如果当前分支已经和远端分支关联，则可以省略分支名和远端名。 <ul>
<li>git push 将master分支推送到已关联的远端分支。</li>
</ul>
</li>
</ul>
<h4 id="在远端仓库克隆"><a href="#在远端仓库克隆" class="headerlink" title="在远端仓库克隆"></a>在远端仓库克隆</h4><p>如果已经有一个远端仓库，我们可以直接clone到本地。 </p>
<ul>
<li>命令: git clone &lt;仓库路径&gt; [本地目录] <ul>
<li>本地目录可以省略，会自动生成一个目录</li>
</ul>
</li>
</ul>
<h3 id="在idea中使用Git"><a href="#在idea中使用Git" class="headerlink" title="在idea中使用Git"></a>在idea中使用Git</h3><ol>
<li>在idea中配置Git</li>
</ol>
<p>选择File→Settings打开设置窗口，找到Version Control下的git选项：</p>
<p><img src="/img/git%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/image-20230321160621091.png" alt="image-20230321160621091" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ol start="2">
<li><p>初始化本地仓库</p>
<p><img src="/img/git%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/image-20230321160742317.png" alt="image-20230321160742317" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>设置远程仓库</p>
<p><img src="/img/git%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/image-20230321161515149.png" alt="image-20230321161515149" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ol>
<p><img src="/img/git%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/image-20230321161535006.png" alt="image-20230321161535006" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ol start="4">
<li><p>推送到远程仓库</p>
<p><img src="/img/git%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/image-20230321162004818.png" alt="image-20230321162004818" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>克隆远程仓库到本地</p>
<p><img src="/img/git%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/image-20230321162036941.png" alt="image-20230321162036941" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>创建分支</p>
<p>最常规的方法</p>
</li>
</ol>
<p><img src="/img/git%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/image-20230321162310256.png" alt="image-20230321162310256" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>​        最强大的方法</p>
<p><img src="/img/git%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/image-20230321162319282.png" alt="image-20230321162319282" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2023/03/21/SpringMVC/</url>
    <content><![CDATA[<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><h2 id="什么是SpringMVC"><a href="#什么是SpringMVC" class="headerlink" title="什么是SpringMVC"></a>什么是SpringMVC</h2><p>SpringMVC是Spring提供的一个基于MVC设计模式的轻量级WEB开发框架，本质上相当于Servlet。</p>
<h2 id="SpringMVC快速入门"><a href="#SpringMVC快速入门" class="headerlink" title="SpringMVC快速入门"></a>SpringMVC快速入门</h2><ol>
<li><p>导入相应的jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建SpringMVC控制器类（等同于java中的servlet）</p>
<p>UserController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    2.定义controller</span></span><br><span class="line"><span class="comment">//    2.1使用@Controller定义bean，这是做SpringMVC专用的注解</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="comment">//    2.2设置当前操作的访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="comment">//    2.3设置当前操作返回什么</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>初始化SpringMVC环境（同Spring环境）就是声明方法不一样，设定springMVC加载对应的bean</p>
<p>SpringMvcConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.创建springmvc的配置文件，加载controller对应的bean</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.learn.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理的请求</p>
<p>ServletContainerInitConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.定义一个servlet容器启动的配置类，在里面加载spring的配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainerInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line"><span class="comment">//    加载springmvc容器配置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        告诉tomcat记得加载spring的配置</span></span><br><span class="line">        AnnotationConfigWebApplicationContext ctx=<span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        ctx.register(SpringMvcConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    设置哪些请求归属springMVC处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    加载spring容器配置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="bean加载控制"><a href="#bean加载控制" class="headerlink" title="bean加载控制"></a>bean加载控制</h2><blockquote>
<p>在加载项目时默认是Spring接管整个项目，这会使得原本属于SpringMVC的bean被Spring错加载，因此我们需要通过对bean的控制使得SpringMVC获取到他应当使用的bean</p>
</blockquote>
<ul>
<li>对于SpringMVC相关的bean加载控制：</li>
</ul>
<p>​        SpringMVC所要加载的bean均在com.learn.controller</p>
<ul>
<li><p>对于Spring相关的bean加载控制</p>
<ul>
<li><p>方法一：Spring加载的bean设定扫描范围为com.learn排除掉中间的controller</p>
<p>在Spring配置类中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;com.learn.service&quot;,&quot;com.learn.dao&quot;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>方法二：Spring加载的bean设定扫描范围为精准范围，例如service包、dao包等</p>
<p>在Spring配置类中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//excludeFilters:排除指定的路径的bean，需要指定类型（type）和具体项（classes）</span></span><br><span class="line"><span class="comment">//includeFilters：加载指定的bean，需要指定类型（type）和具体项（classes）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.learn&quot;, excludeFilters = @ComponentScan.Filter(</span></span><br><span class="line"><span class="meta">        type = FilterType.ANNOTATION,</span></span><br><span class="line"><span class="meta">        classes = Controller.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure></li>
<li><p>方法三：不区分Spring和SpringMVC，加载在同一个环境中</p>
<p>ServletContainerInitConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.定义一个servlet容器启动的配置类，在里面加载spring的配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainerInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line"><span class="comment">//    加载springmvc容器配置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        告诉tomcat记得加载spring的配置</span></span><br><span class="line">        AnnotationConfigWebApplicationContext ctx=<span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        ctx.register(SpringMvcConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    设置哪些请求归属springMVC处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    加载spring容器配置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        AnnotationConfigWebApplicationContext ctx=<span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        ctx.register(SpringConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简化开发：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainerInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><h3 id="请求映射路径"><a href="#请求映射路径" class="headerlink" title="请求映射路径"></a>请求映射路径</h3><p>当两个方法使用一个名字就会报错所以我们在写路径时一定注意区分</p>
<p>将@RequestMapping放在外边就是路径前缀</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;book&#x27;,&#x27;sanguo&#x27;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>路径就等同于<a href="http://localhost/book/save">http://localhost/book/save</a></p>
<h3 id="get和post请求"><a href="#get和post请求" class="headerlink" title="get和post请求"></a>get和post请求</h3><ul>
<li><p>get请求传参</p>
<p>普通传参：通过URL地址传参，地址参数名和形参参数名一致即可接收到</p>
<p><img src="/img/SpringMvc/image-20230308163033256.png" alt="image-20230308163033256" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通参数传递name：&quot;</span>+name);</span><br><span class="line">        System.out.println(<span class="string">&quot;普通参数传递age：&quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;book&#x27;,&#x27;sanguo&#x27;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>post请求传参</p>
<p>普通传参：通过请求体传参，要求表单参数名和形参变量名一致</p>
<p><img src="/img/SpringMvc/image-20230308163121466.png" alt="image-20230308163121466" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通参数传递name：&quot;</span>+name);</span><br><span class="line">        System.out.println(<span class="string">&quot;普通参数传递age：&quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;book&#x27;,&#x27;sanguo&#x27;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="五种参数传递"><a href="#五种参数传递" class="headerlink" title="五种参数传递"></a>五种参数传递</h3><h4 id="pojo传递"><a href="#pojo传递" class="headerlink" title="pojo传递"></a>pojo传递</h4><blockquote>
<p>如果我们接收的表单信息太多，按照上面的方法就要在形参列表中放置大量的变量，而这无疑会大大增加我们的代码量，针对这种情况我们可以使用<strong>pojo参数传递解决</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    2.定义controller</span></span><br><span class="line"><span class="comment">//    2.1使用@Controller定义bean这是做SpringMVC专用的注解</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="comment">//    2.2设置当前操作的访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="comment">//    2.3设置当前操作的返回值类型</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//得到结果：User[name=&#x27;张三&#x27;, age=21]</span></span><br></pre></td></tr></table></figure>

<p><em>注：其中User是pojo类</em></p>
<h4 id="嵌套pojo参数"><a href="#嵌套pojo参数" class="headerlink" title="嵌套pojo参数"></a>嵌套pojo参数</h4><p>所谓嵌套pojo就是在pojo中还放着引用类型对象，例如User里有name、age和Address，Address中有city和province</p>
<p><img src="/img/SpringMvc/image-20230308180746109.png" alt="image-20230308180746109" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="comment">//    2.2设置当前操作的访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="comment">//    2.3设置当前操作的返回值类型</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：User[name=’Zhang’, age=20, address=Address[province=’HeBei’, city=’BaoDing’]]</p>
<h4 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h4><p>解决复选框问题，只需要在前端将复选框名字命名成一个，就可以把得到的数据组合成数组</p>
<p><img src="/img/SpringMvc/image-20230308181751831.png" alt="image-20230308181751831" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="comment">//    2.2设置当前操作的访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="comment">//    2.3设置当前操作的返回值类型</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(String[] likes)</span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(likes));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：[Zhang, 20, BaoDing, HeBei]</p>
<h4 id="集合参数"><a href="#集合参数" class="headerlink" title="集合参数"></a>集合参数</h4><p>用法和上面差不多</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="comment">//    2.2设置当前操作的访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="comment">//    2.3设置当前操作的返回值类型</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">        System.out.println(likes);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：[Zhang, 20, BaoDing, HeBei]</p>
<h4 id="JSON数据传递参数"><a href="#JSON数据传递参数" class="headerlink" title="JSON数据传递参数"></a>JSON数据传递参数</h4><ol>
<li>首先引入需要的jar包</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>接收数据</p>
<p><strong>注意接受josn数据需要将@RequestParam更换成@RequestBody</strong></p>
<ol>
<li><p>JOSN数组</p>
<p><img src="/img/SpringMvc/image-20230309112212659.png" alt="image-20230309112212659" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="comment">//    2.2设置当前操作的访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="comment">//    2.3设置当前操作的返回值类型</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; list)</span>&#123;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接收到的数据：[game, music, travel]</p>
</li>
<li><p>JSON对象（pojo）</p>
<p><img src="/img/SpringMvc/image-20230309112918998.png" alt="image-20230309112918998" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>得到结果：User[name=’zhangsan’, age=15, address=null]</p>
<ol start="3">
<li><p>JSON数组（pojo）</p>
<p><img src="/img/SpringMvc/image-20230309114437572.png" alt="image-20230309114437572" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="comment">//    2.2设置当前操作的访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="comment">//    2.3设置当前操作的返回值类型</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; list)</span>&#123;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到的结果：[User[name=’zhangsan’, age=15, address=null], User[name=’lisi’, age=18, address=null]]</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="日期型参数传递"><a href="#日期型参数传递" class="headerlink" title="日期型参数传递"></a>日期型参数传递</h3><p><img src="/img/SpringMvc/image-20230309121910246.png" alt="image-20230309121910246" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="comment">//    2.2设置当前操作的访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="comment">//    2.3设置当前操作的返回值类型</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(Date date, <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-mm-dd&quot;)</span> Date date2)</span>&#123;</span><br><span class="line">        System.out.println(date+<span class="string">&quot;+&quot;</span>+date2);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><h4 id="跳转页面"><a href="#跳转页面" class="headerlink" title="跳转页面"></a>跳转页面</h4><p>只需要在原基础上删掉@ResponseBody </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    2.定义controller</span></span><br><span class="line"><span class="comment">//    2.1使用@Controller定义bean这是做SpringMVC专用的注解</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="comment">//    2.2设置当前操作的访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="comment">//    2.3设置当前操作的返回值类型</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(Date date, <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-mm-dd&quot;)</span> Date date2)</span>&#123;</span><br><span class="line">        System.out.println(date+<span class="string">&quot;+&quot;</span>+date2);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="响应返回JSON数据"><a href="#响应返回JSON数据" class="headerlink" title="响应返回JSON数据"></a>响应返回JSON数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;itcat&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">15</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前端接到的返回数据：{“name”:”itcat”,”age”:15,”address”:null}</p>
<h2 id="REST风格"><a href="#REST风格" class="headerlink" title="REST风格"></a>REST风格</h2><p>REST：表现形式状态转换</p>
<ul>
<li>传统风格资源描述形式：<ul>
<li><a href="http://llocalhost/user/getById?id=1">http://llocalhost/user/getById?id=1</a></li>
<li><a href="http://llocalhost/user/saveUser">http://llocalhost/user/saveUser</a></li>
</ul>
</li>
<li>REST风格描述形式<ul>
<li><a href="http://llocalhost/user/1">http://llocalhost/user/1</a></li>
<li><a href="http://llocalhost/user">http://llocalhost/user</a></li>
</ul>
</li>
</ul>
<p>优点：1. 隐藏资源的访问行为，无法通过地址得知对资源是什么操作</p>
<p>​           2. 书写简化</p>
<h3 id="REST风格操作"><a href="#REST风格操作" class="headerlink" title="REST风格操作"></a>REST风格操作</h3><p>REST按照访问资源的路径和行为动作来区分资源进行了何种操作</p>
<table>
<thead>
<tr>
<th>网址</th>
<th>想要的操作</th>
<th>行为</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://localhost/users">http://localhost/users</a></td>
<td>查询全部用户信息</td>
<td>GET查询</td>
</tr>
<tr>
<td><a href="http://localhost/users/1">http://localhost/users/1</a></td>
<td>查询指定用户信息</td>
<td>GET查询</td>
</tr>
<tr>
<td><a href="http://localhost/users">http://localhost/users</a></td>
<td>添加用户信息</td>
<td>POST（新增/保存）</td>
</tr>
<tr>
<td><a href="http://localhost/users">http://localhost/users</a></td>
<td>修改用户信息</td>
<td>PUT（修改/更新）</td>
</tr>
<tr>
<td><a href="http://localhost/users/1">http://localhost/users/1</a></td>
<td>删除用户信息</td>
<td>DELETE（删除）</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">/**/</span></span><br><span class="line"><span class="comment">    <span class="doctag">@RequestMapping</span>(value = &quot;/users&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="comment">    <span class="doctag">@ResponseBody</span></span></span><br><span class="line"><span class="comment">    public String save()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;user save ...&quot;);</span></span><br><span class="line"><span class="comment">        return &quot;&#123;&#x27;module&#x27;:&#x27;user save&#x27;&#125;&quot;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    /*删除*/</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user delete ...&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*添加*/</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save ...&quot;</span>+user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user update&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*通过id查找*/</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user delete ...&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getById&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*查找全部*/</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user getAll ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h2><p>在运行springmvc时，难免会出现各种各样的错误，并且每一层都会出错。我们不能向前端传输一个500或者404错误吧。因此我们可以<em><strong>让各层都暂时将错误抛出，把错误都放在最上层也就是表现层统一处理，但是如果每一个都try…catch的话代码就会变得臃肿。</strong></em></p>
<blockquote>
<p>表现层处理异常，每个方法中单独书写，代码书写量巨大且意义不大，如何解决——<strong>AOP思想</strong></p>
</blockquote>
<p>SpringMvc为我们自动提供了一个异常处理器：</p>
<p>在表现层中创建ProjectExceptionAdvice类做异常处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;嘿嘿，异常你哪里跑&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="literal">null</span>,<span class="number">666</span>,<span class="string">&quot;null&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>届时页面就会显示：</p>
<p>{</p>
<p>  “data”: null,</p>
<p>  “code”: 666,</p>
<p>  “msg”: “null”</p>
<p>}</p>
<h2 id="项目异常处理方案"><a href="#项目异常处理方案" class="headerlink" title="项目异常处理方案"></a>项目异常处理方案</h2><ol>
<li>业务异常：例如用户没有按照规定写密码格式却能进入后台，而我们没有做对应的处理<ul>
<li>发送对应消息传递给用户，提醒规范操作</li>
</ul>
</li>
<li> 系统异常：例如服务器宕机或者用户网络问题</li>
</ol>
<ul>
<li>发送固定消息传递给用户，安抚用户</li>
<li><span style="color:gray">发送特定消息给运维人员，提醒维护</span></li>
<li><span style="color:gray">记录日志</span></li>
</ul>
<ol start="3">
<li>其他异常<ul>
<li>发送固定消息传递给用户，安抚用户</li>
<li><span style="color:gray">发送特定消息给编程人员，提醒维护（纳入预期范围内）</span></li>
<li><span style="color:gray">记录日志</span></li>
</ul>
</li>
</ol>
<h3 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h3><ol>
<li><p>在com.learn下创建exception文件夹，用来放置错误类</p>
<p>系统错误：SystemException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code,String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>业务错误：BusinessException.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code,String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在controller中创建错误处理类ProjectExceptionAdvice.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.Exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> com.learn.Exception.SystemException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(SystemException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">system</span><span class="params">(SystemException ex)</span>&#123;</span><br><span class="line">        Integer code=ex.getCode();</span><br><span class="line">        String msg=ex.getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">business</span><span class="params">(BusinessException ex)</span>&#123;</span><br><span class="line">        Integer code=ex.getCode();</span><br><span class="line">        String msg=ex.getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在可能出现异常的地方抛走异常</p>
<p>例如在表现层BookController中抛出异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">    Book book=bookService.getById(id);</span><br><span class="line">    Integer code=book!=<span class="literal">null</span> ? Code.GET_OK:Code.GET_ERR;</span><br><span class="line">    String msg=book!=<span class="literal">null</span> ? <span class="string">&quot;&quot;</span>:<span class="string">&quot;查询失败请重试&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(id==<span class="number">1</span>)&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;请不要用你的技术挑战我们的耐性&quot;</span>,Code.BUSINESS_ERR);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> /<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(<span class="string">&quot;不好意思是我们的系统错误&quot;</span>,e,Code.SYSTEM_ERR);</span><br><span class="line">   &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(book,code,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="让SpringMVC接管前端"><a href="#让SpringMVC接管前端" class="headerlink" title="让SpringMVC接管前端"></a>让SpringMVC接管前端</h2><ol>
<li>需要在config中创建SpringMvcSupport</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//表示将请求放在某个特定的位置</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/css/**&quot;</span>).addResourceLocations(<span class="string">&quot;/css/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/js/**&quot;</span>).addResourceLocations(<span class="string">&quot;/js/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/plugins/**&quot;</span>).addResourceLocations(<span class="string">&quot;/plugins/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在SpringMvcConfig的@ComponentScan注解中添加com.learn.config让SpringMVC能扫描到</li>
</ol>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="拦截器概念"><a href="#拦截器概念" class="headerlink" title="拦截器概念"></a>拦截器概念</h3><p>拦截器是一种动态拦截方法调用的机制</p>
<p>作用：</p>
<pre><code>1. 在指定的方法调用前后执行预先设定后的代码
1. 阻止原始方法的执行
</code></pre>
<h3 id="拦截器与过滤器的区别"><a href="#拦截器与过滤器的区别" class="headerlink" title="拦截器与过滤器的区别"></a>拦截器与过滤器的区别</h3><p>归属不同：Filter属于servlet技术，Interceptor属于SpringMVC技术</p>
<p>拦截内容不同：Filter对所有访问进行增强，Interceptor仅针对SpringMVC的访问进行增强</p>
<h3 id="执行时机"><a href="#执行时机" class="headerlink" title="执行时机"></a>执行时机</h3><p><img src="/img/SpringMvc/image-20230317171742518.png" alt="image-20230317171742518" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="拦截器的入门案例"><a href="#拦截器的入门案例" class="headerlink" title="拦截器的入门案例"></a>拦截器的入门案例</h3><ol>
<li><p>在com/itheima/controller/interceptor下声明拦截器的bean（ProjectInterceptor.java），并且实现HandlerInterceptor接口（注意：扫描加载bean）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle...&quot;</span>);</span><br><span class="line">        <span class="comment">//这里如果是false表示直接拦截，即直接退出</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在SpringMvcConfig中实现WebMvcConfigurer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.controller.interceptor.ProjectInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;,&quot;com.itheima.config&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//可以添加多个拦截路径</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="拦截器三个方法的具体参数"><a href="#拦截器三个方法的具体参数" class="headerlink" title="拦截器三个方法的具体参数"></a>拦截器三个方法的具体参数</h3><h4 id="前置处理"><a href="#前置处理" class="headerlink" title="前置处理"></a>前置处理</h4></li>
</ol>
<p><img src="/img/SpringMvc/image-20230317181003056.png" alt="image-20230317181003056" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>参数<ul>
<li>request：请求对象，可以拿取请求的数据</li>
<li>response：响应对象，可以设置响应的数据</li>
<li>handler：被调用的处理器对象，本质上是一个对象中的方法，对反射技术中的Method对象进行在封装，也就是说可以通过这个调用处理器对象中的方法</li>
</ul>
</li>
<li>返回值<ul>
<li>true表示继续执行</li>
<li>false表示终止执行</li>
</ul>
</li>
</ul>
<h4 id="后置处理"><a href="#后置处理" class="headerlink" title="后置处理"></a>后置处理</h4><p><img src="/img/SpringMvc/image-20230317181616923.png" alt="image-20230317181616923" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>参数</p>
<ul>
<li>​    ModelAndView：如果处理器执行完成具有返回结果，可以读取到对应的数据和页面信息，并进行跳转之类的调整</li>
</ul>
<h4 id="完成后处理"><a href="#完成后处理" class="headerlink" title="完成后处理"></a>完成后处理</h4><p><img src="/img/SpringMvc/image-20230317181843432.png" alt="image-20230317181843432" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>参数</p>
<ul>
<li>ex：如果处理器执行过程中出现异常，可以针对异常情况进行单独处理</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-Plus</title>
    <url>/2023/09/18/Mybatis-Plus/</url>
    <content><![CDATA[<h1 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h1><h2 id="Mybatis-Plus介绍"><a href="#Mybatis-Plus介绍" class="headerlink" title="Mybatis-Plus介绍"></a>Mybatis-Plus介绍</h2><p>mybatis-plus是一个Mybatis的增强工具，在Mybatis的基础上只做增强不做改变，为简化开发提高效率而生。</p>
<p>官网：<a href="https://baomidou.com/">https://baomidou.com/</a></p>
<h2 id="基础增删改查"><a href="#基础增删改查" class="headerlink" title="基础增删改查"></a>基础增删改查</h2><blockquote>
<p>mybatis-plus作为一个简化mybatis开发的增强工具，他到底增强到哪了？</p>
<p>首先我们之前在dao层中需要书写大量的sql语句来执行增删改查操作。但是用mybatis-plus就完全不必我们只需要继承一个*BaseMapper&lt;？&gt;*接口其中问号是pojo类对象</p>
</blockquote>
<p>现在我们的Mapper层可以这样写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Service层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Service层实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper usermapper;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        User user=usermapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>pojo类User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/Mybatis-plus/image-20230326153619922.png" alt="image-20230326153619922" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="分页功能实现"><a href="#分页功能实现" class="headerlink" title="分页功能实现"></a>分页功能实现</h2><h3 id="分页拦截器实现"><a href="#分页拦截器实现" class="headerlink" title="分页拦截器实现"></a>分页拦截器实现</h3><ol>
<li><p>设置分页拦截器作为Spring管理的bean</p>
<p>MybatisPlusConfig</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        MybatisPlusInterceptor mybatisPlusInterceptor=<span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetByPage</span><span class="params">()</span>&#123;</span><br><span class="line">    IPage page=<span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    userDao.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页码值：&quot;</span>+page.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">&quot;每页显示数：&quot;</span>+page.getSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;一共多少页：&quot;</span>+page.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;一共多少条数据：&quot;</span>+page.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;数据：&quot;</span>+page.getRecords());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PageHelper实现"><a href="#PageHelper实现" class="headerlink" title="PageHelper实现"></a>PageHelper实现</h3><ol>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>调用pagehelper</p>
<p>controller</p>
<blockquote>
<p>注意：PageHelper.startPage的后面必须直接接上查询，否则会出现添加limit的情况</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在调用数据库的方法之前调用pageHelper方法</span></span><br><span class="line">PageHelper.startPage(page,size);	<span class="comment">//pageHelp的方法，参数分别为第几页和每页显示几条数据</span></span><br><span class="line"><span class="comment">//调用数据库的查询语句</span></span><br><span class="line">List&lt;MeetingRoom&gt; meetingRooms = meetingRoomService.findAllMeetingRoom();</span><br><span class="line"><span class="type">PageInfo</span> <span class="variable">pageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageInfo</span>(meetingRooms);</span><br></pre></td></tr></table></figure></li>
<li><p>pagehelper中常用的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当前页</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> pageNum;</span><br><span class="line"><span class="comment">//每页的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> pageSize;</span><br><span class="line"><span class="comment">//当前页的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"><span class="comment">//当前页面第一个元素在数据库中的行号</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> startRow;</span><br><span class="line"><span class="comment">//当前页面最后一个元素在数据库中的行号</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> endRow;</span><br><span class="line"><span class="comment">//总记录数</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> total;</span><br><span class="line"><span class="comment">//总页数</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> pages;  </span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="多条件查询（querywapper）"><a href="#多条件查询（querywapper）" class="headerlink" title="多条件查询（querywapper）"></a>多条件查询（querywapper）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明接口LambdaQueryWrapper</span></span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lqw=<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//采用流式编程设置条件</span></span><br><span class="line"><span class="comment">//查询年龄大于23或者小于20的</span></span><br><span class="line">lqw.gt(User::getAge,<span class="number">23</span>).or().lt(User::getAge,<span class="number">20</span>);</span><br><span class="line">List&lt;User&gt; userlist=userDao.selectList(lqw);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询年龄在23到20中间的</span></span><br><span class="line">lqw.between(User::getAge,<span class="number">20</span>,<span class="number">23</span>);</span><br><span class="line">List&lt;User&gt; userlist=userDao.selectList(lqw);</span><br><span class="line">System.out.println(userlist);</span><br></pre></td></tr></table></figure>

<h3 id="解决用户设置数据为空的问题"><a href="#解决用户设置数据为空的问题" class="headerlink" title="解决用户设置数据为空的问题"></a>解决用户设置数据为空的问题</h3><p>问题概述：在用户选择时，有可能选择多少多少以下的或者多少多少以上的，则条件查询中的另外一个查询条件就不需要</p>
<p>要想实现就要先创建一个模型类user2用来规定最低数量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User2</span> <span class="keyword">extends</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在测试类中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User2 user2=<span class="keyword">new</span> <span class="title class_">User2</span>();</span><br><span class="line">user2.setAge(<span class="number">32</span>);</span><br><span class="line">user2.setAge2(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lqw=<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line"><span class="comment">//第一个参数是判断是否执行</span></span><br><span class="line">lqw.lt(<span class="literal">null</span> != user2.getAge2(), User::getAge,<span class="number">23</span>).gt(User::getAge,<span class="number">20</span>);</span><br><span class="line">List&lt;User&gt; userlist=userDao.selectList(lqw);</span><br><span class="line">System.out.println(userlist);</span><br></pre></td></tr></table></figure>

<h3 id="DQL编程控制"><a href="#DQL编程控制" class="headerlink" title="DQL编程控制"></a>DQL编程控制</h3><h4 id="查询结果中包含pojo类中的属性"><a href="#查询结果中包含pojo类中的属性" class="headerlink" title="查询结果中包含pojo类中的属性"></a>查询结果中包含pojo类中的属性</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;User&gt; lqw=<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">lqw.select(User::getId,User::getName,User::getAge);</span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; userlist=userDao.selectMaps(lqw);</span><br><span class="line">System.out.println(userlist);</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<p>[{name=蔡徐坤, id=0, age=12}, {name=陈立农, id=1, age=20}, {name=范丞丞, id=2, age=23}, {name=黄明昊, id=3, age=22}, {name=林彦俊, id=4, age=22}, {name=朱正廷, id=5, age=25}, {name=王子异, id=6, age=21}, {name=王琳凯, id=7, age=22}, {name=尤长靖, id=8, age=23}]</p>
<h4 id="查询结果中包含pojo未定义的属性"><a href="#查询结果中包含pojo未定义的属性" class="headerlink" title="查询结果中包含pojo未定义的属性"></a>查询结果中包含pojo未定义的属性</h4><p>示例：相同的值分组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; lqw=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">lqw.select(<span class="string">&quot;count(*) as count,age&quot;</span>);</span><br><span class="line">lqw.groupBy(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; userlist=userDao.selectMaps(lqw);</span><br><span class="line">System.out.println(userlist);</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<p>[{count=1, age=12}, {count=1, age=20}, {count=1, age=21}, {count=3, age=22}, {count=2, age=23}, {count=1, age=25}]</p>
<h3 id="登录注册验证"><a href="#登录注册验证" class="headerlink" title="登录注册验证"></a>登录注册验证</h3><p>示例：查询名字是陈立农密码123的用户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;User&gt; lqw=<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">lqw.eq(User::getName,<span class="string">&quot;陈立农&quot;</span>).eq(User::getPassword,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">User loginUser=userDao.selectOne(lqw);</span><br><span class="line">System.out.println(loginUser);</span><br></pre></td></tr></table></figure>

<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">lqw.likeLeft(User::getName,<span class="string">&quot;蔡徐坤&quot;</span>);</span><br><span class="line"><span class="comment">//.likeRight是查以什么为结尾的</span></span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure>

<h2 id="映射pojo匹配兼容"><a href="#映射pojo匹配兼容" class="headerlink" title="映射pojo匹配兼容"></a>映射pojo匹配兼容</h2><p>如果数据库表名和pojo类名称不一样怎么办？如果pojo类中的数据名和数据库中的数据名不一致怎么办？如果pojo类中存在表中没有的元素怎么办？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解决表名不一致</span></span><br><span class="line"><span class="meta">@TableName(&quot;tbl_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//解决生成id长度丢失问题</span></span><br><span class="line">    <span class="meta">@JsonSerialize(using = ToStringSerializer.class)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//解决字段名不一致</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;pwd&quot;,select = false)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="comment">//解决有多余的属性</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> online;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ID生成策略控制"><a href="#ID生成策略控制" class="headerlink" title="ID生成策略控制"></a>ID生成策略控制</h2><p>主要用来设置id自动递增的值</p>
<ul>
<li>AUTO(0)：使用数据库自己的自增策略控制id生成</li>
<li>NONE（1）：不设置id生成策略</li>
<li>INPUT（2）：用户手动输入id</li>
<li>ASSIGN_ID（3）：雪花算法生成id（可兼容数值型和字符串型）</li>
</ul>
<p>具体用法：</p>
<ol>
<li>自动生成</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>用户自定义</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br></pre></td></tr></table></figure>

<p>同时也必须带上.setId()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setId(<span class="number">16</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>利用雪花算法自动生成id</p>
<p>雪花算法：自动生成的一种64位的二进制，第一位代表正负数，后面的41位是时间戳，精确到毫秒。再往后十位是机器码，最后的这些则是12位的序列号</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableId(type = IdType.ASSIGN_ID)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br></pre></td></tr></table></figure>

<h3 id="为所有pojo设置id生成策略"><a href="#为所有pojo设置id生成策略" class="headerlink" title="为所有pojo设置id生成策略"></a>为所有pojo设置id生成策略</h3><p>在yaml文件中写入：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">input</span></span><br></pre></td></tr></table></figure>

<h2 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h2><p>在表中有些字段属于公共字段，也就是很多表中都有的字段。这些字段会在不同的功能模块中进行不同的改写，能不能对于这些字段在某个地方进行统一的处理来简化开发呢？</p>
<p>答案就是MybatisPlus提供的公共字段自动填充功能</p>
<p>实现步骤：</p>
<ol>
<li><p>在指定的字段上添加@TableFileld注解，指定自动填充的策略</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入时填写字段</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">   </span><br><span class="line"><span class="comment">/*插入和更新时填写字段*/</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//插入时填写字段</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> createUser;</span><br><span class="line">   </span><br><span class="line"><span class="comment">/*插入和更新时填写字段*/</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> updateUser;</span><br></pre></td></tr></table></figure></li>
<li><p>按照框架要求编写元数据对象处理器，在此类中统一为公共字段赋值，此类需要实现MetaObjectHandler接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">自定义源数据对象处理器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjecthandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>,LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就能自动进行字段的赋值</p>
</li>
</ol>
<h2 id="多数据操作"><a href="#多数据操作" class="headerlink" title="多数据操作"></a>多数据操作</h2><h3 id="删除多个"><a href="#删除多个" class="headerlink" title="删除多个"></a>删除多个</h3><p>使用.deleteBatchIds通过id删除过个数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">10</span>);</span><br><span class="line">    list.add(<span class="number">11</span>);</span><br><span class="line">    list.add(<span class="number">12</span>);</span><br><span class="line">    userDao.deleteBatchIds(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询多个"><a href="#查询多个" class="headerlink" title="查询多个"></a>查询多个</h3><p>使用.selectBatchIds通过id删除过个数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testById</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">1</span>);</span><br><span class="line">    list.add(<span class="number">3</span>);</span><br><span class="line">    list.add(<span class="number">5</span>);</span><br><span class="line">    List&lt;User&gt; list2=userDao.selectBatchIds(list);</span><br><span class="line">    System.out.println(list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><p>所谓逻辑删除就是并不删除数据，而是增加一个字段通过0和1来区分这条数据该不该被查出来</p>
<p>pojo类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一个指默认值，第二个是确定为什么值时表示删除</span></span><br><span class="line">    <span class="meta">@TableLogic(value = &quot;0&quot;,delval = &quot;1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> deleted;</span><br></pre></td></tr></table></figure>

<p>现在在执行删除也就不会真正删除而是会给他附上逻辑删除值</p>
<p>等到查询的时候也同样不会查到</p>
<h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>乐观锁主要解决的就是类似于秒杀一样的场景，可以解决低于2000人同时访问。主要做的就是将</p>
<ol>
<li><p>sql库中添加字段</p>
<p>version int类型</p>
</li>
<li><p>实体类中添加对应字段，并设定当前字段为逻辑删除标记字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure></li>
<li><p>配置乐观锁拦截器实现锁机制对应的动态sql语句拼装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        MybatisPlusInterceptor mybatisPlusInterceptor=<span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="comment">//添加乐观锁</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用乐观锁机制在修改前必须先获取到对应数据的verion方可正常进行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//先查询数据，获取到version数据</span></span><br><span class="line">	User user=userDao.selectById(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//执行数据修改操作</span></span><br><span class="line">	user.setName(<span class="string">&quot;Tom and Jerry&quot;</span>)</span><br><span class="line">    userDao.updateById(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h2><h3 id="乐观锁的概念"><a href="#乐观锁的概念" class="headerlink" title="乐观锁的概念"></a>乐观锁的概念</h3><p>乐观锁：指的是在操作数据的时候非常乐观，乐观地认为别人不会同时修改数据，因此乐观锁默认是不会上锁的，只有在执行更新的时候才会去判断在此期间别人是否修改了数据，如果别人修改了数据则放弃操作，否则执行操作。</p>
<p>冲突比较少的时候, 使用乐观锁(没有悲观锁那样耗时的开销) 由于乐观锁的不上锁特性，所以在性能方面要比悲观锁好，比较适合用在DB的读大于写的业务场景。</p>
<h3 id="悲观锁的概念"><a href="#悲观锁的概念" class="headerlink" title="悲观锁的概念"></a>悲观锁的概念</h3><p>悲观锁：指的是在操作数据的时候比较悲观，悲观地认为别人一定会同时修改数据，因此悲观锁在操作数据时是直接把数据上锁，直到操作完成之后才会释放锁，在上锁期间其他人不能操作数据。</p>
<p>冲突比较多的时候, 使用悲观锁(没有乐观锁那么多次的尝试)对于每一次数据修改都要上锁，如果在DB读取需要比较大的情况下有线程在执行数据修改操作会导致读操作全部被挂载起来，等修改线程释放了锁才能读到数据，体验极差。所以比较适合用在DB写大于读的情况。</p>
<p>读取频繁使用乐观锁，写入频繁使用悲观锁。</p>
<h2 id="快速代码生成器"><a href="#快速代码生成器" class="headerlink" title="快速代码生成器"></a>快速代码生成器</h2><ol>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>调用及配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.获取代码生成器的对象</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">autoGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置数据库相关配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dataSource.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatisplus_db?serverTimezone=UTC&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        autoGenerator.setDataSource(dataSource);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">globalConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        globalConfig.setOutputDir(System.getProperty(<span class="string">&quot;user.dir&quot;</span>)+<span class="string">&quot;/mybatisplus_04_generator/src/main/java&quot;</span>);    <span class="comment">//设置代码生成位置</span></span><br><span class="line">        globalConfig.setOpen(<span class="literal">false</span>);    <span class="comment">//设置生成完毕后是否打开生成代码所在的目录</span></span><br><span class="line">        globalConfig.setAuthor(<span class="string">&quot;黑马程序员&quot;</span>);    <span class="comment">//设置作者</span></span><br><span class="line">        globalConfig.setFileOverride(<span class="literal">true</span>);     <span class="comment">//设置是否覆盖原始生成的文件</span></span><br><span class="line">        globalConfig.setMapperName(<span class="string">&quot;%sDao&quot;</span>);    <span class="comment">//设置数据层接口名，%s为占位符，指代模块名称</span></span><br><span class="line">        globalConfig.setIdType(IdType.ASSIGN_ID);   <span class="comment">//设置Id生成策略</span></span><br><span class="line">        autoGenerator.setGlobalConfig(globalConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置包名相关配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">packageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        packageInfo.setParent(<span class="string">&quot;com.aaa&quot;</span>);   <span class="comment">//设置生成的包名，与代码所在位置不冲突，二者叠加组成完整路径</span></span><br><span class="line">        packageInfo.setEntity(<span class="string">&quot;domain&quot;</span>);    <span class="comment">//设置实体类包名</span></span><br><span class="line">        packageInfo.setMapper(<span class="string">&quot;dao&quot;</span>);   <span class="comment">//设置数据层包名</span></span><br><span class="line">        autoGenerator.setPackageInfo(packageInfo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//策略设置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategyConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        strategyConfig.setInclude(<span class="string">&quot;tbl_user&quot;</span>);  <span class="comment">//设置当前参与生成的表名，参数为可变参数</span></span><br><span class="line">        strategyConfig.setTablePrefix(<span class="string">&quot;tbl_&quot;</span>);  <span class="comment">//设置数据库表的前缀名称，模块名 = 数据库表名 - 前缀名  例如： User = tbl_user - tbl_</span></span><br><span class="line">        strategyConfig.setRestControllerStyle(<span class="literal">true</span>);    <span class="comment">//设置是否启用Rest风格</span></span><br><span class="line">        strategyConfig.setVersionFieldName(<span class="string">&quot;version&quot;</span>);  <span class="comment">//设置乐观锁字段名</span></span><br><span class="line">        strategyConfig.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);  <span class="comment">//设置逻辑删除字段名</span></span><br><span class="line">        strategyConfig.setEntityLombokModel(<span class="literal">true</span>);  <span class="comment">//设置是否启用lombok</span></span><br><span class="line">        autoGenerator.setStrategy(strategyConfig);</span><br><span class="line">        <span class="comment">//2.执行生成操作</span></span><br><span class="line">        autoGenerator.execute();</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax通信技术</title>
    <url>/2023/06/12/Ajax%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="AJAX部分"><a href="#AJAX部分" class="headerlink" title="AJAX部分"></a>AJAX部分</h1><h2 id="JavaScript-ajax"><a href="#JavaScript-ajax" class="headerlink" title="JavaScript ajax"></a>JavaScript ajax</h2><h3 id="什么是ajax"><a href="#什么是ajax" class="headerlink" title="什么是ajax"></a>什么是ajax</h3><p>ajax=异步js和XML</p>
<p>ajax是一种用于创建快速动态网页的技术</p>
<p>通过与后台和服务器的少量数据交换，来使网页实行异步更新。</p>
<p>这意味着可以在不重新加载网页的情况下，进行对网页的某部分修改</p>
<h3 id="ajax的优点"><a href="#ajax的优点" class="headerlink" title="ajax的优点"></a>ajax的优点</h3><ol>
<li><p> 无需刷新页面即可与服务器端交换数据</p>
</li>
<li><p> 允许通过用户对页面的操作来改变页面内容</p>
</li>
<li><p> 没有浏览历史，不能后退</p>
</li>
<li><p> 反爬虫</p>
</li>
</ol>
<h3 id="什么是HTTP协议"><a href="#什么是HTTP协议" class="headerlink" title="什么是HTTP协议"></a>什么是HTTP协议</h3><p>HTTP（Hyper Text Transport protocol）协议【超文本传输协议】</p>
<p>协议规定了浏览器和万维网服务器之间互相通信的规则约定</p>
<p><strong>请求报文</strong></p>
<p>重点是格式与参数</p>
<p>请求行 传输方式 URL路径 HTTP协议版本</p>
<p>请求头 Host：atguigu.com 这些都是格式，具体内容不限</p>
<p>​    Cookie： name=guigu</p>
<p>​    Content-type： application/x-www-form-urlencoded</p>
<p>​    User-Agent: chrome 83</p>
<p>空行</p>
<p>请求体（如果是get请求这是空的，如果是post那么可以写东西）</p>
<p>例如：username=zhangsan&amp;password=123456</p>
<p><strong>响应报文</strong></p>
<p>响应行 HTTP版本 响应状态码 响应状态字符串</p>
<p>​                            404（找不到）</p>
<p>​                            403（无法访问）</p>
<p>​                            401（未授权）</p>
<p>​                            500（内部错误）</p>
<p>​                            200（OK）</p>
<p>响应头（对响应体的一些描述）</p>
<p>​    Context-Type：text/html;charset=utf-8</p>
<p>​    Content-length:2048</p>
<p>​    Content-encoding:gzip</p>
<p>空行</p>
<p>响应体（返回报文的主要内容）</p>
<p>​    例如：<html></p>
<p>​        <head></head></p>
<p>​        <body></p>
<p>​            <a>name</a></p>
<p>​        </body></p>
<p>​    </html></p>
<p>js在接到响应体后会进行提取和渲染最终返回到html界面上</p>
<h3 id="浏览器中查看请求响应"><a href="#浏览器中查看请求响应" class="headerlink" title="浏览器中查看请求响应"></a>浏览器中查看请求响应</h3><p><img src="/img/Web%E5%89%8D%E7%AB%AF/image014.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="node-js和Express"><a href="#node-js和Express" class="headerlink" title="node.js和Express"></a>node.js和Express</h3><ol>
<li> 下载与安装</li>
</ol>
<blockquote>
<p><a href="http://nodejs.cn/">Node.js 中文网 (nodejs.cn)</a></p>
</blockquote>
<ol start="2">
<li>配置运行Express</li>
</ol>
<p><img src="/img/Web%E5%89%8D%E7%AB%AF/image015.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>运行文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>  <span class="comment">// 1.引入express  </span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>  <span class="keyword">const</span> &#123; response &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>  <span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>  </span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>  <span class="comment">// 2.创建应用对象  </span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>  <span class="keyword">const</span> app=<span class="title function_">express</span>();  </span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>  </span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>  <span class="comment">// 3.创建路由规则  </span></span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>  <span class="comment">// require是对请求报文的封装  </span></span><br><span class="line"></span><br><span class="line"><span class="number">10.</span>  <span class="comment">// response是对响应报文的封装  </span></span><br><span class="line"></span><br><span class="line"><span class="number">11.</span>  app.<span class="title function_">get</span>(<span class="string">&#x27;/server&#x27;</span>,<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;  </span><br><span class="line"></span><br><span class="line"><span class="number">12.</span>  <span class="comment">// 设置响应头，设置允许跨域  </span></span><br><span class="line"></span><br><span class="line"><span class="number">13.</span>  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;\*&#x27;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="number">14.</span>  <span class="comment">// 设置响应体  </span></span><br><span class="line"></span><br><span class="line"><span class="number">15.</span>  response.<span class="title function_">send</span>(<span class="string">&#x27;Hello Express&#x27;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="number">16.</span>  </span><br><span class="line"></span><br><span class="line"><span class="number">17.</span>  &#125;);  </span><br><span class="line"></span><br><span class="line"><span class="number">18.</span>  </span><br><span class="line"></span><br><span class="line"><span class="number">19.</span>  <span class="comment">// 4.监听端口启动服务  </span></span><br><span class="line"></span><br><span class="line"><span class="number">20.</span>  app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;  </span><br><span class="line"></span><br><span class="line"><span class="number">21.</span>  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动，8000端口监听中...&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="number">22.</span>  &#125;)  </span><br></pre></td></tr></table></figure>




<h3 id="创建XMLHttpRequest对象"><a href="#创建XMLHttpRequest对象" class="headerlink" title="创建XMLHttpRequest对象"></a>创建XMLHttpRequest对象</h3><p>简介：现在基本上市面流行的所有浏览器均内建XMLHttpRequest对象</p>
<p>创建XMLHttpRequest对象的语法</p>
<blockquote>
<p>aaa=<strong>new</strong> XMLHttpRequest()  </p>
</blockquote>
<p>老版本的IE5和IE6使用ActiveX对象</p>
<p>xmlhttp=new ActiveXObject(“Microsoft.XMLHTTP”);</p>
<h3 id="判断是否支持XMLHttpRequest：window-XMLHttpRequest"><a href="#判断是否支持XMLHttpRequest：window-XMLHttpRequest" class="headerlink" title="判断是否支持XMLHttpRequest：window.XMLHttpRequest"></a>判断是否支持XMLHttpRequest：window.XMLHttpRequest</h3><h3 id="向服务器发送请求"><a href="#向服务器发送请求" class="headerlink" title="向服务器发送请求"></a>向服务器发送请求</h3><blockquote>
<p>aaa.open(“发送方法”,”服务器上的位置”,”同步或者异步”)  //规定请求的类型</p>
<p>get或者post url地址 true表示异步，false表示同步</p>
<p>aaa.send() //将请求发送到服务器</p>
</blockquote>
<h3 id="get和post详解"><a href="#get和post详解" class="headerlink" title="get和post详解"></a>get和post详解</h3><p>get：速度快</p>
<p>post：需要更新服务器上的文件或是数据库</p>
<p>没有数据量限制</p>
<p>发送包含未知字符的用户数据，post比get更加可靠</p>
<p>get案例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/try/ajax/demo_get.php&quot;</span>,<span class="literal">true</span>);   </span><br><span class="line"></span><br><span class="line">xmlhttp.<span class="title function_">send</span>();  </span><br></pre></td></tr></table></figure>

<p>这样写的话有可能会返回、缓存的内容</p>
<p>为了避免这种情况：我们可以在URL后面添加一个唯一的ID</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/try/ajax/demo_get.php?t=&quot;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>(),**<span class="literal">true</span>**);  </span><br><span class="line"></span><br><span class="line">xmlhttp.<span class="title function_">send</span>();  </span><br></pre></td></tr></table></figure>

<p>post案例：</p>
<ol>
<li>```js<br>xmlhttp.open(“POST”,”/try/ajax/demo_post.php”,<strong>true</strong>);  xmlhttp.send();  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据：</span><br><span class="line"></span><br><span class="line">1.  xmlhttp.open(&quot;POST&quot;,&quot;/try/ajax/demo\_post2.php&quot;,**true**);  </span><br><span class="line"></span><br><span class="line">2.  xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);  </span><br><span class="line"></span><br><span class="line">3.  xmlhttp.send(&quot;fname=Henry&amp;lname=Ford&quot;);  </span><br><span class="line"></span><br><span class="line">setRequestHeader()用来向请求添加HTTP头</span><br><span class="line"></span><br><span class="line">### js操作连接服务器结构模板</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">if(window.XMLHttpRequest)&#123;              /* 判断浏览器支持情况 */  </span><br><span class="line"></span><br><span class="line">	const XHR=new XMLHttpRequest()      /* 一般创建对象 */  </span><br><span class="line"></span><br><span class="line">    XHR.open(&quot;GET&quot;,&quot;http://127.0.0.1:8000/json-server&quot;)     /* 声明传输方式和地址 */  </span><br><span class="line"></span><br><span class="line">    XHR.send(&#x27;a=100&amp;b=200&amp;c=300&#x27;)        /* 发送或者携带内容发送 */  </span><br><span class="line">	</span><br><span class="line">    /* onreadystatechange方法每当readyState改变一次就执行一次 */</span><br><span class="line">    XHR.onreadystatechange=function()&#123;   </span><br><span class="line">        </span><br><span class="line">		/* readyState返回XMLHTTP请求的当前状态   status返回状态码 */  </span><br><span class="line">        if(XHR.readyState==&quot;4&quot;&amp;&amp;XHR.status==&quot;200&quot;)&#123; </span><br><span class="line"></span><br><span class="line">            console.log(XHR.response)   /* 打印响应的内容 */  </span><br><span class="line"></span><br><span class="line">            XHR.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;)  </span><br><span class="line"></span><br><span class="line">            XHR.setRequestHeader(&quot;name&quot;,&quot;MouseUpShow&quot;)   /* 设置响应头信息 */  </span><br><span class="line"></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;else&#123;  </span><br><span class="line">    const XHR=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;)    /* IE5、IE6创建对象 */  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="服务器响应json数据"><a href="#服务器响应json数据" class="headerlink" title="服务器响应json数据"></a>服务器响应json数据</h3><p>服务器添加json数据：</p>
<ol>
<li><p> app.all(‘/json-server’,(request,response)=&gt;{  </p>
</li>
<li><p> // 设置响应头，设置允许跨域  </p>
</li>
<li><p> response.setHeader(‘Access-Control-Allow-Origin’,’*‘)  </p>
</li>
<li><p> response.setHeader(“Access-Control-Allow-Headers”,”*“)  </p>
</li>
<li><p> // 设置响应体  </p>
</li>
<li><p> <strong>const</strong> data={    //一个json语句  </p>
</li>
<li><p> name:’Ajax Json’  </p>
</li>
<li><p> }  </p>
</li>
<li><p> // 对对象进行字符串转化  </p>
</li>
<li><p> var str=JSON.stringify(data)  </p>
</li>
<li><p> // 设置响应体  </p>
</li>
<li><p> response.send(str)  </p>
</li>
<li></li>
<li><p> });  </p>
</li>
</ol>
<p>html文件：</p>
<ol>
<li><p> XHR.responseType=”json”   /*自动转换json语句*/</p>
</li>
<li><p> test.innerHTML=XHR.response.name;  </p>
</li>
</ol>
<blockquote>
<p>window.performance.navigation.type得到一个数字</p>
<p>0：是由地址栏输入、表单验证、超链接、脚本操作等方法进入</p>
<p>1：刷新得到的网页</p>
<p>2：通过前进后退得到的</p>
<p>255：任何其他来源</p>
</blockquote>
<h2 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery ajax"></a>jQuery ajax</h2><p>jquery调用ajax方法：</p>
<p>格式：$.ajax({})</p>
<p>参数：</p>
<p>​    type：请求方式GET/POST</p>
<p>​    url：请求地址url</p>
<p>​    async：是否异步，默认为true表示异步</p>
<p>​    data：发送到服务器的数据</p>
<p>​    dataType：与其服务器返回的数据类型</p>
<p>​    contentType：设置请求头</p>
<p>​    success：请求成功时调用此函数</p>
<p>​    error：请求失败时调用此函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"></span><br><span class="line">	<span class="attr">type</span>: <span class="string">&quot;get&quot;</span> <span class="comment">//传输方式</span></span><br><span class="line"></span><br><span class="line">	<span class="attr">url</span>:<span class="string">&quot;showuser&quot;</span>, <span class="comment">//地址</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">async</span> :<span class="literal">true</span>, <span class="comment">//是否异步</span></span><br><span class="line"></span><br><span class="line">	<span class="attr">dataType</span>:<span class="string">&quot;txt&quot;</span>, <span class="comment">//预期返回的文本类型</span></span><br><span class="line"></span><br><span class="line">	<span class="attr">data</span>:&#123;&#125;, <span class="comment">//一同发送的数据  </span></span><br><span class="line">		<span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data,status,xhr</span>)&#123; </span><br><span class="line">    		<span class="comment">//成功后回调函数</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">//失败后回调函数  </span></span><br><span class="line">			<span class="title function_">alert</span>(<span class="string">&quot;shibai&quot;</span>)  </span><br><span class="line">		&#125;  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>jquery调用get方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(</span><br><span class="line">	<span class="string">&quot;showuser&quot;</span>, <span class="comment">//url地址  </span></span><br><span class="line">	&#123;<span class="attr">name</span>:”张三”,<span class="attr">age</span>:”<span class="number">18</span>”&#125;, <span class="comment">//跟随发送的数据  </span></span><br><span class="line">	<span class="keyword">function</span> (<span class="params">data,status,xhr</span>)&#123; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//data：返回得到的数据</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//status:请求的状态</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//xhr包含XMLHttpRequest  </span></span><br><span class="line">	&#125;  </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>jquery调用post方法同上，即使用post方法进行传递</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS样式表笔记</title>
    <url>/2023/06/12/CSS%E6%A0%B7%E5%BC%8F%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="CSS样式表"><a href="#CSS样式表" class="headerlink" title="CSS样式表"></a>CSS样式表</h1><h2 id="css简介"><a href="#css简介" class="headerlink" title="css简介"></a>css简介</h2><h3 id="css全称cascading-style-sheets"><a href="#css全称cascading-style-sheets" class="headerlink" title="css全称cascading style sheets"></a>css全称cascading style sheets</h3><p>CSS（Cascading Style Sheets）是一种用于控制网页视觉样式的语言。它与 HTML 和 JavaScript 一起构成了现代 Web 开发的三大基石之一。</p>
<p>CSS 的主要作用是将 HTML 文档中的内容和样式分离开来，使得 Web 页面的样式可以在不改变 HTML 内容的情况下进行更改。这就为 Web 设计师提供了更多的自由度和灵活性，同时也使得 CSS 成为了设计 Web 页面时必不可少的工具。</p>
<p>CSS 样式包括颜色、字体、间距、边框、背景等等，通过对这些样式进行定义，我们可以实现各种不同的效果，从而让页面呈现出我们想要的风格和感觉。</p>
<p>CSS 是一门相对简单易学的语言，但它也有其复杂和深入的方面，比如盒模型、浮动和定位等概念。随着 Web 技术的不断发展，CSS 也在不断更新和完善，例如 CSS3 中引入了许多新的特性和属性，使得开发者们能够更加灵活地处理页面布局和样式。</p>
<h3 id="css优点"><a href="#css优点" class="headerlink" title="css优点"></a>css优点</h3><ol>
<li><p> 实现内容和样式的分离利于团队开发</p>
</li>
<li><p> 实现样式的复用，提高开发效率</p>
</li>
<li><p> 实现样式的精准控制</p>
</li>
<li><p> 更利于搜索引擎搜索</p>
</li>
</ol>
<h3 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器&#123;</span><br><span class="line">	样式:值;</span><br><span class="line">	样式:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="css基础"><a href="#css基础" class="headerlink" title="css基础"></a>css基础</h2><h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><p>选择器有三种：标签选择器、类选择器、ID选择器</p>
<ul>
<li>标签选择器：可直接应用在html标签上</li>
</ul>
<ul>
<li>类选择器：可在页面上多次使用</li>
</ul>
<ul>
<li>ID选择器：在同一个页面上只能使用一次</li>
</ul>
<h3 id="引入css样式"><a href="#引入css样式" class="headerlink" title="引入css样式"></a>引入css样式</h3><ol>
<li><p> 行内样式（使用style属性引入css样式）</p>
</li>
<li><p> 内部样式表（css代码写在head中的style标签里）</p>
</li>
<li><p> 外部样式（将下面代码写入head中）</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br></pre></td></tr></table></figure>



<h3 id="css样式优先级"><a href="#css样式优先级" class="headerlink" title="css样式优先级"></a>css样式优先级</h3><p>行内&gt;内部&gt;外部</p>
<p>ID选择器&gt;类选择器&gt;标签选择器&gt;全局选择器（*)</p>
<h3 id="css复合选择器"><a href="#css复合选择器" class="headerlink" title="css复合选择器"></a>css复合选择器</h3><table>
<thead>
<tr>
<th>后代选择器</th>
<th>用来选择后代元素</th>
<th>可以是子孙后代</th>
<th>符号是空格.nav a</th>
</tr>
</thead>
<tbody><tr>
<td>子代选择器</td>
<td>选择最近一级元素</td>
<td>只选亲儿子</td>
<td>符号是大于.nav&gt;p</td>
</tr>
<tr>
<td>并集选择器</td>
<td>选择某些相同样式的</td>
<td>可以用于合并声明</td>
<td>符号是逗号.nav,.header</td>
</tr>
<tr>
<td>链接伪类选择</td>
<td>选择不同状态的链接</td>
<td>跟链接相关</td>
<td>重点记住a语和a:hover 实际开发的写法</td>
</tr>
<tr>
<td>:focus选择器</td>
<td>选择获得光标的表单</td>
<td>跟表单相关</td>
<td>input:focus记住这个写法</td>
</tr>
<tr>
<td>第一元素选择器</td>
<td>选择第一个元素</td>
<td></td>
<td>li:first-child{ }</td>
</tr>
<tr>
<td>最后一个元素</td>
<td>选择最后一个元素</td>
<td></td>
<td>li:last-child{ }</td>
</tr>
<tr>
<td>指定位置的子元素</td>
<td>选择指定位置的子元素</td>
<td></td>
<td>li:nth=child(3){ }</td>
</tr>
<tr>
<td>相邻兄弟选择器</td>
<td>相邻的两个同级标签</td>
<td></td>
<td>div+p{ }</td>
</tr>
<tr>
<td>通用兄弟选择器</td>
<td>所有的同级元素</td>
<td></td>
<td>div~p{ }</td>
</tr>
</tbody></table>
<p>选择器规范：子标签可以继承父标签的样式</p>
<p>子标签的样式不会影响父标签的结构</p>
<h3 id="css更改字体"><a href="#css更改字体" class="headerlink" title="css更改字体"></a>css更改字体</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>含义</th>
<th>类型</th>
<th>属性值</th>
</tr>
</thead>
<tbody><tr>
<td>font-family</td>
<td>设置字体类型</td>
<td>font-family：“隶书”</td>
<td></td>
</tr>
<tr>
<td>font-size</td>
<td>文字大小</td>
<td>font-size：12px</td>
<td>in英寸 mm毫米 cm厘米 pt点 pc派卡</td>
</tr>
<tr>
<td>font-style</td>
<td>字体风格</td>
<td>font-style：italic</td>
<td>normal默认值 italic斜体  oblique强制协体</td>
</tr>
<tr>
<td>font-weight</td>
<td>字体粗细</td>
<td>font-weight：bold</td>
<td>normal默认值 bold 粗体字体 bolder更粗  lighter更细的  100-900 400=默认 700=bold</td>
</tr>
</tbody></table>
<blockquote>
<p>简写：font:italic bold 36px ‘宋体’；</p>
</blockquote>
<h3 id="css更改文本"><a href="#css更改文本" class="headerlink" title="css更改文本"></a>css更改文本</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>描述</th>
<th>属性值</th>
</tr>
</thead>
<tbody><tr>
<td>color</td>
<td>文字颜色</td>
<td>#aaa red</td>
</tr>
<tr>
<td>text-align</td>
<td>水平对齐</td>
<td>left、right、center</td>
</tr>
<tr>
<td>text-indent</td>
<td>首行缩进</td>
<td>20px 2em两个字符</td>
</tr>
<tr>
<td>line-height</td>
<td>行高（一般用来垂直居中对齐）</td>
<td></td>
</tr>
<tr>
<td>vertical-align</td>
<td>垂直对齐</td>
<td>middle垂直居中 top bottom、baseline基线对齐</td>
</tr>
<tr>
<td>text-decoration</td>
<td>文本装饰</td>
<td>underline下划线overline上划线 line-through删除线</td>
</tr>
<tr>
<td>text-shadow</td>
<td>文字阴影</td>
<td>text-shadow:颜色，xy位置，模糊值</td>
</tr>
<tr>
<td>letter-spacing</td>
<td>字符间距</td>
<td></td>
</tr>
</tbody></table>
<h3 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h3><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>属性值</th>
</tr>
</thead>
<tbody><tr>
<td>background-color</td>
<td>背景颜色</td>
<td>#fff  transparent背景透明  rgba（255,0,0,0.5）前三个是rgb颜色值 第四个设置透明度0~1  linear-grodient（to  right,red,yellow…）背景渐变</td>
</tr>
<tr>
<td>background-image</td>
<td>背景图片</td>
<td>url（‘ ’）</td>
</tr>
<tr>
<td>background-repeat</td>
<td>背景重复</td>
<td>no-repeat不重复  repeat-x 横向重复 repeat-y纵向重复</td>
</tr>
<tr>
<td>background-position</td>
<td>背景定位</td>
<td>x，y   x%，y%   x，y关键字</td>
</tr>
</tbody></table>
<p>简写：background：颜色，图片，重复，定位；</p>
<h3 id="背景渐变"><a href="#背景渐变" class="headerlink" title="背景渐变"></a>背景渐变</h3><p>语法：background-image:linear-gradient(angle,color-point,color-point,…);</p>
<p>1、angle</p>
<p>渐变的方向或角度</p>
<p>取值：</p>
<p>to top : 从下向上填充渐变色</p>
<p>to right:从左向右填充渐变色</p>
<p>to bottom:从上向下填充渐变</p>
<p>to left:从右向左填充渐变色</p>
<p>0deg : 0度-&gt;to top</p>
<p>90deg: 90度-&gt;to right</p>
<p>180deg:180度-&gt;to bottom</p>
<p>270deg:270度-&gt;to left</p>
<p>2、color-point</p>
<p>色标：表示颜色及其颜色出现的位置</p>
<p>ex</p>
<p>red 0% : 开始的时候是红色</p>
<p>blue 25%:25%的时候变成蓝色</p>
<p>red 0px : 开始的时候是红色</p>
<p>blue 25px:到25px的位置处，变为蓝色</p>
<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-top</span>（<span class="number">1px</span>，red，solid）</span><br><span class="line"></span><br><span class="line">	-<span class="attribute">left</span></span><br><span class="line"></span><br><span class="line">	-<span class="attribute">right</span></span><br><span class="line"></span><br><span class="line">	-<span class="attribute">bottom</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-radius</span>：<span class="number">5px</span>,<span class="number">5px</span>,<span class="number">5px</span>,<span class="number">5px</span>;边框圆角</span><br><span class="line"></span><br><span class="line">边框样式：<span class="attribute">none</span>无，hidden隐藏，dotted点线，dashed断线，double双实线</span><br></pre></td></tr></table></figure>



<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p><img src="/img/Web%E5%89%8D%E7%AB%AF/image002.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>margin:5px 10px 5px 10px;</p>
<p>上右下左的顺序</p>
<p>margin：5px 10px；</p>
<p>上下执行前面的左右执行后面的</p>
<p>margin:5px 15px 20px;</p>
<p>上 左右 下</p>
<h2 id="伪类样式"><a href="#伪类样式" class="headerlink" title="伪类样式"></a>伪类样式</h2><ul>
<li><p>a:link 未点击</p>
</li>
<li><p>a:visited 单击后</p>
</li>
<li><p>a:hover 鼠标上移</p>
</li>
<li><p>a:active 单击未释放</p>
</li>
</ul>
<p>注：若在同一个a标签中设置四个伪类样式需要按以上顺序填写</p>
<h2 id="鼠标指针设置"><a href="#鼠标指针设置" class="headerlink" title="鼠标指针设置"></a>鼠标指针设置</h2><p>cursor：</p>
<ul>
<li><p><img src="/img/Web%E5%89%8D%E7%AB%AF/image003.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>default；</p>
</li>
<li><p><img src="/img/Web%E5%89%8D%E7%AB%AF/image004.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>crosshair</p>
</li>
</ul>
<ul>
<li><img src="/img/Web%E5%89%8D%E7%AB%AF/image005.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>wait</li>
</ul>
<ul>
<li><p><img src="/img/Web前端/image006.png" style="zoom:30%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>help</p>
</li>
<li><p><img src="/img/Web%E5%89%8D%E7%AB%AF/image007.jpg" alt="text光标 的图像结果" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>text</p>
</li>
</ul>
<ul>
<li><img src="/img/Web前端/image008.png" style="zoom:60%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>pointer</li>
</ul>
<h2 id="标准文档流"><a href="#标准文档流" class="headerlink" title="标准文档流"></a>标准文档流</h2><h3 id="标准文档流概念："><a href="#标准文档流概念：" class="headerlink" title="标准文档流概念："></a>标准文档流概念：</h3><p>​        元素从左往右从上往下排列</p>
<h3 id="标准文档流组成"><a href="#标准文档流组成" class="headerlink" title="标准文档流组成"></a>标准文档流组成</h3><ol>
<li><p>行内元素</p>
<ol>
<li><p> 设置宽高无效</p>
</li>
<li><p> 对margin仅设置左右有效上下无效，padding设置上下左右都有效，即会撑大空间</p>
</li>
<li><p> 不会自动换行</p>
</li>
</ol>
</li>
<li><p>块级元素</p>
<ol>
<li><p> 能识别宽高</p>
</li>
<li><p> margin和padding的上下左右都有效</p>
</li>
<li><p> 自动换行</p>
</li>
</ol>
</li>
<li><p>行内块级</p>
<ol>
<li><p> 不自动换行</p>
</li>
<li><p> 识别宽高</p>
</li>
<li><p> 默认从左往右</p>
</li>
</ol>
</li>
</ol>
<h3 id="三种元素转换"><a href="#三种元素转换" class="headerlink" title="三种元素转换"></a>三种元素转换</h3><ul>
<li>display:inline(转换行内)；</li>
<li>block（转换为块级元素);</li>
<li>inline-block（转化为行内块级元素）</li>
</ul>
<p>浮动+div布局</p>
<h4 id="div特点"><a href="#div特点" class="headerlink" title="div特点"></a>div特点</h4><ol>
<li><p> 块级元素，独占一行</p>
</li>
<li><p> 具有一定宽度和高度</p>
</li>
<li><p> 常用作容器</p>
</li>
</ol>
<h4 id="div浮动"><a href="#div浮动" class="headerlink" title="div浮动"></a>div浮动</h4><ol>
<li><p> 使用div失去独占一行</p>
</li>
<li><p> 浮动元素紧贴父级标签并与兄弟元素的边框紧贴</p>
</li>
<li><p> 空间不足自动换行</p>
</li>
</ol>
<h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><blockquote>
<p>clear：left；左侧不允许出现浮动元素</p>
<p>right；右侧不允许出现浮动元素</p>
<p>both；两侧不允许出现浮动元素</p>
<p>none；允许出现</p>
</blockquote>
<h3 id="弹性盒子（Flex）"><a href="#弹性盒子（Flex）" class="headerlink" title="弹性盒子（Flex）"></a>弹性盒子（Flex）</h3><h4 id="什么是Flex"><a href="#什么是Flex" class="headerlink" title="什么是Flex"></a>什么是Flex</h4><p>任何一个元素都可以指定为flex布局</p>
<p>在设置为flex布局之后子元素的float、clear和vertical-align都将失效</p>
<h4 id="属性及作用"><a href="#属性及作用" class="headerlink" title="属性及作用"></a>属性及作用</h4><p><em><strong>flex-direction：决定主轴的方向（子元素排列顺序）</strong></em></p>
<p>flex-direction: row | row-reverse | column | column-reverse;</p>
<p>水平起点在左 | 水平起点在右 | 垂直起点在上 | 垂直七点在下</p>
<p><em><strong>flex-wrap：如果一条轴线排不下如何换行</strong></em></p>
<p>flex-wrap: nowrap | wrap | wrap-reverse;</p>
<p>不换行 | 换行，第一行在上 | 换行，第一行在下</p>
<blockquote>
<p>flex-flow：flex-direction，flex-wrap；</p>
</blockquote>
<p><em><strong>justify-content：主轴对齐方式</strong></em></p>
<p>justify-content: flex-start | flex-end |center | space-between | space-around;</p>
<p>左对齐 右对齐 居中 两端 分散</p>
<p><em><strong>align-items：交叉轴对齐方式</strong></em></p>
<p>align-items: flex-start | flex-end | center | baseline | stretch;</p>
<p><img src="/img/Web%E5%89%8D%E7%AB%AF/image009.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><em><strong>align-content：多根轴线对齐方式</strong></em></p>
<p>align-content: flex-start | flex-end | center | space-between | space-around | stretch;</p>
<h4 id="项目（子元素）属性"><a href="#项目（子元素）属性" class="headerlink" title="项目（子元素）属性"></a>项目（子元素）属性</h4><ul>
<li><p>order： 设置项目位置，数字越小越靠前</p>
</li>
<li><p>flex-grow：如果存在剩余空间，放大的倍数</p>
</li>
<li><p>flex-shrink：如果空间小，缩小的倍数</p>
</li>
<li><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间</p>
</li>
<li><p>flex:flex-grow,flex-basis,flex-shrink;</p>
</li>
<li><p>align-self 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性</p>
</li>
</ul>
<h3 id="元素溢出处理"><a href="#元素溢出处理" class="headerlink" title="元素溢出处理"></a>元素溢出处理</h3><ul>
<li><p>overflow：visible；默认值内容不会被修剪，会呈现在盒子之外</p>
</li>
<li><p>hidden；内容修剪隐藏内容不可见</p>
</li>
<li><p>scroll； 内容修剪但浏览器会显示滚动条</p>
</li>
<li><p>auto如果内容修剪，则会显示滚动条</p>
</li>
</ul>
<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul>
<li><p>position：relative；相对定位，相对于自身原来位置偏移</p>
</li>
<li><p>absolute；绝对定位：已定位的父级元素为基准</p>
</li>
<li><p>脱标（子绝父相）</p>
</li>
<li><p>fixed； 固定定位；相对于浏览器定位</p>
</li>
<li><p>偏移设置：top，left，right，bottom</p>
</li>
</ul>
<h3 id="脱标的三种方式：浮动、绝对定位、固定定位"><a href="#脱标的三种方式：浮动、绝对定位、固定定位" class="headerlink" title="脱标的三种方式：浮动、绝对定位、固定定位"></a>脱标的三种方式：浮动、绝对定位、固定定位</h3><h3 id="层级顺序"><a href="#层级顺序" class="headerlink" title="层级顺序"></a>层级顺序</h3><p>​        z-index属性：调整元素定位时重叠层的上下位置</p>
<ol>
<li><p>z-index属性值，整数默认为0</p>
</li>
<li><p>设置了position才能设置此属性</p>
</li>
<li><p>z-index值大的在值小的层上方</p>
</li>
</ol>
<h3 id="文字、图片、列表滚动"><a href="#文字、图片、列表滚动" class="headerlink" title="文字、图片、列表滚动"></a>文字、图片、列表滚动</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">behavior</span>=<span class="string">&quot;alternate&quot;</span> <span class="attr">scrollamount</span>=<span class="string">&#x27;50&#x27;</span>&gt;</span>来回弹<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>behavior滚动方式：alternate来回弹</p>
<p>scroll转一圈</p>
<p>slide动一次</p>
<p>infinate=infinate：重复</p>
<p>loop=‘3’：次数</p>
<p>divection=“up”向上</p>
<p>down向下</p>
<p>left向左</p>
<p>right向右</p>
<p>scrolldelay=“10”减速</p>
<p>scrollamount=“10”加快</p>
</blockquote>
<h3 id="HTML元素透明度"><a href="#HTML元素透明度" class="headerlink" title="HTML元素透明度"></a>HTML元素透明度</h3><p>opacity：0-1；可设置小数</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML精讲</title>
    <url>/2023/09/18/HTML%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="/img/Web%E5%89%8D%E7%AB%AF/image001.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h2><h3 id="HTML是什么"><a href="#HTML是什么" class="headerlink" title="HTML是什么"></a>HTML是什么</h3><p>HTML是一种描述网页的语言（不是编程语言）是标记语言</p>
<p>全称Hyper Text Markup language 中文名：超文本标记语言</p>
<h3 id="HTML语义化"><a href="#HTML语义化" class="headerlink" title="HTML语义化"></a>HTML语义化</h3><ol>
<li><p> 根据不同的内容选择合适的标签</p>
</li>
<li><p> 便于开发者阅读和编写优雅的代码</p>
</li>
<li><p> 让浏览器更好的解析</p>
</li>
</ol>
<h3 id="HTML八条规则"><a href="#HTML八条规则" class="headerlink" title="HTML八条规则"></a>HTML八条规则</h3><ol>
<li><p> 标签名称必须小写</p>
</li>
<li><p> 属性名必须是小写</p>
</li>
<li><p> 标签严格嵌套</p>
</li>
<li><p> 标签必须封闭</p>
</li>
<li><p> 即使是空元素的标签也要封闭</p>
</li>
<li><p> 属性值必须双引号引起来</p>
</li>
<li><p> 属性值必须有完整的形式</p>
</li>
<li><p> 区分内容标签和结构标签</p>
</li>
</ol>
<h3 id="开始和结束标签"><a href="#开始和结束标签" class="headerlink" title="开始和结束标签"></a>开始和结束标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>…<span class="tag">&lt;/<span class="name">html</span>&gt;</span>标记着文档的开始和结束</span><br></pre></td></tr></table></figure>



<h3 id="DOCTYPE声明"><a href="#DOCTYPE声明" class="headerlink" title="DOCTYPE声明"></a>DOCTYPE声明</h3><!DOCTYPE html><p>:声明为HTML5文件</p>
<h3 id="META定义"><a href="#META定义" class="headerlink" title="META定义"></a>META定义</h3><meta charset="UTF-8"> 定义编码格式

<p>    <meta http-equiv="X-UA-Compatible" content="IE=edge"> 定义文档类型</p>
<p>    <meta name="viewport" content="这里是关键字"></p>
<h3 id="特殊字符实体"><a href="#特殊字符实体" class="headerlink" title="特殊字符实体"></a>特殊字符实体</h3><table>
<thead>
<tr>
<th>空格</th>
<th>&amp;nbsp；</th>
</tr>
</thead>
<tbody><tr>
<td>大于号</td>
<td>&amp;gt；</td>
</tr>
<tr>
<td>小于号</td>
<td>&amp;lt；</td>
</tr>
<tr>
<td>双引号</td>
<td>&amp;quot；</td>
</tr>
<tr>
<td>版权符号©</td>
<td>&amp;copy；</td>
</tr>
</tbody></table>
<h2 id="HTML构成"><a href="#HTML构成" class="headerlink" title="HTML构成"></a>HTML构成</h2><h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>...<span class="tag">&lt;/<span class="name">head</span>&gt;</span> 标志着头部</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>...<span class="tag">&lt;/<span class="name">title</span>&gt;</span> 更改选项卡名</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;Shortcut Icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;这里放图片的地址&quot;</span>&gt;</span> 更改选项卡小logo</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--为所有链接的统一连接（包括 &lt;a&gt;、&lt;img&gt;、&lt;link&gt;、&lt;form&gt; 标签中的 URL）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;链接地址&quot;</span> <span class="attr">target</span>=<span class="string">&quot;post&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span> 连入css样式</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;3;url=链接地址 &quot;</span>&gt;</span> 页面跳转</span><br></pre></td></tr></table></figure>

<h3 id="主体部分"><a href="#主体部分" class="headerlink" title="主体部分"></a>主体部分</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>...<span class="tag">&lt;/<span class="name">body</span>&gt;</span> 主题标签，网页的内容都在这显示</span><br></pre></td></tr></table></figure>

<h3 id="网页的组成：文字、超链接、图片、音频、视频"><a href="#网页的组成：文字、超链接、图片、音频、视频" class="headerlink" title="网页的组成：文字、超链接、图片、音频、视频"></a>网页的组成：文字、超链接、图片、音频、视频</h3><h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span> 段落标签，块级标签自动换行</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>~<span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span> 标题标签，自带加粗，字号从h1开始逐渐变小</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span> 水平线，单标签</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>...<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 文字加粗</span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>...<span class="tag">&lt;/<span class="name">em</span>&gt;</span> 倾斜</span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>...<span class="tag">&lt;/<span class="name">pre</span>&gt;</span> 原字符输出</span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>...<span class="tag">&lt;/<span class="name">sub</span>&gt;</span> 下标</span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>...<span class="tag">&lt;/<span class="name">sup</span>&gt;</span> 下标</span><br></pre></td></tr></table></figure>

<h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h4><p>常用的超链接分为页面间链接、锚链接、功能性链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;链接位置&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口位置&quot;</span>&gt;</span>需要链接的文本和图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>target有两个属性值 self是在本窗口打开</p>
<p>blank是新建窗口打开</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#abc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">name</span>=<span class="string">&quot;abc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>超链接地址中把要跳转的标签的name名加#放入即可跳转</p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片位置&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;鼠标上移显示文字&quot;</span> <span class="attr">title</span>=<span class="string">&quot;图片丢失的提示文字&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>点击图片上的某个位置执行操作：</p>
<h4 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  控制器  自动播放  重复   静音播放--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">muted</span> &gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;#.mp3&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;#.war&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">muted</span> &gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;\#.mp4&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;\#.wav&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="网页结构布局"><a href="#网页结构布局" class="headerlink" title="网页结构布局"></a>网页结构布局</h3><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>​        列表分为有序列表（ol）、无序列表（ul）、自定义列表（dl）</p>
<ol>
<li><p>有序列表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>​            可以通过更改type=“”进行项目符号的更改属性值可以是阿拉伯数字（1,2,3）罗马数字（ⅠⅡⅢ）英文大小写字母（a,b,c A,B,C）等</p>
<ol start="2">
<li><p>有序列表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">type有三个值：square正方形</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">circle空心圆</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">disc 实心圆</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>自定义列表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--常用于图文混排--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">tr</span>&gt;</span> #行标签</span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span> #单元格标签</span><br><span class="line">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>表格适合工工整整的布局方法，一般用于表单页面</p>
<p>跨行合并：rowspan=””</p>
<p>跨列合并：colspan=””</p>
<p>单元格与单元格之间的距离：cellspacing=‘’</p>
<p>单元格与内容之间的距离：cellpadding=‘’</p>
<h4 id="内联框架"><a href="#内联框架" class="headerlink" title="内联框架"></a>内联框架</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.4399.com&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aaa&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span> #点击超链接在框架中显示</span><br></pre></td></tr></table></figure>



<h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;规定表单传输方式&quot;</span> <span class="attr">action</span>=<span class="string">&quot;表单提交地址&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--文本框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;这里写默认的文字（点击消失）&quot;</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">value</span>=<span class="string">&quot;这里写默认文字（不可消失）&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;最多输入字符&quot;</span> <span class="attr">size</span>=<span class="string">&quot;最大宽度&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--密码框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--数值输入域--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--电子邮件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--url地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--搜索框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span>&gt;</span> </span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!--电话--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--年月日--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--周、年--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;week&quot;</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--时间--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--在同一个表单中，radio的name属性相同可形成单选--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--复选框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;等于本身默认选中&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--列表分组--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;等于本身允许多个选择&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;亚洲&quot;</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">			<span class="comment">&lt;!--默认选中selected--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;表单提交时被发送到服务器的值&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>中国 <span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>韩国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>日本<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;欧洲&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;表单提交时被发送到服务器的值&quot;</span>&gt;</span>英国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>意大利<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>法国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--提交按钮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮上的文字&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--重置按钮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--图片按钮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!--普通按钮配合js使用,默认可以提交--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--文件域--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 多行文本域 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">		cols是行数rows是列数</span><br><span class="line">	<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h3><h4 id="新增页面标签"><a href="#新增页面标签" class="headerlink" title="新增页面标签"></a>新增页面标签</h4><blockquote>
<p>header section footer nav</p>
<p>头部 主体 脚部 导航条</p>
</blockquote>
<h4 id="获取地理位置"><a href="#获取地理位置" class="headerlink" title="获取地理位置"></a>获取地理位置</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>拖曳式列表排序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 简单加点样式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)&#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取位置信息元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;display&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提示警告错误元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;feedback&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 触发控件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getLocation()&quot;</span>&gt;</span>获取位置信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 获取显示元素(h1) / 反馈元素(span)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> span = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;feedback&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> h1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;display&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 判断浏览器是否支持定位</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">getLocation</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(navigator.<span class="property">geolocation</span>)&#123;<span class="comment">//true</span></span></span><br><span class="line"><span class="language-javascript">      navigator.<span class="property">geolocation</span>.<span class="title function_">getCurrentPosition</span>(showPosition)</span></span><br><span class="line"><span class="language-javascript">      span.<span class="property">innerHTML</span> = <span class="string">&quot;恭喜您，您的浏览器支持定位！&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//给出等待反馈</span></span></span><br><span class="line"><span class="language-javascript">      h1.<span class="property">innerHTML</span> = <span class="string">&quot;≡(▔﹏▔)≡正在努力获取中...&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//false</span></span></span><br><span class="line"><span class="language-javascript">      span.<span class="property">innerHTML</span> = <span class="string">&quot;很遗憾，您的浏览器不支持定位！&quot;</span>      </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 获取位置</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">showPosition</span>(<span class="params">position</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    h1.<span class="property">innerHTML</span> = <span class="string">&quot;纬度：&quot;</span>+position.<span class="property">coords</span>.<span class="property">latitude</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;经度：&quot;</span>+position.<span class="property">coords</span>.<span class="property">longitude</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;高度：&quot;</span>+position.<span class="property">coords</span>.<span class="property">altitude</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML动画</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">平移</span><br><span class="line"></span><br><span class="line"><span class="attribute">transform</span>：translate（x轴，y轴）</span><br><span class="line"></span><br><span class="line">旋转</span><br><span class="line"></span><br><span class="line"><span class="attribute">transform</span>：rotate(<span class="number">80deg</span>)//顺时针旋转<span class="number">80</span>度</span><br><span class="line"></span><br><span class="line">rotateX(<span class="number">80deg</span>) //沿X轴翻转</span><br><span class="line"></span><br><span class="line">rotateY(<span class="number">80deg</span>) //沿Y轴翻转</span><br><span class="line"></span><br><span class="line">倾斜</span><br><span class="line"></span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">skew</span>(<span class="number">30deg</span>) //倾斜<span class="number">30</span>度</span><br><span class="line"></span><br><span class="line">放大</span><br><span class="line"></span><br><span class="line">transform：<span class="built_in">scale</span>(<span class="number">1.2</span>) //放大<span class="number">1.2</span>倍</span><br><span class="line"></span><br><span class="line">过渡</span><br><span class="line"></span><br><span class="line">transtion：background <span class="number">2s</span> linear <span class="number">0s</span></span><br><span class="line"></span><br><span class="line">过度属性 时长 方式 延迟</span><br><span class="line"></span><br><span class="line">动画</span><br><span class="line"></span><br><span class="line">animation：move <span class="number">2s</span> linear <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">动作名称 时长 方式 次数</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> move&#123;</span><br><span class="line"></span><br><span class="line"><span class="number">0%</span>&#123;<span class="attribute">left</span>:<span class="number">0px</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">50%</span>&#123;<span class="attribute">left</span>:<span class="number">500px</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">100%</span>&#123;<span class="attribute">left</span>:<span class="number">1000px</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> move&#123;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span>&#123;<span class="attribute">background-color</span>:red;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">to</span>&#123;<span class="attribute">background-color</span>:yellow;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//需配合定位一起使用</span><br></pre></td></tr></table></figure>



<h4 id="新增表单元素"><a href="#新增表单元素" class="headerlink" title="新增表单元素"></a>新增表单元素</h4><h5 id="email类型"><a href="#email类型" class="headerlink" title="email类型"></a>email类型</h5><blockquote>
<p>当的type属性设置为email，在提交表单时，会自动验证email域的值是否符合email的标准格式，再也不用自己用正则表达式去写email的格式验证了。</p>
</blockquote>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Email：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;useremail&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="url类型"><a href="#url类型" class="headerlink" title="url类型"></a>url类型</h5><blockquote>
<p>当的type属性设置为url，在提交表单时，会自动验证url域的值是否符合url的标准格式。</p>
</blockquote>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;link\_url&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="number类型"><a href="#number类型" class="headerlink" title="number类型"></a>number类型</h5><blockquote>
<p>当的type属性设置为number时，会自动检验输入内容是否为数字类型，您还能够设定该输入框数字的限定。</p>
</blockquote>
<p>示例</p>
<p>用于数字限定的属性：</p>
<p>Number：&lt;**input** type=”number” name=”user_num” min=”1” max=”10” /&gt;</p>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>max</td>
<td>规定允许的最大值</td>
</tr>
<tr>
<td>min</td>
<td>规定允许的最小值</td>
</tr>
<tr>
<td>step</td>
<td>规定合法的数字间隔（如果 step=“3”，则合法的数是 -3,0,3,6 等）</td>
</tr>
<tr>
<td>value</td>
<td>规定默认值</td>
</tr>
<tr>
<td>disabled</td>
<td>规定输入字段是禁用的</td>
</tr>
<tr>
<td>maxlength</td>
<td>规定输入字段的最大字符长度</td>
</tr>
<tr>
<td>pattern</td>
<td>规定用于验证输入字段的模式</td>
</tr>
<tr>
<td>readonly</td>
<td>规定输入字段的值无法修改</td>
</tr>
<tr>
<td>required</td>
<td>规定输入字段的值是必须的</td>
</tr>
<tr>
<td>size</td>
<td>规定输入字段的可见字符</td>
</tr>
</tbody></table>
<h5 id="range类型"><a href="#range类型" class="headerlink" title="range类型"></a>range类型</h5><blockquote>
<p>range 类型用于应该包含一定范围内数字值的输入域。range 类型显示为滑动条。您还能够设定对所接受的数字的限定。</p>
</blockquote>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user\_range&quot;</span> <span class="attr">min</span>=<span class="string">&quot;1&quot;</span> <span class="attr">max</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>其用于数字限定的属性同number类型前四个。</p>
<h5 id="Date-Pickers-日期选择器类型"><a href="#Date-Pickers-日期选择器类型" class="headerlink" title="Date Pickers 日期选择器类型"></a>Date Pickers 日期选择器类型</h5><p>用于选取日期和时间。</p>
<p>示例</p>
<p>Date：&lt;**input** type=”date” name=”user_date” /&gt;</p>
<ul>
<li><p>  date 选取日、月、年</p>
</li>
<li><p>  month 选取月、年</p>
</li>
<li><p>  week 选取周和年</p>
</li>
<li><p>  time 选取时间（小时和分钟）</p>
</li>
<li><p>  datetime 选取时间、日、月、年（UTC时间，有时区）</p>
</li>
<li><p>  datetime-local 选取时间、日、月、年（本地时间）</p>
</li>
</ul>
<h5 id="search类型"><a href="#search类型" class="headerlink" title="search类型"></a>search类型</h5><blockquote>
<p>用于搜索字段，比如站点搜索或 Google 搜索（搜索字段的表现类似常规文本字段）。</p>
</blockquote>
<p>示例</p>
<p>Search Google:&lt;**input** type=”search” name=”googlesearch”&gt;</p>
<h5 id="color类型"><a href="#color类型" class="headerlink" title="color类型"></a>color类型</h5><blockquote>
<p>当的type属性设置为color，会自动检验输入内容是否为颜色格式。</p>
</blockquote>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Select your favorite color:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;favcolor&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="tel类型"><a href="#tel类型" class="headerlink" title="tel类型"></a>tel类型</h5><blockquote>
<p>当的type属性设置为tel，会自动检验输入内容是否为电话号码格式。</p>
</blockquote>
<p>示例</p>
<p>Telephone:&lt;**input** type=”tel” name=”usrtel”&gt;</p>
<h4 id="存储机制"><a href="#存储机制" class="headerlink" title="存储机制"></a>存储机制</h4><p>localStorage（本地存储）和sessionStorage（会话存储）是HTML5的WebStorage提供的两种API</p>
<h5 id="设置存储"><a href="#设置存储" class="headerlink" title="设置存储"></a>设置存储</h5><ol>
<li>localStorage</li>
</ol>
<p>保存数据的方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sessionStorage.<span class="built_in">setItem</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line"><span class="comment">//或者写成</span></span><br><span class="line">sessionStorage.key=<span class="string">&quot;value&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>读取数据的方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">变量=sessionStorage.<span class="built_in">getItem</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="comment">//或者写成</span></span><br><span class="line">变量=sessionStorage.key;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>localStorage</li>
</ol>
<p>保存数据的方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">localStorage.<span class="built_in">setItem</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line"><span class="comment">//或者写成</span></span><br><span class="line">localStorage.key=<span class="string">&quot;value&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>读取数据的方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">变量=localStorage.<span class="built_in">getItem</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="comment">//或者写成</span></span><br><span class="line">变量=localStorage.key;</span><br></pre></td></tr></table></figure>

<h5 id="生命周期："><a href="#生命周期：" class="headerlink" title="生命周期："></a>生命周期：</h5><p>1、localStorage</p>
<p>localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。除非主动删除数据，否则数据永远不会消失。</p>
<p>2、sessionStorage</p>
<p>sessionStorage的生命周期是仅在当前会话下有效。sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。</p>
<h5 id="存储大小："><a href="#存储大小：" class="headerlink" title="存储大小："></a>存储大小：</h5><p>localStorage和sessionStorage的存储数据大小一般都是：5MB</p>
<h5 id="存储位置："><a href="#存储位置：" class="headerlink" title="存储位置："></a>存储位置：</h5><p>localStorage和sessionStorage都保存在客户端，不与服务器进行交互通信。</p>
<h5 id="存储内容类型："><a href="#存储内容类型：" class="headerlink" title="存储内容类型："></a>存储内容类型：</h5><p>localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理</p>
<h5 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h5><p>localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。</p>
<p>sessionStorage：敏感账号一次性登录；</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery实战指南</title>
    <url>/2023/06/12/JQuery&amp;Bootstrap/</url>
    <content><![CDATA[<h1 id="JQuery-amp-Bootstrap笔记"><a href="#JQuery-amp-Bootstrap笔记" class="headerlink" title="JQuery&amp;Bootstrap笔记"></a>JQuery&amp;Bootstrap笔记</h1><h2 id="jQuery安装"><a href="#jQuery安装" class="headerlink" title="jQuery安装"></a>jQuery安装</h2><p>通过<a href="jquery.com">jquery.com</a>下载</p>
<p>通过script标签引入</p>
<h2 id="jQuery是什么"><a href="#jQuery是什么" class="headerlink" title="jQuery是什么"></a>jQuery是什么</h2><p>属于js家族，也是一种流行的js程序库，他对js对象和函数的封装</p>
<h2 id="jQuery语法"><a href="#jQuery语法" class="headerlink" title="jQuery语法"></a>jQuery语法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&quot;p&quot;</span>).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h2><p><strong>基础事件</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 页面加载事件</span></span><br><span class="line"></span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击事件</span></span><br><span class="line"></span><br><span class="line">    $(<span class="title class_">Select</span>).<span class="title function_">click</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//双击事件</span></span><br><span class="line"></span><br><span class="line">    $(select).<span class="title function_">dblclick</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//鼠标上移  mouseover在鼠标上移到子元素依旧执行，mouseenter不执行</span></span><br><span class="line"></span><br><span class="line">    $(select).<span class="title function_">mouseover</span>()</span><br><span class="line"></span><br><span class="line">    $(select).<span class="title function_">mouseenter</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//鼠标下移  mouseout鼠标离开子元素也触发，mouseleave不触发</span></span><br><span class="line"></span><br><span class="line">    $(select).<span class="title function_">mouseout</span>()</span><br><span class="line"></span><br><span class="line">    $(select).<span class="title function_">mouseleave</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//键盘按下的过程</span></span><br><span class="line"></span><br><span class="line">    $(select).<span class="title function_">keydown</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//键盘按下</span></span><br><span class="line"></span><br><span class="line">    $(select).<span class="title function_">keypress</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//键盘松开</span></span><br><span class="line"></span><br><span class="line">    $(select).<span class="title function_">keyup</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表单提交</span></span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;form&quot;</span>).<span class="title function_">submit</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取焦点</span></span><br><span class="line"></span><br><span class="line">    $(select).<span class="title function_">focus</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//失去焦点</span></span><br><span class="line"></span><br><span class="line">    $(select).<span class="title function_">blur</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滚动条滚动</span></span><br><span class="line"></span><br><span class="line">$(select).<span class="title function_">scroll</span>()</span><br></pre></td></tr></table></figure>

<p><strong>复合事件</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// hover等同于mouseover和mouseout事件的组合</span></span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).<span class="title function_">hover</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">show</span>()</span><br><span class="line"></span><br><span class="line">    &#125;,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">hide</span>()</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// .toggle不带参数=show()+hide()</span></span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).<span class="title function_">toggle</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击第一次弹窗1，点击第二次弹窗2，点击第三次弹窗1</span></span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).<span class="title function_">toggle</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加和移除Class名为hhh的样式</span></span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).<span class="title function_">toggleClass</span>(<span class="string">&quot;hhh&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>绑定事件</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    $(<span class="string">&quot;button&quot;</span>).<span class="title function_">bind</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;点&quot;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p><strong>解除绑定</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">unbind</span>(<span class="string">&quot;mouseot&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 标签选择器</span></span><br><span class="line">    $(<span class="string">&quot;p&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ID选择器</span></span><br><span class="line">    $(<span class="string">&quot;\#aaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类选择器</span></span><br><span class="line">    $(<span class="string">&quot;.class&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并集选择器</span></span><br><span class="line">    $(<span class="string">&quot;p,div&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交集选择器</span></span><br><span class="line">    $(<span class="string">&quot;p.span&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局选择器</span></span><br><span class="line">$(<span class="string">&quot;\*&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 后代选择器</span></span><br><span class="line">    $(<span class="string">&quot;#menu span&quot;</span>)     <span class="comment">//选取\#menu下的所有span元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子选择器</span></span><br><span class="line">    $(<span class="string">&quot;#menu&gt;span&quot;</span>)     <span class="comment">//选取\#menu下的子元素span</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相邻兄弟选择器</span></span><br><span class="line">    $(<span class="string">&quot;h2+dl&quot;</span>)          <span class="comment">//选取紧邻h2的同辈元素dl</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同辈元素选择器</span></span><br><span class="line">    $(<span class="string">&quot;h2~dl&quot;</span>)          <span class="comment">//选取h2之后的同辈元素dl</span></span><br></pre></td></tr></table></figure>



<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>   </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;[href]&quot;</span>)         <span class="comment">//选取含有href的所有元素</span></span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;[href=&#x27;#&#x27;]&quot;</span>)     <span class="comment">//选取href为\#的所有元素</span></span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;[href !=&#x27;#&#x27;&quot;</span>)   <span class="comment">//选取href值不为\#的元素</span></span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;[href ^=&#x27;en&#x27;]&quot;</span>)  <span class="comment">//选取href值为en开头的元素</span></span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;[href $=&#x27;.jpg&#x27;]&quot;</span>)<span class="comment">//选取href值为.jpg结束的元素</span></span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;[href *=&#x27;txt&#x27;]&quot;</span>) <span class="comment">//选取href值含有txt的元素</span></span><br><span class="line"></span><br><span class="line">.<span class="title function_">hasChildNodes</span>()    <span class="comment">//判断是否有子节点返回true或false</span></span><br></pre></td></tr></table></figure>



<h3 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h3><p>    $(“li:first”)           //选取所有li元素中的第一个li元素</p>
<p>    $(“li:last”)            //选取所有li元素中的最后一个li元素</p>
<p>    $(“li:not(.there)”)     //选取所有li元素中class不是there的元素</p>
<p>    $(“li:even”)            //选取所有li元素中索引为偶数的元素</p>
<p>    $(“li:odd”)             //选取所有li元素中索引为奇数的元素</p>
<p>    $(“li:eq(1)”)           //选取所有li元素索引等于1的元素</p>
<p>    $(“li:gt(1)”)           //选取所有li元素索引大于1的元素</p>
<p>    $(“li:lt(1)”)           //选取所有li元素索引小于1的元素</p>
<p>    $(“:header”)            //选取所有标题元素</p>
<p>    $(“:focus”)             //选取当前获取焦点的元素</p>
<p>    $(“:animated”)          //选取当前所有动画元素</p>
<h3 id="可见性过渡元素"><a href="#可见性过渡元素" class="headerlink" title="可见性过渡元素"></a>可见性过渡元素</h3><p>    $(“:visible”)           //选取所有可见的元素</p>
<p>    $(“:hidden”)            //选取所有隐藏的元素</p>
<p>hidden不仅包含样式属性display为none的元素也包括文本隐藏域type=“hidden”和visible：hidden之类的元素</p>
<h2 id="元素属性获取和设置"><a href="#元素属性获取和设置" class="headerlink" title="元素属性获取和设置"></a>元素属性获取和设置</h2><p>    // 使用jQuery获取设置元素属性</p>
<p>    $(“div”).attr(“width”)</p>
<p>    $(“div”).attr({“width”:”100px”,”height”:”100px”})</p>
<p>    // 获取设置内容</p>
<p>    $(“div”).text()</p>
<p>    // 获取其内部标签和内容</p>
<p>    $(“div”).html()</p>
<p>    // 获取value属性</p>
<p>$(“div”).val()</p>
<p>    // 删除元素属性</p>
<p>    $(“div”).removeAttr(name);</p>
<h2 id="jQuery操作页面元素"><a href="#jQuery操作页面元素" class="headerlink" title="jQuery操作页面元素"></a>jQuery操作页面元素</h2><h3 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h3><p><strong>使用addClass()方法为元素添加class属性</strong></p>
<blockquote>
<p>$(“p”).addClass(“hhh”)</p>
</blockquote>
<p>使用removeClass()方法删除元素属性</p>
<p>$(“div”).removeClass(“aaa”)</p>
<p><strong>使用css()设置css样式</strong></p>
<p>单个样式：</p>
<blockquote>
<p>$(“p”).css(“color”,”green”)</p>
</blockquote>
<p>设置多个样式</p>
<blockquote>
<p>$(“p”).css({“color”:”green”,”font-size”:”50px”})</p>
</blockquote>
<p><strong>.show()和.hide()属性设置元素的显示和隐藏</strong></p>
<p><strong>$(“#title”).html() 等同于document.getElementById().innerHTML</strong></p>
<h3 id="jQuery和DOM对象转化"><a href="#jQuery和DOM对象转化" class="headerlink" title="jQuery和DOM对象转化"></a>jQuery和DOM对象转化</h3><blockquote>
<p>jquery转DOM对象</p>
<p>var $textname=$(“#textname”) //返回的都是数组</p>
<p>var textname=$textname[0]</p>
<p>DOM对象转jquery对象</p>
<p>var textname=document.getElementById(“textname”)</p>
<p>var $testname=$(textname)</p>
</blockquote>
<h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3><h4 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h4><p>    b.prepend(a)        //内部头插</p>
<p>    b.append(a)         //内部尾插</p>
<p>    b.before(a)         //外部头插（b的上面）</p>
<p>    b.after(a)          //外部尾插（b的下面）</p>
<h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 删除整个节点</span></span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;p&quot;</span>).<span class="title function_">remove</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除整个节点，但保留元素的绑定事件和附加数据</span></span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;p&quot;</span>).<span class="title function_">detach</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 例如：</span></span><br><span class="line"></span><br><span class="line">        $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> x;</span><br><span class="line"></span><br><span class="line">            $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">                x = $(<span class="string">&quot;p&quot;</span>).<span class="title function_">detach</span>();</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            $(<span class="string">&quot;#btn2&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">                $(<span class="string">&quot;body&quot;</span>).<span class="title function_">prepend</span>(x);</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空节点里面的内容</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">empty</span>()</span><br></pre></td></tr></table></figure>



<h4 id="替换元素"><a href="#替换元素" class="headerlink" title="替换元素"></a>替换元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//替换节点</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">replaceWith</span>(<span class="string">&quot;&lt;div&gt;111&lt;/div&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">        <span class="comment">//复制本身及子元素和他们的事件处理</span></span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;p&quot;</span>).<span class="title function_">clone</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//仅复制本身及子元素（默认值）</span></span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;p&quot;</span>).<span class="title function_">clone</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>



<h4 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h4><h5 id="向上遍历"><a href="#向上遍历" class="headerlink" title="向上遍历"></a>向上遍历</h5><p>        //返回被选元素的直接父元素</p>
<p>        $(“div”).parent();</p>
<p>        //返回被选元素的所有祖先元素，它一路向上直到文档的根元素</p>
<p>        //这句话是返回所有 <div> 元素的所有祖先，并且它是 <ul> 元素</p>
<p>        $(“div”).parents(“ul”);</p>
<h5 id="同辈遍历"><a href="#同辈遍历" class="headerlink" title="同辈遍历"></a>同辈遍历</h5><p>         //返回被选元素的所有同胞元素</p>
<p>         //也可以设置指定元素</p>
<p>         $(“div”).siblings(“ul”);</p>
<p>         //返回被选元素的下一个同胞元素</p>
<p>         $(“div”).next();</p>
<p>         //返回被选元素的所有跟随的同胞元素</p>
<p>         $(“div”).nextAll();</p>
<p>         //返回被选元素的上一个同胞元素</p>
<p>         $(“div”).prev();</p>
<p>         //返回被选元素的所有上方跟随的同胞元素</p>
<p>         $(“div”).prevAll();</p>
<h5 id="向下遍历"><a href="#向下遍历" class="headerlink" title="向下遍历"></a>向下遍历</h5><p>        //返回被选元素的所有直接子元素</p>
<p>        $(“div”).children();</p>
<p>        //返回被选元素的后代指定元素</p>
<p>        $(“div”).find();</p>
<h2 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h2><h3 id="显示-隐藏"><a href="#显示-隐藏" class="headerlink" title="显示/隐藏"></a>显示/隐藏</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">show</span>(<span class="number">1000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">执行时间和回调函数</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">.<span class="title function_">hide</span>(<span class="number">1000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">执行时间和回调函数</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">复合：.<span class="property">toggle</span></span><br></pre></td></tr></table></figure>



<h3 id="滑入-滑出"><a href="#滑入-滑出" class="headerlink" title="滑入/滑出"></a>滑入/滑出</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">slideDown</span>(<span class="number">1000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">执行时间和回调函数</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">.<span class="title function_">slideUp</span>(<span class="number">1000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">执行时间和回调函数</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">复合：.<span class="property">slideToggle</span></span><br></pre></td></tr></table></figure>



<h3 id="淡入-淡出"><a href="#淡入-淡出" class="headerlink" title="淡入/淡出"></a>淡入/淡出</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">fadeIn</span>(<span class="number">1000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">执行时间和回调函数</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">.<span class="title function_">fadeOut</span>(<span class="number">1000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">执行时间和回调函数</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">复合：.<span class="property">fadeToggle</span></span><br></pre></td></tr></table></figure>



<h3 id="逐渐改变物体透明度"><a href="#逐渐改变物体透明度" class="headerlink" title="逐渐改变物体透明度"></a>逐渐改变物体透明度</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">fadeTo</span>(<span class="number">1000</span>,<span class="number">0.4</span>)</span><br></pre></td></tr></table></figure>



<h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><h3 id="Bootstrap基础"><a href="#Bootstrap基础" class="headerlink" title="Bootstrap基础"></a>Bootstrap基础</h3><h4 id="什么是Bootstrap"><a href="#什么是Bootstrap" class="headerlink" title="什么是Bootstrap"></a>什么是Bootstrap</h4><blockquote>
<p>是一款基于html、css、js的一款前端框架</p>
</blockquote>
<h4 id="需要引入css和js包"><a href="#需要引入css和js包" class="headerlink" title="需要引入css和js包"></a>需要引入css和js包</h4><blockquote>
<p><a href="https://v5.bootcss.com/docs/getting-started/download/">下载 Bootstrap · Bootstrap v5 中文文档 v5.1 | Bootstrap 中文网 (bootcss.com)</a></p>
</blockquote>
<h3 id="栅格布局（响应式布局）"><a href="#栅格布局（响应式布局）" class="headerlink" title="栅格布局（响应式布局）"></a>栅格布局（响应式布局）</h3><h4 id="同一套页面可以兼容不同分辨率的设备"><a href="#同一套页面可以兼容不同分辨率的设备" class="headerlink" title="同一套页面可以兼容不同分辨率的设备"></a>同一套页面可以兼容不同分辨率的设备</h4><p>实现：依赖于栅格系统：将一行平均分成12个格子，可以指定元素占几个格子</p>
<p>步骤：</p>
<ol>
<li> 定义容器，相当于之前的table</li>
</ol>
<p>容器分类</p>
<ul>
<li><p>  .container 两边留白</p>
</li>
<li><p>  .container-fluid 占一整行</p>
</li>
</ul>
<ol>
<li><p> 定义行，相当于tr .row</p>
</li>
<li><p> 定义元素，指定该元素在不同设备上所占的格子数。样式：col-设备代号-格子数</p>
</li>
</ol>
<p>设备代号</p>
<ul>
<li><p>  xs：超小屏幕 手机（&lt;768px）:col-xs-12</p>
</li>
<li><p>  sm:平板（&gt;=768）</p>
</li>
<li><p>  md:笔记本电脑（&gt;=992）</p>
</li>
<li><p>  lg电脑显示器（&gt;=1200）</p>
</li>
</ul>
<blockquote>
<p>注意：向上兼容，设置了手机电脑端也有效反之则不行</p>
</blockquote>
<h3 id="基础模块"><a href="#基础模块" class="headerlink" title="基础模块"></a>基础模块</h3><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p><img src="/img/Web%E5%89%8D%E7%AB%AF/image011.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><p><img src="/img/Web%E5%89%8D%E7%AB%AF/image012.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p><img src="/img/Web%E5%89%8D%E7%AB%AF/image013.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>js编程指南</title>
    <url>/2023/09/18/Javascript/</url>
    <content><![CDATA[<h1 id="JavaScript笔记"><a href="#JavaScript笔记" class="headerlink" title="JavaScript笔记"></a>JavaScript笔记</h1><h2 id="js简介"><a href="#js简介" class="headerlink" title="js简介"></a>js简介</h2><h3 id="JavaScript是什么"><a href="#JavaScript是什么" class="headerlink" title="JavaScript是什么"></a>JavaScript是什么</h3><blockquote>
<p>JavaScript是一种基于对象和事件驱动的、并具有安全性能的脚本语言（脚本就是一段程序用来完成某项特殊功能）</p>
</blockquote>
<h3 id="js的特点"><a href="#js的特点" class="headerlink" title="js的特点"></a>js的特点</h3><ol>
<li><p> 向HTML页面中添加交互行为</p>
</li>
<li><p> 脚本语言、语法和java类似</p>
</li>
<li><p> 解释性语言边解释边执行</p>
</li>
<li><p> 一般用来编写客户端脚本</p>
</li>
<li><p> 独立于平台</p>
</li>
</ol>
<h3 id="为什么要学习js"><a href="#为什么要学习js" class="headerlink" title="为什么要学习js"></a>为什么要学习js</h3><ol>
<li><p> 美化网页</p>
</li>
<li><p> 缓解服务器端压力</p>
</li>
</ol>
<h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="引入js的方法"><a href="#引入js的方法" class="headerlink" title="引入js的方法"></a>引入js的方法</h3><ol>
<li><p>使用&lt;script&gt;标签（可以加在HTML文件的任意地方）</p>
</li>
<li><p>外部js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;index.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>直接在HTML标签中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">onclick</span>=<span class="string">&quot;javascript:alert(&#x27;Hello world&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="核心语法"><a href="#核心语法" class="headerlink" title="核心语法"></a>核心语法</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ol>
<li> 先声明变量再赋值</li>
</ol>
<p>​        例如：var width； </p>
<p>​        var用于声明变量的关键字</p>
<p>​        width=5； </p>
<p>​        width是变量名</p>
<ol start="2">
<li>同时声明和赋值变量</li>
</ol>
<p>​        var catname-“ ”；</p>
<p>​        var x，y，z=10；</p>
<ol start="3">
<li>不声明直接赋值（不推荐）</li>
</ol>
<p>​        width=5；</p>
<h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><ol>
<li><p> 有数字字母下划线和$组成，不能有空格</p>
</li>
<li><p> 首字母不能是数字</p>
</li>
<li><p> 不能用js关键字与保留字</p>
</li>
<li><p> 区分大小写</p>
</li>
<li><p> 最大长度为255</p>
</li>
</ol>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>typeof（）：用于检测变量的返回值（特殊的运算符）</p>
<p>注：undefined和null和NaN的区别：尽管两个值相等但它们的含义不同，undefined未对该变量赋值 null表示赋了一个空值 NaN是一种number数据类型</p>
<h4 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h4><p>字符串对象.length 返回字符串的长度</p>
<p>.CharAt(2) 返回字符串指定位置的字符</p>
<p>.substring(3,5) 返回截取的字符串</p>
<p>.slice(3,5) 返回截取的字符串</p>
<p>（第一位指从哪开始截取，第二位指截到哪一位）</p>
<p>.substr(2,3) 返回截取的字符串</p>
<p>（第一位指从第几位开始截取，第二位指从那一位基础上向后截取几个字符）</p>
<p>.indexof(str,3) 查找某个字符在字符串中首次出现的位置</p>
<p>.split(“ “) 将字符串分割成为数组，将空格作为分隔符</p>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><blockquote>
<p>数组：存储一组数据的基可以是任意数据类型</p>
<p>创建的三种方式</p>
<p>//定义并赋值</p>
<p>var 数组名=new Array(“1”,”2”,”3”)；</p>
<p>//先定义后赋值,长度由最大的决定</p>
<p>var 数组名=new Array(2);</p>
<p>a[0]=”1”;</p>
<p>a[1]=”2”;</p>
<p>//不定义直接赋值</p>
<p>var 数组名=[“1”,”2”,”3”];</p>
<p>数组的方法：</p>
<p>push属性：向数组末尾添加元素并且返回新的数组长度</p>
<p>join() 使数组元素以()里的符号进行连接</p>
<p>sort 对数组排序</p>
<p>function paixv（a,b）{</p>
<p>return a-b;</p>
<p>}</p>
<p>document.write(attr.sort(paixv))</p>
<p>pop() 删除数组末尾的元素（返回的是删除的元素）</p>
<p>unshift() 在数组前面添加元素（返回的是数组元素总数）</p>
<p>shift() 在数组前面删除元素（返回被删除的元素）</p>
<p>splice（2,2）从数组指定位置向后删除元素</p>
<p>splice有三个参数：第一个参数是删除的起始位置</p>
<p>第二个参数是删除的数量</p>
<p>第三个参数是在原位置添加的元素（可以是多个用逗号隔开）</p>
</blockquote>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><table>
<thead>
<tr>
<th>类型</th>
<th>运算符</th>
</tr>
</thead>
<tbody><tr>
<td>算术运算符</td>
<td>+、-、*、/、%、++、–</td>
</tr>
<tr>
<td>赋值运算符</td>
<td>=,+=，-=，*=，/=，%=</td>
</tr>
<tr>
<td>比较运算符</td>
<td>&gt;、&lt;、&gt;=、&lt;=、==、=、!=、!==</td>
</tr>
<tr>
<td>逻辑运算符</td>
<td>&amp;&amp;，||，！</td>
</tr>
</tbody></table>
<blockquote>
<p>优先级：！&gt;算术运算符&gt;比较运算符&gt;赋值运算符&gt;&amp;&amp;&gt;||</p>
</blockquote>
<h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><h4 id="if判断语句"><a href="#if判断语句" class="headerlink" title="if判断语句"></a>if判断语句</h4><blockquote>
<p>var i=0;</p>
<p>    if(i&lt;=10){</p>
<p>        true返回值</p>
<p>    }else{</p>
<p>        false返回值</p>
<p>}</p>
<p>三元运算符：2+3 ？ true：false；</p>
</blockquote>
<h4 id="switch判断"><a href="#switch判断" class="headerlink" title="switch判断"></a>switch判断</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(i=<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> i=<span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> i=<span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> i=<span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line"></span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;num&quot;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>)&#123;</span><br><span class="line">   <span class="variable language_">document</span>.<span class="title function_">write</span>(i)</span><br><span class="line">   i++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">   <span class="variable language_">document</span>.<span class="title function_">write</span>(i)</span><br><span class="line">&#125;<span class="keyword">while</span>(i&gt;<span class="number">1</span>) <span class="comment">//至少执行一次</span></span><br></pre></td></tr></table></figure>



<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(“字符串”) 将字符串转换为整形数字，只取整数值</span><br><span class="line"><span class="built_in">parseFloat</span>(“字符串”)将字符串转化为小数</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是字符串就返回NaN</span></span><br><span class="line"><span class="built_in">isNaN</span>（） 用来检测是否为数字，返回boolean类型（是返回flase）</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>() 将参数的字符串转化成js代码运行</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(“提示文字”) 普通弹窗</span><br><span class="line">点击确定返回<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">confirm（“提示文字”） 确定弹窗</span><br><span class="line">点击确定返回<span class="literal">true</span>，点击取消返回<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">prompt（“提示文字”） 文本框弹窗</span><br><span class="line">点击确定将文本框文字返回</span><br></pre></td></tr></table></figure>

<h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名（参数<span class="number">1</span>，参数<span class="number">2</span>，…）&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><h4 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> date=<span class="keyword">new</span> <span class="title class_">Date</span>() <span class="comment">//创建日期对象</span></span><br><span class="line"></span><br><span class="line">    date.<span class="title function_">getFullYear</span>()  <span class="comment">//获取当前年份</span></span><br><span class="line"></span><br><span class="line">    date.<span class="title function_">getMonth</span>()+<span class="number">1</span>   <span class="comment">//获取当前月份</span></span><br><span class="line"></span><br><span class="line">    date.<span class="title function_">getDay</span>()      <span class="comment">//获取当前星期数字0\~6</span></span><br><span class="line"></span><br><span class="line">    date.<span class="title function_">getDate</span>()     <span class="comment">//获取当前天</span></span><br><span class="line"></span><br><span class="line">    date.<span class="title function_">getHours</span>()     <span class="comment">//获取当前小时</span></span><br><span class="line"></span><br><span class="line">    date.<span class="title function_">getMinutes</span>()   <span class="comment">//获取当前分钟数</span></span><br><span class="line"></span><br><span class="line">    date.<span class="title function_">getSeconds</span>()   <span class="comment">//获取当前秒数</span></span><br><span class="line"></span><br><span class="line">    date.<span class="title function_">getTime</span>()      <span class="comment">//返回从1970年至今的秒数</span></span><br></pre></td></tr></table></figure>



<h4 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="property">PI</span>         <span class="comment">//获取圆周率</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>()     <span class="comment">//对数字进项上舍入</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>()    <span class="comment">//对数字进项下舍入</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>()    <span class="comment">//对数字进行四舍五入</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>()   <span class="comment">//返回0\~1之间的随机数</span></span><br></pre></td></tr></table></figure>



<h4 id="String对象-1"><a href="#String对象-1" class="headerlink" title="String对象"></a>String对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;asdfghjkl&quot;</span>;</span><br><span class="line"></span><br><span class="line">str.<span class="property">length</span>           <span class="comment">//返回字符串的长度</span></span><br><span class="line"></span><br><span class="line">str.<span class="title function_">charAt</span>(<span class="number">2</span>)        <span class="comment">//返回指定位置的字符</span></span><br><span class="line"></span><br><span class="line">str.<span class="title function_">substring</span>(<span class="number">3</span>,<span class="number">5</span>)   <span class="comment">//返回截取的字符（从第三到第五位）</span></span><br><span class="line"></span><br><span class="line">str.<span class="title function_">substr</span>(<span class="number">2</span>,<span class="number">3</span>)     <span class="comment">//返回截取的字符串（第一位指从第几位开始截取，第二位指从那一位基础上向后截取几个字符）</span></span><br><span class="line"></span><br><span class="line">str.<span class="title function_">slice</span>(<span class="number">3</span>,<span class="number">5</span>)      <span class="comment">//返回截取的字符串（第一位指从哪开始截取，第二位指截到哪一位）</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">indexof</span>(str,f)      <span class="comment">//查找某个字符在字符串中首次出现的位置</span></span><br><span class="line"></span><br><span class="line">str.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)      <span class="comment">//将字符串分割成为数组，将空格作为分隔符</span></span><br></pre></td></tr></table></figure>



<h4 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h4><p>    var arr=new Array()</p>
<p>    arr.push        //向数组末尾添加元素并且返回新的数组长度</p>
<p>    arr.join()      //使数组元素以()里的符号进行连接</p>
<p>    // sort     对数组排序</p>
<p>    //  function paixv（a,b）{</p>
<p>    //      return a-b;</p>
<p>    // }</p>
<p>    // document.write(attr.sort(paixv))</p>
<p>    arr.pop()       //删除数组末尾的元素（返回的是删除的元素）</p>
<p>    arr.unshift()   //在数组前面添加元素（返回的是数组元素总数）</p>
<p>    arr.shift()     //在数组前面删除元素（返回被删除的元素）</p>
<p>    arr.splice(2,2) //从数组指定位置向后删除元素</p>
<p>    // splice有三个参数：第一个参数是删除的起始位置</p>
<p>    //                  第二个参数是删除的数量</p>
<p>    //                  第三个参数是在原位置添加的元素（可以是多个用逗号隔开）</p>
<h4 id="Global对象"><a href="#Global对象" class="headerlink" title="Global对象"></a>Global对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;adsfghj&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">4415465</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">escape</span>(str)         <span class="comment">//对字符串编码</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;alert(str)&quot;</span>)   <span class="comment">//把字符串解析为JavaScript代码并执行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isNaN</span>(str)    <span class="comment">//判断一个值是否是数字，是返回false不是返回true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>()　　　 <span class="comment">//解析一个字符串并返回一个整数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseFloat</span>()　　<span class="comment">//解析一个字符串并返回一个浮点数</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">number</span>() 　　　 <span class="comment">//把对象的值转换为数字</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">string</span>()        <span class="comment">//把对象的值转换为字符串</span></span><br></pre></td></tr></table></figure>



<h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><ul>
<li><p>onload 一个页面或一幅图像加载完成</p>
</li>
<li><p>onclick 鼠标点击某个对象</p>
</li>
<li><p>onmouseover 鼠标移到某个元素上</p>
</li>
<li><p>onmouseout 鼠标下移</p>
</li>
<li><p>onkeydown 键盘按键按下</p>
</li>
<li><p>onchange 域的内容被改变</p>
</li>
</ul>
<h4 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h4><p>setInterval(“函数名”，1000) 节拍器</p>
<p>setTimeout(“函数名”，1000) 定时器</p>
<p>open(“弹出窗口的URL”,”窗口名称”,”窗口特性”)</p>
<p>width，height 窗口文档显示区的高度和宽度</p>
<p>left，top 窗口的x，y轴</p>
<p>toolbar=yes/no 是否显示浏览器的工具栏默认为yes</p>
<p>scrollbars=res/no 是否显示滚动条</p>
<p>close()</p>
<h4 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h4><blockquote>
<p>.length 返回历史列表中的网址数</p>
<p>.go(-1) 加载某个指定的页面</p>
<p>.back() 返回上一个页面的URL</p>
<p>.forword() 返回下一个页面的URL</p>
</blockquote>
<h4 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h4><blockquote>
<p>host 设置货返回主机名和当前URL的端口号</p>
<p>hostname 设置或返回当前URL的主机名</p>
<p>href =url（‘ ’） 设置或返回当前完整的URL</p>
<p>.reload() 重新加载当前文档</p>
<p>.replace() 用心的文档替换当前文档</p>
</blockquote>
<h4 id="Navigator对象"><a href="#Navigator对象" class="headerlink" title="Navigator对象"></a>Navigator对象</h4><blockquote>
<p>appCodeName 返回浏览器的代码名</p>
<p>appName 返回浏览器的名称</p>
<p>appVersion 返回浏览器的平台和版本信息</p>
<p>platform 返回运行浏览器的操作系统平台</p>
</blockquote>
<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><h4 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h4><blockquote>
<p>操作HTMl文档提供的属性和方法</p>
</blockquote>
<h4 id="节点（Node）"><a href="#节点（Node）" class="headerlink" title="节点（Node）"></a>节点（Node）</h4><ul>
<li><p>  HTML中每个标签或元素都是一个节点</p>
</li>
<li><p>  整个文档是一个文档节点</p>
</li>
<li><p>  每个HTML标签是一个元素节点</p>
</li>
<li><p>  包含在HTML元素中的文本是文本节点</p>
</li>
<li><p>  每个HTML属性是一个属性节点</p>
</li>
</ul>
<blockquote>
<p>注释属于注释节点</p>
<p><strong>因此一个HTML文件可以看作是所有元素组成的一个节点树，各元素之间有级别的划分</strong></p>
</blockquote>
<h4 id="document"><a href="#document" class="headerlink" title="document"></a>document</h4><p>document是window对象的子对象，通过使用document对象可以对文档中的对象内容等进行访问</p>
<p>document常用属性：</p>
<blockquote>
<p>referrer返回载入文档的URL</p>
<p>URL返回当前文档的URL</p>
</blockquote>
<p>    //获取class名为aaa的元素</p>
<p>    document.getElementById(“#aaa”)</p>
<p>    // 获取name标签为ming的元素</p>
<p>    document.getElementsByName(“ming”)</p>
<p>    // 获取标签为p的所有元素</p>
<p>    document.getElementsByTagName(“p”)[0]</p>
<p>   </p>
<p>    // 获取class名为aaa的所有元素</p>
<p>document.getElementsByClassName(“.aaa”)[0]</p>
<p>innerHTML 获取设置标签及内容</p>
<p>innerText 获取设置内容</p>
<h4 id="节点获取"><a href="#节点获取" class="headerlink" title="节点获取"></a>节点获取</h4><p>    var sp=document.getElementById(“mylist”)</p>
<p>    var p=document.getElementById(“demo”)</p>
<p>    sp.parentNode       //返回节点的父节点</p>
<p>    sp.childNodes[0]    //返回子节点的集合</p>
<p>    sp.firstChild       //返回节点的第一个子节点</p>
<p>    sp.lastChild        //返回节点的最后一个子节点</p>
<p>    sp.nextSibling      //返回下一个节点</p>
<p>   sp.previousSibling  //返回上一个节点</p>
<blockquote>
<p><strong>以上方法每个标签秋垵后都会有一个text空格的标签原因是html的缩进</strong></p>
</blockquote>
<p> </p>
<p>sp. children      //获取所有的子元素</p>
<p>    sp.firstElementChild  //返回节点的第一个元素子节点（包含内容）</p>
<p>    sp.lastElementChild   //返回节点的最后一个元素子节点</p>
<p>    sp.nextElementSibling //返回下一个元素节点</p>
<p>    sp.previousElementSibling   //返回上一个元素节点</p>
<h4 id="节点信息"><a href="#节点信息" class="headerlink" title="节点信息"></a>节点信息</h4><blockquote>
<p>nodeName：节点名称（文本nodeName名永远是#text，文档名永远是#document）</p>
<p>nodeValue：节点值（不适用于文档节点和元素节点）</p>
<p>nodeType：节点类型</p>
</blockquote>
<table>
<thead>
<tr>
<th>节点类型</th>
<th>nodeType值</th>
</tr>
</thead>
<tbody><tr>
<td>元素element</td>
<td>1</td>
</tr>
<tr>
<td>属性attr</td>
<td>2</td>
</tr>
<tr>
<td>文本text</td>
<td>3</td>
</tr>
<tr>
<td>注释comments</td>
<td>8</td>
</tr>
<tr>
<td>文档document</td>
<td>9</td>
</tr>
</tbody></table>
<h4 id="设置获取属性"><a href="#设置获取属性" class="headerlink" title="设置获取属性"></a>设置获取属性</h4><blockquote>
<p>getAttribute(“属性名”) 用来获取属性的值</p>
<p>setAttribute(“属性名”,“属性值”)用来设置属性的值</p>
</blockquote>
<h4 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h4><h5 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h5><blockquote>
<p>document.createElement(“a”);</p>
</blockquote>
<h5 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h5><blockquote>
<p>        A.appendChild(B)        //把B节点追加至A节点末尾</p>
<p>        A.insertBefore(B,C)     //把B节点插入到C节点之前</p>
<p>    </p>
<p>        A.cloneNode(boolean)    //复制某个指定的节点元素</p>
<p>    true：复制该节点以及内部所有节点 false：只复制该节点及其属性</p>
</blockquote>
<h5 id="删除和替换节点"><a href="#删除和替换节点" class="headerlink" title="删除和替换节点"></a>删除和替换节点</h5><blockquote>
<p>ul.removeChild（） 删除节点</p>
<p>ul.replaceChild(new node,old node) 替换节点</p>
</blockquote>
<h4 id="获取元素样式"><a href="#获取元素样式" class="headerlink" title="获取元素样式"></a>获取元素样式</h4><h5 id="style属性，只能获得内联样式表中css样式"><a href="#style属性，只能获得内联样式表中css样式" class="headerlink" title="style属性，只能获得内联样式表中css样式"></a>style属性，只能获得内联样式表中css样式</h5><blockquote>
<p>l2.style.backgroundColor</p>
</blockquote>
<h5 id="document-defaultview-getComputedstyle（节点，null）"><a href="#document-defaultview-getComputedstyle（节点，null）" class="headerlink" title="document.defaultview.getComputedstyle（节点，null）"></a>document.defaultview.getComputedstyle（节点，null）</h5><blockquote>
<p>document.defaultView.getComputedStyle(l2,null).backgroundColor</p>
</blockquote>
<h4 id="获取定位的元素"><a href="#获取定位的元素" class="headerlink" title="获取定位的元素"></a>获取定位的元素</h4><blockquote>
<p>offsetParent返回一个指向最近，包含该元素的父定位元素</p>
<p>offsetTop div元素上方偏移量</p>
<p>offsetLeft div元素左侧偏移量</p>
<p>clientwidth是一个只读属性返回元素的内部宽度以像素为单位，包括内边界但不包括垂直滚动条、边框和外边距</p>
<p>offentwidth和offentHeight=边框+padding+滚动条+内容</p>
<p>clientwidth和clientHeight=padding+内容</p>
</blockquote>
<h4 id="获取滚动条数据"><a href="#获取滚动条数据" class="headerlink" title="获取滚动条数据"></a>获取滚动条数据</h4><blockquote>
<p>滑动滚动条，获取元素滚动条到元素左边或顶部的距离</p>
</blockquote>
<p>    var div=document.getElementsByTagName(“div”)[0]</p>
<p>    div.onscroll=function(){</p>
<p>        p.innerText=div.scrollTop.toFixed()</p>
<p>        p.innerText=div.scrollLeft.toFixed</p>
<p>    }</p>
<h3 id="RegExp对象（正则表达式）"><a href="#RegExp对象（正则表达式）" class="headerlink" title="RegExp对象（正则表达式）"></a>RegExp对象（正则表达式）</h3><p>var reg=new RegExp（）或 var reg=/^…$/</p>
<p>1.[]:表示一个字符,该字符可以是[]中指定的内容</p>
<blockquote>
<p>[abc]:这个字符可以是a或b或c</p>
<p>[a-z] :表示任意一个小写字母</p>
<p>[a-zA-Z] :表示任意一个字母</p>
<p>[a-zA-Z0-9_] :表示任意一个数字字母下划线</p>
<p>[^abc] :该字符只要不是a或b或c</p>
</blockquote>
<p>2.预定义字符:</p>
<blockquote>
<p>. :表示任意一个字符,没有范围限制</p>
<p>\d :表示任意一个数字,等同于[0-9]</p>
<p>\D :表示不是数字</p>
<p>\w :表示任意一个单词字符,等同于[a-zA-Z0-9_]–单词指字母/数字/_</p>
<p>\W :不是单词字符</p>
<p>\s :表示任意一个空白字符</p>
<p>\S :不是空白字符</p>
</blockquote>
<p>3.量词:</p>
<blockquote>
<p>?:表示前面的内容出现0-1次</p>
<p>+:表示前面的内容最少出现1次</p>
<p>*:表示前面的内容出现任意次(0-多次)—匹配内容与+一致，只是可以一次都不写</p>
<p>{n}:表示前面的内容出现n次</p>
<p>{n,m}:表示前面的内容出现最少n次最多m次</p>
<p>{n,}:表示前面的内容出现n次以上(含n次)</p>
</blockquote>
<p>4.()用于分组,是将括号内的内容看做是一个整体</p>
<blockquote>
<p>(abc){3} 表示abc整体出现3次.</p>
<p>(abc|def){3} 表示abc或def整体出现3次.</p>
</blockquote>
<h4 id="RegExp方法"><a href="#RegExp方法" class="headerlink" title="RegExp方法"></a>RegExp方法</h4><blockquote>
<p>exec（） 检索字符串中指定的值。返回找到的值，并确定其位置。</p>
<p>test （） 检索字符串中指定的值。返回 true 或 false。</p>
</blockquote>
<h4 id="支持正则表达式的String对象方法"><a href="#支持正则表达式的String对象方法" class="headerlink" title="支持正则表达式的String对象方法"></a>支持正则表达式的String对象方法</h4><blockquote>
<p>search 检索与正则表达式相匹配的值。</p>
<p>match 找到一个或多个正则表达式的匹配。</p>
<p>replace 替换与正则表达式匹配的子串。</p>
<p>split 把字符串分割为字符串数组。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue框架</title>
    <url>/2023/02/27/Vue%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="Vue框架"><a href="#Vue框架" class="headerlink" title="Vue框架"></a>Vue框架</h1><h2 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h2><h3 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a>Vue简介</h3><p>​                是一款用于构建用户界面的<strong>渐进式框架</strong></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>vue下载地址：<a href="https://unpkg.com/vue@3.2.36/dist/vue.global.js">https://unpkg.com/vue@3.2.36/dist/vue.global.js</a></p>
<h4 id="安装脚手架vite"><a href="#安装脚手架vite" class="headerlink" title="安装脚手架vite"></a>安装脚手架vite</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm init vite@latest vue-begin -- -- template vue</span><br><span class="line"></span><br><span class="line">运行</span><br><span class="line">cd 项目名</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h4 id="安装jquery库"><a href="#安装jquery库" class="headerlink" title="安装jquery库"></a>安装jquery库</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install jquery --save-dev</span><br></pre></td></tr></table></figure>

<h4 id="安装bootstrap"><a href="#安装bootstrap" class="headerlink" title="安装bootstrap"></a>安装bootstrap</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install  --save-dev bootstrap@<span class="number">3.4</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<h4 id="安装Element-UI"><a href="#安装Element-UI" class="headerlink" title="安装Element-UI"></a>安装Element-UI</h4><p>要安装 Element UI，需要先确保你的项目使用了 Vite 作为构建工具。如果还没有安装 Vite，可以在终端中运行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g vite</span><br></pre></td></tr></table></figure>

<p>然后，在你的项目目录下打开终端，运行以下命令来安装 Element UI：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></table></figure>

<p>安装完成后，在 main.js 文件中引入 Element UI：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import ElementPlus from &#x27;element-plus&#x27;</span><br><span class="line">import &#x27;element-plus/theme-chalk/index.css&#x27;;</span><br><span class="line"></span><br><span class="line">createApp(App).use(ElementPlus).mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure>

<p>现在，Element UI 已经被成功地安装并引入到你的项目中了。</p>
<h3 id="安装并使用jquery"><a href="#安装并使用jquery" class="headerlink" title="安装并使用jquery"></a>安装并使用jquery</h3><p>在vite中不具有使用jquery的配置，因此只能通过插件将webpack的jquery注入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">安装插件</span><br><span class="line">npm i jquery @rollup/plugin-inject -S</span><br></pre></td></tr></table></figure>

<h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><h4 id="配置端口"><a href="#配置端口" class="headerlink" title="配置端口"></a>配置端口</h4><p>在vite.config中配置</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">7070</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="连接拦截"><a href="#连接拦截" class="headerlink" title="连接拦截"></a>连接拦截</h4><p>拦截局域网中想要连接所有地址</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">7070</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><p>为了避免前后端服务器联调时， fetch、xhr请求产生跨域问题，需要配置代理，同样是修改项目根目录下vite.config.ts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="line"> </span><br><span class="line">// https://vitejs.dev/config/</span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  server: &#123;</span><br><span class="line">    port: 7070,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &#x27;/api&#x27;: &#123;</span><br><span class="line">        target: &#x27;http://localhost:8080&#x27;,</span><br><span class="line">        changeOrigin: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="vue的特性"><a href="#vue的特性" class="headerlink" title="vue的特性"></a>vue的特性</h3><p>Vue框架的特性主要体现在两个方面</p>
<ol>
<li>数据驱动视图</li>
</ol>
<p>​            在使用vue的页面中，vue会监听数据的变化，从而自动重新渲染结构</p>
<ol start="2">
<li>双向数据绑定</li>
</ol>
<h3 id="vue基本使用"><a href="#vue基本使用" class="headerlink" title="vue基本使用"></a>vue基本使用</h3><ol>
<li><p>导入vue.js的script的脚本文件</p>
</li>
<li><p>在页面中声明一个将要被vue所控制的DOM区域</p>
</li>
<li><p>创建vm实例化对象</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Vue应用通过createApp函数</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">      <span class="title function_">data</span>(<span class="params"></span>) &#123;		<span class="comment">//data 选项是一个函数。Vue 在创建新组件实例的过程中调用此函数</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!!&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#wai&#x27;</span>)	</span><br><span class="line"><span class="comment">//使用.mount将app挂载应用  </span></span><br><span class="line"><span class="comment">//一个应用需要被挂载到一个 DOM 元素中，以上代码使用 mount(&#x27;#wai&#x27;) 将 Vue 应用 app 挂载到 &lt;div id=&quot;wai&quot;&gt;&lt;/div&gt; 中</span></span><br></pre></td></tr></table></figure>



<h3 id="创建根组件（应用实例）"><a href="#创建根组件（应用实例）" class="headerlink" title="创建根组件（应用实例）"></a>创建根组件（应用实例）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Const</span> <span class="keyword">const</span>=<span class="title function_">createApp</span>(&#123;</span><br><span class="line">	<span class="comment">//根组件选项</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Vue 应用</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义一个名为 runoob 的新全局组件</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;runoob&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;自定义组件!&lt;/h1&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//引入根节点</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>我们传入的createApp实际上是一个根组件，其他的所有组件都隶属于这个根组件</p>
<h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h3><blockquote>
<p>最基本的格式就是用双花括号</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  export default&#123;</span><br><span class="line">    name:&#x27;HelloWorld&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        msg:&quot;看见我就对了&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入原始HTML"><a href="#插入原始HTML" class="headerlink" title="插入原始HTML"></a>插入原始HTML</h3><p>使用v-html插入原始html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;link&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> export default&#123;</span><br><span class="line">  name:&#x27;HelloWorld&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      link:&quot;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;http://www.baidu.com&#x27;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Attribute-绑定"><a href="#Attribute-绑定" class="headerlink" title="Attribute 绑定"></a>Attribute 绑定</h3><p>可以动态更改id、class和自定义名称    :id    :class</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 :id=&quot;hao&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  export default&#123;</span><br><span class="line">    name:&#x27;HelloWorld&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        msg:&quot;看见我就对了&quot;,</span><br><span class="line">        hao:&quot;ma&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用js表达式"><a href="#使用js表达式" class="headerlink" title="使用js表达式"></a>使用js表达式</h3><p>vue已经全面支持js完整表达式，可以在双括号中进行js运算和判断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;div :id=&quot;`list-$&#123;id&#125;`&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="v-bind属性绑定"><a href="#v-bind属性绑定" class="headerlink" title="v-bind属性绑定"></a>v-bind属性绑定</h3><p>​    v-bind指令主要用于<strong>响应式的更新html的属性</strong></p>
<p>​    一般我们要想在元素节点的属性上绑定vue的data数据是不可以直接使用双花括号插入值语法来使用</p>
<p>​    如果我们想让dom属性节点与data数据绑定响应就需要使用v-bind指令</p>
<p>例如：为h1添加title属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:title</span>=<span class="string">&quot;tit&quot;</span>&gt;</span>这是一个h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app=<span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">tit</span>:<span class="string">&quot;abcd&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;div&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例如：添加class类active</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;static&quot; :class=&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    classObject: &#123;</span><br><span class="line">      active: true,</span><br><span class="line">      &#x27;text-danger&#x27;: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">则等同于class=&quot;static isActice&quot;</span><br></pre></td></tr></table></figure>

<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>只有当v-if条件为真时才进行渲染，否则不显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 v-if=&quot;flag&quot;&gt;Vue is awesome!&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  export default&#123;</span><br><span class="line">    name:&#x27;HelloWorld&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        flag:true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><p>用于为v-if设置另一个选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button @click=&quot;awesome = !awesome&quot;&gt;Toggle&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1 v-if=&quot;awesome&quot;&gt;Vue is awesome!&lt;/h1&gt;</span><br><span class="line">&lt;h1 v-else&gt;Oh no 😢&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  export default&#123;</span><br><span class="line">    name:&#x27;HelloWorld&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        flag:true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="v-show和v-if的区别"><a href="#v-show和v-if的区别" class="headerlink" title="v-show和v-if的区别"></a>v-show和v-if的区别</h3><p>v-if在设置false之后是见不到这个DOM元素的，而v-show则会相当于加了display属性none一样</p>
<h2 id="v-for列表渲染"><a href="#v-for列表渲染" class="headerlink" title="v-for列表渲染"></a>v-for列表渲染</h2><p>用v-for将一个数组映射为一组元素</p>
<p>v-for指令需要使用item in items形式的特殊语法，其中items是源数据数组，而item则是被迭代的数组元素的别名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in aaa&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;item.title&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  export default&#123;</span><br><span class="line">  name:&#x27;HelloWorld&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      aaa:[&#123;</span><br><span class="line">        id:1,</span><br><span class="line">        title:&quot;第一个列表&quot;</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        id:2,</span><br><span class="line">        title:&quot;第二个列表&quot;</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        id:3,</span><br><span class="line">        title:&quot;第三个列表&quot;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例子：点击添加数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>班级<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in students&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.sex&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">students</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&quot;alice&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">sex</span>: <span class="string">&#x27;female&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&quot;marry&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">age</span>: <span class="number">19</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">sex</span>: <span class="string">&#x27;female&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;]</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> user = &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="string">&#x27;004&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">age</span>: <span class="string">&#x27;21&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">students</span>.<span class="title function_">push</span>(user)	<span class="comment">//添加</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">del</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">students</span>.<span class="title function_">pop</span>()			<span class="comment">//删除</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        app.<span class="title function_">mount</span>(<span class="string">&quot;#center&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>使用@+事件进行绑定，methods里面写函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;dianji&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;++num&quot;</span>&gt;</span>按钮&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  export default&#123;</span><br><span class="line">  name:&#x27;HelloWorld&#x27;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    dianji()&#123;</span><br><span class="line">      num+=1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h2><p>v-model设置表单双向绑定（输入什么就获取什么），v-model=”huoqv.lazy”在失去焦点时获取内容    .number自动将输入的内容转化为数字    .trim自动去除两端的空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;huoqv&quot;&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;huoqv&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  export default&#123;</span><br><span class="line">    name:&#x27;HelloWorld&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        huoqv:&quot;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="事件处理-1"><a href="#事件处理-1" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul>
<li><code>.stop</code>：点击事件将停止传递</li>
<li><code>.prevent</code>：点击超链接之类不再重新加载</li>
<li><code>.self</code>：当有多个父级子级时只有点击它本身才回触发</li>
<li><code>.capture：谁有该事件修饰符，就先触发谁</code></li>
<li><code>.once</code>：只触发一次</li>
<li><code>.passive</code>：事件的默认行为，立即执行无需等待</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">	&lt;div style=<span class="string">&quot;width: 500px; height: 500px; background: red;&quot;</span> <span class="meta">@click</span>.stop=<span class="string">&quot;clickdiv1&quot;</span>&gt;</span><br><span class="line">		&lt;div style=<span class="string">&quot;width: 300px; height: 300px; background: blue;&quot;</span> <span class="meta">@click</span>.stop=<span class="string">&quot;clickdiv2&quot;</span>&gt;</span><br><span class="line">						</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>用于处理一些复杂逻辑运算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body <span class="keyword">class</span>=<span class="string">&quot;body&quot;</span>&gt;</span><br><span class="line">		&lt;input type=&quot;text&quot; v-model=str1 &gt;&lt;br&gt;</span><br><span class="line">		&lt;input type=&quot;text&quot; v-model=str2 &gt;</span><br><span class="line">		&lt;h2&gt;&#123;&#123;hn&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">	&lt;script&gt;</span><br><span class="line">		const app = Vue.createApp(&#123;</span><br><span class="line">			data() &#123;</span><br><span class="line">					return &#123;</span><br><span class="line">						str1: &#x27;&#x27;,</span><br><span class="line">						str2: &#x27;&#x27;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">			computed: &#123;</span><br><span class="line">				hn: &#123;</span><br><span class="line">					get() &#123;</span><br><span class="line">						return (this.str1.toUpperCase() + &quot; &quot; + this.str2.toUpperCase()).split(&#x27;&#x27;).reverse().join(&#x27;&#x27;);</span><br><span class="line">					&#125;,</span><br><span class="line">					set(newnum)&#123;</span><br><span class="line">						var new1 = newnum.split(&quot; &quot;)</span><br><span class="line">						this.str1=new1[0]</span><br><span class="line">						this.str2=new1[1]</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">		app.mount(&quot;.body&quot;)</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="监听属性"><a href="#监听属性" class="headerlink" title="监听属性"></a>监听属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">	&lt;body&gt;</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气是&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changWeacher&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气是&#123;&#123;weather&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changWeacher&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;!-- 	侦听属性watch：</span><br><span class="line">	<span class="number">1.</span>当被侦听的属性发生改变时，会自动去执行回调属性 --&gt;</span><br><span class="line">	&lt;script&gt;</span><br><span class="line">		<span class="keyword">const</span> con=<span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">			<span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="keyword">return</span>&#123;</span><br><span class="line">					<span class="attr">isHot</span>:<span class="literal">true</span>,</span><br><span class="line">					<span class="attr">weather</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">methods</span>:&#123;</span><br><span class="line">				<span class="title function_">changWeacher</span>(<span class="params"></span>)&#123;</span><br><span class="line">					<span class="variable language_">this</span>.<span class="property">isHot</span>=!<span class="variable language_">this</span>.<span class="property">isHot</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">watch</span>:&#123;</span><br><span class="line">				<span class="attr">isHot</span>:&#123;</span><br><span class="line">					<span class="comment">// 当isHot值改变时自动调用下面的方法</span></span><br><span class="line">					<span class="title function_">handler</span>(<span class="params">newVal,oldVal</span>)&#123;</span><br><span class="line">						<span class="variable language_">this</span>.<span class="property">weather</span>=newVal?<span class="string">&quot;炎热&quot;</span>:<span class="string">&quot;凉爽&quot;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					<span class="comment">// 初始化时,让handler先执行一次</span></span><br><span class="line">					<span class="attr">immediate</span>:<span class="literal">true</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">		</span><br><span class="line">		con.<span class="title function_">mount</span>(<span class="string">&quot;#div1&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="过滤器filter（vue3弃用）"><a href="#过滤器filter（vue3弃用）" class="headerlink" title="过滤器filter（vue3弃用）"></a>过滤器filter（vue3弃用）</h2><h3 id="过滤器作用"><a href="#过滤器作用" class="headerlink" title="过滤器作用"></a>过滤器作用</h3><p>​    用来格式化数据的一个函数。过滤器<strong>不会修改原始数据</strong>，它的作用是过滤数据，就是对数据进行加工处理并返回处理后的数据，比如做一些数据格式上的修改，状态修改等。</p>
<h3 id="过滤器分为两种"><a href="#过滤器分为两种" class="headerlink" title="过滤器分为两种"></a>过滤器分为两种</h3><p>​        组件内的过滤器（组件内有效）</p>
<p>​        全局过滤器（所有组件共享）</p>
<h3 id="定义过滤器"><a href="#定义过滤器" class="headerlink" title="定义过滤器"></a>定义过滤器</h3><ul>
<li><p>第一个参数是过滤器的名字</p>
</li>
<li><p>第二个参数是过滤器的功能函数（若不定义vue就不知道这个字符串是什么，有什么作用）</p>
<p>过滤器的功能函数</p>
<ul>
<li>声明function(data,argv1,argv2…){}</li>
<li>第一个参数是传入的要过滤的数据，即调用时管道符左边的内容</li>
<li>第二个参数开始就是调用过滤器的时候传入的参数</li>
</ul>
</li>
</ul>
<h3 id="过滤器的使用"><a href="#过滤器的使用" class="headerlink" title="过滤器的使用"></a>过滤器的使用</h3><ul>
<li>先注册，后使用</li>
<li>组件内 filters:{过滤器：fn} fn内通过return返回最终的数据</li>
<li>全局Vue.filter(‘过滤器名’，fn) fn内通过return返回最终的数据</li>
<li>使用&#123;&#123;数据 | 过滤器名&#125;&#125; 管道符 | 右边是过滤器名称，即文本功能函数</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;price | filter_addPricePrefix&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;price | filter_addPricePrefix |filter_addPriceSuffix&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">price</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">filter_addPricePrefix</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="string">&quot;¥&quot;</span> + value;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">filter_addPriceSuffix</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> value + <span class="string">&quot;元&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.test</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="过渡和动画"><a href="#过渡和动画" class="headerlink" title="过渡和动画"></a>过渡和动画</h2><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><p>​        进入（显示，创建）</p>
<p>​            v-enter-from 进入前</p>
<p>​            v-enter-active 进入中</p>
<p>​            v-enter-to 进入后</p>
<p>​        离开（隐藏，移除）</p>
<p>​            v-leave-from 离开前 </p>
<p>​            v-leave-active 离开中</p>
<p>​            v-leave-to 离开后</p>
<p>​    <b>这里的v指的是默认前缀如果transition标签中设置了name属性可替代为name-enter-from</b></p>
<p><img src="/img/Vue/gd.gif" alt="gd" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.dong-enter-active</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">transition</span>: all .<span class="number">3s</span> ease;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.dong-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">			  <span class="attribute">transition</span>: all .<span class="number">8s</span> <span class="built_in">cubic-bezier</span>(<span class="number">1.0</span>, <span class="number">0.5</span>, <span class="number">0.8</span>, <span class="number">1.0</span>);</span></span><br><span class="line"><span class="language-css">			&#125;隐藏中的过度</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.dong-enter-from</span>, <span class="selector-class">.dong-leave-to</span>&#123;</span></span><br><span class="line"><span class="language-css">			  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">10px</span>);</span></span><br><span class="line"><span class="language-css">			  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;databinding&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;dong&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>动画实例<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">const</span> vm = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">						<span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">					&#125;</span></span><br><span class="line"><span class="language-javascript">					</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;);</span></span><br><span class="line"><span class="language-javascript">			vm.<span class="title function_">mount</span>(<span class="string">&quot;body&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>​                                                    <img src="/img/Vue/dh.gif" alt="dh" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">		<span class="selector-class">.dong-enter-active</span> &#123;</span></span><br><span class="line"><span class="language-css">		  <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-class">.dong-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">		  <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span> reverse;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="keyword">@keyframes</span> bounce-in &#123;</span></span><br><span class="line"><span class="language-css">		  <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">		    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">		  &#125;</span></span><br><span class="line"><span class="language-css">		  <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">		    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span></span><br><span class="line"><span class="language-css">		  &#125;</span></span><br><span class="line"><span class="language-css">		  <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">		    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">		  &#125;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;databinding&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;dong&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>闫雨萌<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">const</span> vm = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;);</span></span><br><span class="line"><span class="language-javascript">		vm.<span class="title function_">mount</span>(<span class="string">&quot;body&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="通过自定义动画"><a href="#通过自定义动画" class="headerlink" title="通过自定义动画"></a>通过自定义动画</h3><p>​                                                                                    <img src="/img/Vue/zdydh.gif" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/animate.css@3.5.1&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;databinding&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span> = <span class="string">&quot;show = !show&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">		    <span class="attr">name</span>=<span class="string">&quot;custom-classes-transition&quot;</span></span></span><br><span class="line"><span class="tag">		    <span class="attr">enter-active-class</span>=<span class="string">&quot;animated tada&quot;</span></span></span><br><span class="line"><span class="tag">		    <span class="attr">leave-active-class</span>=<span class="string">&quot;animated bounceOutRight&quot;</span></span></span><br><span class="line"><span class="tag">		&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>闫雨萌<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">const</span> vm = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">						<span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">					&#125;</span></span><br><span class="line"><span class="language-javascript">					</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;);</span></span><br><span class="line"><span class="language-javascript">			vm.<span class="title function_">mount</span>(<span class="string">&quot;body&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="结合Velocity-js实现动画"><a href="#结合Velocity-js实现动画" class="headerlink" title="结合Velocity.js实现动画"></a>结合Velocity.js实现动画</h3><p><img src="/img/Vue/QQ%E5%BD%95%E5%B1%8F20221121172034.gif" alt="QQ录屏20221121172034" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show=!show&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">transition</span> @<span class="attr">before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span> @<span class="attr">enter</span>=<span class="string">&quot;enter&quot;</span> @<span class="attr">leave</span>=<span class="string">&quot;leave&quot;</span> <span class="attr">v-bind:css</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>文字动画效果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">const</span> app=<span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">show</span>:<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">beforeEnter</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				el.<span class="property">style</span>.<span class="property">opacity</span>=<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">				el.<span class="property">style</span>.<span class="property">transformOrigin</span>=<span class="string">&#x27;left&#x27;</span></span></span><br><span class="line"><span class="language-javascript">				el.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">enter</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title class_">Velocity</span>(el,&#123;<span class="attr">opacity</span>:<span class="number">1</span>,<span class="attr">fontSize</span>:<span class="string">&#x27;1.4em&#x27;</span>&#125;,&#123;<span class="attr">duration</span>:<span class="number">300</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">				<span class="title class_">Velocity</span>(el,&#123;<span class="attr">fontSize</span>:<span class="string">&#x27;1em&#x27;</span>&#125;,&#123;<span class="attr">complete</span>:done&#125;)</span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">leave</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title class_">Velocity</span>(el,&#123;<span class="attr">translateX</span>:<span class="string">&#x27;15px&#x27;</span>,<span class="attr">rotateZ</span>:<span class="string">&#x27;50deg&#x27;</span>&#125;,&#123;<span class="attr">duration</span>:<span class="number">300</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">				<span class="title class_">Velocity</span>(el,&#123;<span class="attr">rotateZ</span>:<span class="string">&#x27;100deg&#x27;</span>&#125;,&#123;<span class="attr">loop</span>:<span class="number">1</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">				<span class="title class_">Velocity</span>(el,&#123;<span class="attr">rotateZ</span>:<span class="string">&#x27;45deg&#x27;</span>,<span class="attr">translateY</span>:<span class="string">&#x27;30px&#x27;</span>,<span class="attr">translateX</span>:<span class="string">&#x27;30px&#x27;</span>,<span class="attr">opacity</span>:<span class="number">0</span>&#125;,&#123;<span class="attr">complete</span>:done&#125;)</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//Velocity函数的第一个参数是DOM元素，第二个参数是用来传入css参数列表，第三个参数表示动画配置</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript">	app.<span class="title function_">mount</span>(<span class="string">&quot;div&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><p>创建组件并赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">       </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">component</span>(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">aaa</span>:[&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>:<span class="string">&quot;火锅&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>:<span class="string">&quot;烧烤&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>:<span class="string">&quot;小龙虾&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>:<span class="string">&quot;牛排&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;ul :style=&quot;&#x27;background-color:#80c7ec&#x27;&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;li v-for=&#x27;item in aaa&#x27;&gt;&#123;&#123;item.title&#125;&#125;&lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;/ul&gt;`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br></pre></td></tr></table></figure>

<p>Vue单文件组件，是一种特殊的文件格式，它允许将vue组件的模板、逻辑样式封装在单个文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script &gt;</span><br><span class="line">import learn from &#x27;./components/learn.vue&#x27;		//this</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">  name:&quot;App&quot;,</span><br><span class="line">  components: &#123; learn &#125;		//this</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;a href=&quot;https://vitejs.dev&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;/vite.svg&quot; class=&quot;logo&quot; alt=&quot;Vite logo&quot; /&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;https://vuejs.org/&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;./assets/vue.svg&quot; class=&quot;logo vue&quot; alt=&quot;Vue logo&quot; /&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">  &lt;HelloWorld msg=&quot;Vite + Vue&quot; /&gt;</span><br><span class="line">  &lt;learn/&gt;					&lt;!--this--&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.logo &#123;</span><br><span class="line">  height: 6em;</span><br><span class="line">  padding: 1.5em;</span><br><span class="line">  will-change: filter;</span><br><span class="line">&#125;</span><br><span class="line">.logo:hover &#123;</span><br><span class="line">  filter: drop-shadow(0 0 2em #646cffaa);</span><br><span class="line">&#125;</span><br><span class="line">.logo.vue:hover &#123;</span><br><span class="line">  filter: drop-shadow(0 0 2em #42b883aa);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="加载组件"><a href="#加载组件" class="headerlink" title="加载组件"></a>加载组件</h3><p>第一步：引入组件    import learn from ‘./components/learn.vue’</p>
<p>第二步：挂载组件    export default{<br>                                  name:”App”,<br>                                  components: { learn }        //this<br>                                }</p>
<p>第三步：显示挂件    <learn/></p>
<h3 id="Props组件交互"><a href="#Props组件交互" class="headerlink" title="Props组件交互"></a>Props组件交互</h3><p>组件和组件之间是存在交互的，否则完全没有关系</p>
<p>props是你可以在组件上注册的一些自定义attribute</p>
<p>props交互示意图：</p>
<p><img src="/img/Vue/QQ%E6%88%AA%E5%9B%BE20221124213859.png" alt="QQ截图20221124213859" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">App.vue</span><br><span class="line">&lt;learn :title=&quot;title&quot; :names=&quot;names&quot;/&gt;</span><br><span class="line">    </span><br><span class="line">&lt;script&gt;</span><br><span class="line">  name:&quot;App&quot;,</span><br><span class="line">  components: &#123; learn &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      title:&quot;我是一个标题&quot;,</span><br><span class="line">      names:[&quot;LiMing&quot;,&quot;Jenny&quot;,&quot;Danny&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">learn.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;title&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;</span><br><span class="line">        name:&quot;learn&quot;,</span><br><span class="line">        props:&#123;</span><br><span class="line">            title:&#123;</span><br><span class="line">                type:String,			&lt;!--数组和对象必须使用函数进行返回--&gt;</span><br><span class="line">                default:&quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            names:&#123;</span><br><span class="line">                type:Array,</span><br><span class="line">                default:function()&#123;</span><br><span class="line">                    return []</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">name</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">component</span>(<span class="string">&quot;parent&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;name&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&#x27;&lt;h4&gt;我的名字是&#123;&#123;name&#125;&#125;&lt;/h4&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;#aaa&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;aaa&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#80c7ec&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">site</span> <span class="attr">v-for</span>=<span class="string">&quot;lis in lise&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;lis.title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">lise</span>:[</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">title</span>:<span class="string">&quot;火锅&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">title</span>:<span class="string">&quot;烧烤&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">title</span>:<span class="string">&quot;小龙虾&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">title</span>:<span class="string">&quot;啤酒&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">component</span>(<span class="string">&quot;site&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`&lt;li&gt;&#123;&#123;title&#125;&#125;&lt;/li&gt;`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;#aaa&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="自定义事件组件交互"><a href="#自定义事件组件交互" class="headerlink" title="自定义事件组件交互"></a>自定义事件组件交互</h3><p>自定义事件可以在组件中反向传递数据，prop可以将数据从父组件传到子组件，那么反向将数据从父组件传到子组件就可以使用自定义事件$emit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">learn.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;button @click=&quot;pao&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;</span><br><span class="line">        name:&quot;learn&quot;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                message:&quot;我是learn数据&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            pao()&#123;</span><br><span class="line">                this.$emit(&quot;run&quot;,this.message)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;MyComponent @run=&quot;pao&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import MyComponent from &#x27;./compents/MyComponent.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">  name:&quot;App&quot;,</span><br><span class="line">  components: &#123; learn &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    run(date)&#123;</span><br><span class="line">      console.log(date)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="slot插槽"><a href="#slot插槽" class="headerlink" title="slot插槽"></a>slot插槽</h2><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><p>​    子类模板中定义一个slot插槽标签，父类使用组件时会自动将chacao自定义标签内部的标签替换掉子组件中的slot插槽标签</p>
<p>​        App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">chacao</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">chacao</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">chacao</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">chacao</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        chacao.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是content组件内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>​    在子组件的插槽标签slot中设置name属性，当父组件替换子标签中的slot会通过template标签中的v-slot属性去寻找对应的name值并完成对应的替换。</p>
<p>​        App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">chacao</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:button</span>&gt;</span></span><br><span class="line">   	 	<span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:input</span>&gt;</span></span><br><span class="line">   	 	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">chacao</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        changcao.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是content组件内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而没有被设置名字的则会通过设置默认值来进行被父组件的替换</p>
<p><img src="/img/Vue/image-20221125173349689.png" alt="image-20221125173349689" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="插槽作用域"><a href="#插槽作用域" class="headerlink" title="插槽作用域"></a>插槽作用域</h3><p>插槽就是子组件中的提供给父组件使用的一个占位符，用slot表示，父组件可以在这个占位符中填充任何模板代码，如 HTML、组件等，填充的内容会替换子组件的slot标签。插槽<strong>显不显示</strong>、<strong>显示什么结构</strong>是由<strong>父组件</strong>来控制的，而插槽<strong>在哪里显示</strong>就由<strong>子组件</strong>来进行控制</p>
<p>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> chacao <span class="keyword">from</span> <span class="string">&#x27;./components/chacao.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;chacao&#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chacao</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;chide&quot;</span>&gt;</span>			//v-slot:default用来接收子类传来的数据</span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你可以选择吃东西<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in chide.eat&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">chacao</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chacao</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;wande&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你可以选择看玩游戏<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in wande.game&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">chacao</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chacao</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;wande&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你可以选择看电影<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in wande.movie&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">chacao</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>chacao.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:eat</span>=<span class="string">&quot;eat&quot;</span> <span class="attr">:game</span>=<span class="string">&quot;game&quot;</span> <span class="attr">:movie</span>=<span class="string">&quot;movie&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">eat</span>:[<span class="string">&#x27;火锅&#x27;</span>,<span class="string">&#x27;烧烤&#x27;</span>,<span class="string">&#x27;小龙虾&#x27;</span>,<span class="string">&#x27;牛排&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">game</span>:[<span class="string">&#x27;GTA5&#x27;</span>,<span class="string">&#x27;地平线&#x27;</span>,<span class="string">&#x27;看门狗&#x27;</span>,<span class="string">&#x27;使命召唤&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">movie</span>:[<span class="string">&#x27;盗梦空间&#x27;</span>,<span class="string">&#x27;战狼&#x27;</span>,<span class="string">&#x27;肖申克的救赎&#x27;</span>,<span class="string">&#x27;阿甘正传&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="跨级通信"><a href="#跨级通信" class="headerlink" title="跨级通信"></a>跨级通信</h2><p>在组建的嵌套中如果单纯使用props会变得非常复杂，因此我们可以使用provide和inject</p>
<p>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> zi <span class="keyword">from</span> <span class="string">&#x27;./components/zi.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;chacao,zi&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="string">&quot;parent&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">obj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">message</span>:<span class="string">&quot;父组件的信息&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">provide</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="function">()=&gt;</span><span class="variable language_">this</span>.<span class="property">message</span>		<span class="comment">//传走message数据</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zi</span>&gt;</span><span class="tag">&lt;/<span class="name">zi</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;message=&#x27;你好&#x27;&quot;</span>&gt;</span>改变message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;obj.message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>zi.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sun</span>&gt;</span><span class="tag">&lt;/<span class="name">sun</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> sun <span class="keyword">from</span> <span class="string">&#x27;./sun.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        sun</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>sun.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是sun组件&#123;&#123;message()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>	<span class="comment">&lt;!--this--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">inject</span>:[<span class="string">&#x27;message&#x27;</span>]			<span class="comment">//接收message方法传给h2</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/Vue/image-20221126095934014.png" alt="image-20221126095934014" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>点击后：<img src="/img/Vue/image-20221126095949170.png" alt="image-20221126095949170" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="生命周期（钩子函数）"><a href="#生命周期（钩子函数）" class="headerlink" title="生命周期（钩子函数）"></a>生命周期（钩子函数）</h2><p><b>给了用户在不同阶段添加要执行的函数</b></p>
<p>1、beforeCreate（创建前）</p>
<p>表示实例完全被创建出来之前，vue 实例的挂载元素$el和数据对象 data 都为 undefined，还未初始化。</p>
<p>2、created（创建后）</p>
<p>数据对象 data 已存在，可以调用 methods 中的方法，操作 data 中的数据，但 dom 未生成，$el 未存在 。</p>
<p>3、beforeMount（挂载前）</p>
<p>vue 实例的 $el 和 data 都已初始化，挂载之前为虚拟的 dom节点，模板已经在内存中编辑完成了，但是尚未把模板渲染到页面中。data.message 未替换。</p>
<p>4、mounted（挂载后）</p>
<p>vue 实例挂载完成，data.message 成功渲染。内存中的模板，已经真实的挂载到了页面中，用户已经可以看到渲染好的页面了。实例创建期间的最后一个生命周期函数，当执行完 mounted 就表示，实例已经被完全创建好了，DOM 渲染在 mounted 中就已经完成了。</p>
<p>5、beforeUpdate（更新前）</p>
<p>当 data 变化时，会触发beforeUpdate方法 。data 数据尚未和最新的数据保持同步。</p>
<p>6、updated（更新后）</p>
<p>当 data 变化时，会触发 updated 方法。页面和 data 数据已经保持同步了。</p>
<p>7、beforeDestory（销毁前）</p>
<p>组件销毁之前调用 ，在这一步，实例仍然完全可用。</p>
<p>8、destoryed（销毁后）</p>
<p>组件销毁之后调用，对 data 的改变不会再触发周期函数，vue 实例已解除事件监听和 dom绑定，但 dom 结构依然存在。</p>
<h2 id="Vue引入第三方"><a href="#Vue引入第三方" class="headerlink" title="Vue引入第三方"></a>Vue引入第三方</h2><p>安装swiper</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安装指定版本：npm install --save swiper@8.4.1</span><br></pre></td></tr></table></figure>

<p>基础实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Swiper&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/梅西.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/C罗.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/德布劳内.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/莱万多夫斯基.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/内马尔.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/萨拉赫.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">  &lt;/Swiper&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#x27;swiper/css&#x27;</span><br><span class="line">import &#123; Swiper, SwiperSlide &#125; from &#x27;swiper/vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">	name:&quot;carousel&quot;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Swiper,</span><br><span class="line">      SwiperSlide,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>添加分页效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Swiper :modules=&quot;modules&quot; :pagination=&quot;&#123;clickable:true&#125;&quot;&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/梅西.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/C罗.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/德布劳内.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/莱万多夫斯基.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/内马尔.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/萨拉赫.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">  &lt;/Swiper&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#x27;swiper/css&#x27;</span><br><span class="line">import&#123; Pagination&#125; from &#x27;swiper&#x27;;</span><br><span class="line">import &#123; Swiper, SwiperSlide &#125; from &#x27;swiper/vue&#x27;</span><br><span class="line">import &#x27;swiper/css/pagination&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">	name:&quot;carousel&quot;,</span><br><span class="line">	data()&#123;</span><br><span class="line">		return&#123;</span><br><span class="line">			modules:[Pagination]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Swiper,</span><br><span class="line">      SwiperSlide,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Axios网络请求"><a href="#Axios网络请求" class="headerlink" title="Axios网络请求"></a>Axios网络请求</h2><h3 id="什么是Axios"><a href="#什么是Axios" class="headerlink" title="什么是Axios"></a>什么是Axios</h3><p>​            Axios是一个基于promise的异步ajax请求库 </p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save axios</span><br><span class="line"></span><br><span class="line">post请求参数是需要额外处理的</span><br><span class="line">npm install --save querystring</span><br><span class="line"></span><br><span class="line">data:qs.stringify(&#123;</span><br><span class="line">				</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>​    在组件中引用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123;aaa&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &quot;axios&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">	name:&quot;carousel&quot;,</span><br><span class="line">	data()&#123;</span><br><span class="line">		return&#123;</span><br><span class="line">			aaa:&quot;&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	mounted() &#123;		//挂载后执行</span><br><span class="line">		axios(&#123;</span><br><span class="line">			method:&quot;get&quot;,</span><br><span class="line">			url:&quot;/src/components/1.txt&quot;,</span><br><span class="line">			// data:qs.stringify(&#123;</span><br><span class="line">				</span><br><span class="line">			// &#125;)</span><br><span class="line">		&#125;).then(res=&gt;&#123;</span><br><span class="line">			this.aaa=res.data</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">      </span><br><span class="line">     //简写方法</span><br><span class="line">      mounted()&#123;</span><br><span class="line">          axios.get(&quot;/src/components/1.txt&quot;).then(res=&gt;&#123;</span><br><span class="line">              this.aaa=res.data</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>​    使用全局引用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="vue路由"><a href="#vue路由" class="headerlink" title="vue路由"></a>vue路由</h2><h3 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h3><p>​    可以让Vue.js构建单页应用实现不刷新跳转变得轻而易举</p>
<h3 id="安装路由"><a href="#安装路由" class="headerlink" title="安装路由"></a>安装路由</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save vue-router</span><br></pre></td></tr></table></figure>

<h3 id="引入、使用路由"><a href="#引入、使用路由" class="headerlink" title="引入、使用路由"></a>引入、使用路由</h3><p>​    1.新建两个文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HomeView.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AboutView.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;关于&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>​    2.创建配置文件</p>
<p>​        index.js（在components文件夹中）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置文件</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>	<span class="comment">//固定配置</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AboutView</span> <span class="keyword">from</span> <span class="string">&#x27;./AboutView.vue&#x27;</span>			<span class="comment">//文件1</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;./HomeView.vue&#x27;</span>			<span class="comment">//文件2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置信息中需要页面的相关配置</span></span><br><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/about&quot;</span>,				<span class="comment">//设置访问地址</span></span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">AboutView</span>			<span class="comment">//对应文件</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">HomeView</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),		<span class="comment">//可以替换为createWebHistory但是容易引起404所以需要后台配合</span></span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<p>​            3.在入口文件main.js中配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./luyou&#x27;</span>		<span class="comment">//将第二步设置的配置文件导入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)		<span class="comment">//.use使用router</span></span><br></pre></td></tr></table></figure>

<p>​            4.在页面中使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">     //router创建超链接，to属性用来指定路径和配置文件的path相匹配</span><br><span class="line">    &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;</span><br><span class="line">     //用来显示页面内容</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="路由传递参数"><a href="#路由传递参数" class="headerlink" title="路由传递参数"></a>路由传递参数</h3><p>​    1.新建两个文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HomeView.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;$route.params.ho&#125;&#125;&lt;/p&gt;		//获取路由中的参数</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AboutView.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;关于&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;$route.params.ab&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>​    2.创建配置文件</p>
<p>​        index.js（在components文件夹中）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置文件</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>	<span class="comment">//固定配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置信息中需要页面的相关配置</span></span><br><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/about/:ab&quot;</span>,							<span class="comment">//设置地址及附带参数	:ab</span></span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;about&#x27;</span>,								<span class="comment">//名字，可带可不带</span></span><br><span class="line">        <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./AboutView.vue&#x27;</span>)		<span class="comment">//组件地址</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/:ho&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./HomeView.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),		<span class="comment">//可以替换为createWebHistory但是容易引起404所以需要后台配合</span></span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<p>​            3.在入口文件main.js中配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./luyou&#x27;</span>		<span class="comment">//将第二步设置的配置文件导入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)		<span class="comment">//.use使用router</span></span><br></pre></td></tr></table></figure>

<p>​            4.在页面中使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script &gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      aaa:prompt(&#x27;请填写要显示的内容&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;router-link :to=&quot;/home/+aaa&quot;&gt;首页&lt;/router-link&gt;		//动态绑定传递数据</span><br><span class="line">    &lt;router-link to=&quot;/about/这里是关于&quot;&gt;关于&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="嵌套路由配置"><a href="#嵌套路由配置" class="headerlink" title="嵌套路由配置"></a>嵌套路由配置</h3><p>​    1.新建两个文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HomeView.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;$route.params.ho&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;router-link to=&quot;/one&quot;&gt;分页1&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/two&quot;&gt;分页2&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AboutView.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;关于&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;$route.params.ab&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about/us&quot;&gt;关于我们&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about/info&quot;&gt;关于信息&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AboutInfo</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;关于信息&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AboutUS</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;关于我们&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>​    2.创建配置文件</p>
<p>​        index.js（在components文件夹中）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置文件</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置信息中需要页面的相关配置</span></span><br><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/about&quot;</span>,					<span class="comment">//:ab添加参数</span></span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./AboutView.vue&#x27;</span>),</span><br><span class="line">        <span class="attr">children</span>:[&#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;us&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;./AboutUS.vue&quot;</span>)</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;info&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;./AboutInfo.vue&quot;</span>)</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./HomeView.vue&#x27;</span>),</span><br><span class="line">        <span class="attr">children</span>:[&#123;			<span class="comment">//通过children嵌套，中的path不要加/</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;one&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;./AboutUS.vue&quot;</span>)</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;two&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;./AboutInfo.vue&quot;</span>)</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<p>​            3.在入口文件main.js中配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./luyou&#x27;</span>		<span class="comment">//将第二步设置的配置文件导入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)		<span class="comment">//.use使用router</span></span><br></pre></td></tr></table></figure>

<p>​            4.在页面中使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script &gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      aaa:prompt(&#x27;请填写要显示的内容&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;router-link :to=&quot;/home/+aaa&quot;&gt;首页&lt;/router-link&gt;		//动态绑定传递数据</span><br><span class="line">    &lt;router-link to=&quot;/about/这里是关于&quot;&gt;关于&lt;/router-link&gt;	</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h2&gt;page页面&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;goPage&quot;&gt;点击按钮跳转&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;</span><br><span class="line">        methods:&#123;</span><br><span class="line">            goPage:function()&#123;</span><br><span class="line">                // 跳转导航</span><br><span class="line">                this.$router.push(&quot;/&quot;)</span><br><span class="line">                </span><br><span class="line">                if(123==123)&#123;</span><br><span class="line">                    this.$router.push(&quot;/&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">                // 通过传递对象跳转</span><br><span class="line">                this.$router.push(&#123;path:&quot;/about:654565&quot;&#125;)</span><br><span class="line">                // 通过name名跳转</span><br><span class="line">                this.$router.push(&#123;name:&quot;guanyv&quot;,params:&#123;id:123546&#125;&#125;)</span><br><span class="line">                // 设置带？的附加参数</span><br><span class="line">                this.$router.push(&#123;path:&quot;/about&quot;,query:&#123;name:&quot;zhangsan&quot;&#125;&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;关于&lt;/h1&gt;</span><br><span class="line">        &lt;router-link to=&quot;/about/us&quot;&gt;关于我们&lt;/router-link&gt;</span><br><span class="line">        &lt;router-link to=&quot;/about/info&quot;&gt;关于信息&lt;/router-link&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AboutView.vue</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            //在跳转页面可以通过this.$route.query.name拿取数据</span><br><span class="line">            console.log(this.$route.query.name);		</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="替换、前进后退"><a href="#替换、前进后退" class="headerlink" title="替换、前进后退"></a>替换、前进后退</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 替换当前位置</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;<span class="attr">path</span>:<span class="string">&quot;/about&quot;</span>,<span class="attr">query</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;zhangsan&quot;</span>&#125;&#125;)</span><br><span class="line"><span class="comment">// 前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>()</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>()</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="命名路由和命名视图"><a href="#命名路由和命名视图" class="headerlink" title="命名路由和命名视图"></a>命名路由和命名视图</h3><p>指定某个地方分配怎样的路由</p>
<p>1.创建三个组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shopTop.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;shop的头部&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shopCen</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;shop的中部&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shopFoot</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;shop的尾部&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>2.在配置文件中指定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> tou <span class="keyword">from</span> <span class="string">&#x27;../luyou/shopTop.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zhong <span class="keyword">from</span> <span class="string">&#x27;../luyou/shopCen.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> wei <span class="keyword">from</span> <span class="string">&#x27;../luyou/shopFoot.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置信息中需要页面的相关配置</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/shop&quot;</span>,	<span class="comment">//当访问路径为/shop时将shopTop、shopChen、shopFoot渲染到指定位置</span></span><br><span class="line">        <span class="attr">components</span>:&#123;</span><br><span class="line">            <span class="attr">default</span>:zhong,	<span class="comment">//当没有指定名字时，渲染zhong</span></span><br><span class="line">            tou,wei</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<p>3.页面上渲染App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;router-link to=&quot;/&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/tz&quot;&gt;go to&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view name=&quot;tou&quot;&gt;&lt;/router-view&gt;			//指定渲染</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;						//默认渲染</span><br><span class="line">    &lt;router-view name=&quot;wei&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt; </span><br></pre></td></tr></table></figure>

<h2 id="Vuex状态管理"><a href="#Vuex状态管理" class="headerlink" title="Vuex状态管理"></a>Vuex状态管理</h2><p>状态管理可以理解成为更方便的管理组件之间的数据交互</p>
<p>1.下载Vuex</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vuex@next --save</span><br></pre></td></tr></table></figure>

<p>2.设置配置文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>		<span class="comment">//引入vuex</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Vuex的核心作用就是帮我们管理组件之间的状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">    <span class="comment">// 所有的数据都放在这里</span></span><br><span class="line">    <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//主要用来放需要复杂运算的数据</span></span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">getCounter</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">count</span>&gt;<span class="number">0</span> ? state.<span class="property">count</span> : <span class="string">&quot;内容小于0，不予显示&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//可以通过事件改变数据</span></span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">addCounter</span>(<span class="params">state,num</span>)&#123;      <span class="comment">//state表示上面定义的state对象</span></span><br><span class="line">            state.<span class="property">count</span>+=num</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//从外部拿取数据</span></span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">asyn</span>(<span class="params">&#123;commit&#125;</span>)&#123;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="string">&quot;http://iwenwiki.com/api/generator/list.php&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">commit</span>(<span class="string">&quot;addCounter&quot;</span>,res.<span class="property">data</span>[<span class="number">0</span>])</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>3.在入口文件中引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(store).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>4.在页面上使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;addClickHandle&quot;&gt;点击功德+1&lt;/button&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; $store.state.count &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;addas&quot;&gt;点击得到进口功德&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt; </span><br><span class="line">&lt;script &gt;</span><br><span class="line">// vuex提供的mapState快捷读取方式</span><br><span class="line">import &#123; mapState,mapGetter,mapActions&#125; from &#x27;vuex&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    //把各个数据和方法引入到这里</span><br><span class="line">    ...mapState([&#x27;count&#x27;]),</span><br><span class="line">    ...mapGetters([&#x27;getCounter&#x27;])</span><br><span class="line">    ...mapActions([&quot;asyn&quot;])</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addClickHandle() &#123;</span><br><span class="line">      // 固定调用方式,可以选择添加或者不添加参数</span><br><span class="line">      this.$store.commit(&quot;addCounter&quot;,20)  	//使用store.commit方法调用mutations的addCounter函数</span><br><span class="line">    &#125;,</span><br><span class="line">    addas()&#123;</span><br><span class="line">      this.$store.dispatch(&quot;asyn&quot;)			//使用dispatch方法调用actions的asyn方法</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/img/Vue/image-20221130181737218.png" alt="image-20221130181737218" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx服务器</title>
    <url>/2023/09/18/Nginx/</url>
    <content><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h2><ul>
<li><p>Nginx是一个高性能的开源web服务器，也可以用作反向代理、负载均衡和HTTP缓存</p>
</li>
<li><p>其具有占用内存少、处理并发能力强等特点</p>
</li>
<li><p>Nginx还可以作为反向代理和负载均衡器，将请求分配给多个后端服务器，从而实现高可用性和可扩展性。</p>
</li>
</ul>
<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">/*安装依赖包*/</span><br><span class="line"><span class="attribute">yum</span> -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br><span class="line">/*下载Nginx安装包*/</span><br><span class="line">wget https://nginx.org/download/nginx-1.16.1.tar.gz</span><br><span class="line">/*解压*/</span><br><span class="line">tar -zxvf nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"></span><br><span class="line">cd nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>



<h2 id="Nginx目录结构"><a href="#Nginx目录结构" class="headerlink" title="Nginx目录结构"></a>Nginx目录结构</h2><p>重点目录/文件:</p>
<ul>
<li>conf/nginx.conf    nginx配置文件</li>
<li>html                     存放静态文件(html、css、Js等)</li>
<li>logs                     日志目录，存放日志文件</li>
<li>sbin/nginx            二进制文件，用于启动、停止Nginx服务</li>
</ul>
<h2 id="Nginx命令"><a href="#Nginx命令" class="headerlink" title="Nginx命令"></a>Nginx命令</h2><ul>
<li><p>查看版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nginx -v</span><br></pre></td></tr></table></figure></li>
<li><p>开启nginx</p>
<p>在nginx中的sbin文件夹运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./Nginx</span><br></pre></td></tr></table></figure></li>
<li><p>关闭nginx</p>
<p>在nginx中的sbin文件夹运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure></li>
<li><p>启动后查看Nginx进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef|grep nginx</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Nginx配置文件结构"><a href="#Nginx配置文件结构" class="headerlink" title="Nginx配置文件结构"></a>Nginx配置文件结构</h2><p>整体结构介绍</p>
<p>Nginx配置文件（conf/nginx.conf)整体分为三部分</p>
<ul>
<li>全局块    和nginx运行相关的全局配置</li>
<li>events块 和网络连接相关的配置</li>
<li>http块    代理、缓存、日志记录、虚拟主机配置<ul>
<li>http全局块</li>
<li>Server块<ul>
<li>Server全局块</li>
<li>location块</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>注意：http块中可以配置多个server块，每个server块中可以配置多个location块</p>
<p><img src="/img/Nginx/image-20230425102149478.png" alt="image-20230425102149478" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><span style="font-size:90px;color:red">·</span>全局块    <span style="font-size:90px;color:green">·</span>events块    <span style="font-size:90px;color:black">·</span>http块    <span style="font-size:90px;color:yellow">·</span>上面为http全局块，下面为server块</p>
<h2 id="Nginx具体应用"><a href="#Nginx具体应用" class="headerlink" title="Nginx具体应用"></a>Nginx具体应用</h2><h3 id="部署静态资源"><a href="#部署静态资源" class="headerlink" title="部署静态资源"></a>部署静态资源</h3><p>Nginx可以作为静态web服务器来部署静态资源。静态资源指在服务端真实存在并且能够直接展示的一些比如常见的html页面、css文件、js文件、图片、视频等资源。</p>
<p>相对于Tomcat，Nginx处理静态资源的能力更加高效，所以在生产环境下，一般都会将静态资源部署到Nginx中。将静态资源部署到Nginx非常简单，只需要将文件复制到Nginx安装目录下的html目录中即可。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen <span class="number">80</span>;	<span class="comment">#监听端口</span></span><br><span class="line">	server_name localhost;	<span class="comment">#服务器名称</span></span><br><span class="line">	location / &#123;	<span class="comment">#匹配客户端请求url</span></span><br><span class="line">		root html;	<span class="comment">#指定静态资源根目录</span></span><br><span class="line">		index index.html;	<span class="comment">#指定默认首页</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h4 id="什么是反向代理"><a href="#什么是反向代理" class="headerlink" title="什么是反向代理"></a>什么是反向代理</h4><p>它将客户端的请求转发给服务器，然后将服务器返回的响应发送回客户端。与正向代理不同的是，反向代理隐藏了真实服务器的信息，使得客户端无法直接访问服务器，而是通过反向代理来访问。</p>
<h4 id="配置反向代理："><a href="#配置反向代理：" class="headerlink" title="配置反向代理："></a>配置反向代理：</h4><p>在反向代理服务器的nginx.conf文件中配置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen <span class="number">82</span>;</span><br><span class="line">	server_name localhost;</span><br><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass http://<span class="number">192.168</span>.<span class="number">138.101</span>:<span class="number">8080</span>;<span class="comment">#反向代理配置，将请求转发到指定服务</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/Nginx/image-20230425112248794.png" alt="image-20230425112248794" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>客户端向反向代理服务器发送请求，由反向代理服务器代替客户端向web服务器发送请求。并把获取到的数据返回给客户端。整个过程中web服务器对于客户端不可见</p>
<h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p>负载均衡是指将网络负载分担到多个服务器或计算机集群上，以达到更好的性能、稳定性和可靠性。负载均衡器（Load Balancer）是实现负载均衡的关键部件之一，它能够自动监控网络流量并将请求分发到不同的服务器上，从而避免单点故障、提高吞吐量和响应速度</p>
<p><img src="/img/Nginx/image-20230425121313152.png" alt="image-20230425121313152" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置负载均衡:</span></span><br><span class="line">upstream targetserver&#123;	<span class="comment">#upstream指令可以定义一组服务器</span></span><br><span class="line">	server <span class="number">192.168</span>.<span class="number">138.101</span>:<span class="number">8080</span> weight=<span class="number">10</span>;</span><br><span class="line">	server <span class="number">192.168</span>.<span class="number">138.101</span>:<span class="number">8081</span> weight=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">	listen <span class="number">8080</span>;</span><br><span class="line">	server_name localhost;</span><br><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass http://targetserver;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>负载均衡策略：</p>
<p><img src="/img/Nginx/image-20230425121701505.png" alt="image-20230425121701505" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis缓存数据库</title>
    <url>/2023/06/12/Redis%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h1 id="Redis数据库"><a href="#Redis数据库" class="headerlink" title="Redis数据库"></a>Redis数据库</h1><h2 id="什么是Redis？"><a href="#什么是Redis？" class="headerlink" title="什么是Redis？"></a>什么是Redis？</h2><p>Redis是一种基于<strong>内存</strong>的key-value结构数据库</p>
<p>他会将我们的数据存放在内存中，这就有利于<strong>提高获取数据的速度</strong>。同时因为它是存放在内存中，所以当服务器断电时里面的数据也会不复存在</p>
<h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><ul>
<li><p>Redis是一个开源的内存中的数据结构存储系统，他可以用作：数据库、缓存和消息中间件</p>
</li>
<li><p>官网：<a href="https://redis.io/">https://redis.io</a></p>
</li>
<li><p>Redis是用C语言开发的一个开源的高性能键值对（key-value</p>
</li>
</ul>
<p>数据库，官方提供的数据是可以达到100000+的QPS（每秒内查询次数）。它存储的value类型比较丰富，也被称为结构化的nosql数据库</p>
<ul>
<li>Nosql，泛指非关系型数据库</li>
</ul>
<h2 id="Redis下载与安装"><a href="#Redis下载与安装" class="headerlink" title="Redis下载与安装"></a>Redis下载与安装</h2><h3 id="windows系统"><a href="#windows系统" class="headerlink" title="windows系统"></a>windows系统</h3><p>将下载好的.zip格式压缩包，直接解压就可以直接使用</p>
<p><img src="/img/Redis/image-20230412110246114.png" alt="image-20230412110246114" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="linux系统"><a href="#linux系统" class="headerlink" title="linux系统"></a>linux系统</h3><ol>
<li>将Redis安装包上传到linux</li>
<li>解压安装包，命令：tar -zxvf redis-4.0.0.tar.gz -C /usr/local</li>
<li>安装redis的依赖环境gcc，命令：yum install gcc-c++</li>
<li>进入/usr/local/redis-4.0.0,进行编译，命令：make</li>
<li>进入redis的src目录，进行安装，命令：make install</li>
</ol>
<h2 id="Redis启动"><a href="#Redis启动" class="headerlink" title="Redis启动"></a>Redis启动</h2><h3 id="linux启动"><a href="#linux启动" class="headerlink" title="linux启动"></a>linux启动</h3><p>redis-4.0.0 -&gt; src文件夹下执行：./redis-server</p>
<p>设置后台运行：</p>
<ol>
<li><p>redis-4.0.0下运行vim redis.conf</p>
</li>
<li><p>输入dae将检索到的no改为yes</p>
</li>
<li><p>保存退出</p>
</li>
<li><p>运行./redis-server ./redis.conf</p>
</li>
</ol>
<p>使用命令</p>
<p>src下./redis-cli</p>
<h3 id="windows启动"><a href="#windows启动" class="headerlink" title="windows启动"></a>windows启动</h3><p>运行redis-server.exe</p>
<h2 id="Redis设置密码"><a href="#Redis设置密码" class="headerlink" title="Redis设置密码"></a>Redis设置密码</h2><ol>
<li>在radis.conf中检索password，将注释解掉，并把第二个单词改成需要的密码</li>
<li>保存，重启服务</li>
<li>输入src/redis-cli回车</li>
<li>输入auth 你的密码</li>
</ol>
<h2 id="设置允许远程连接"><a href="#设置允许远程连接" class="headerlink" title="设置允许远程连接"></a>设置允许远程连接</h2><ol>
<li>在radis.conf中检索bind</li>
<li>将bind 127.0.0.1注释掉</li>
<li>重启服务</li>
<li>在windows中的radis路径中使用powershell运行命令：</li>
</ol>
<p> .\redis-cli.exe -h 192.168.136.131 -p 6379 -a 510609</p>
<h2 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h2><p>Redis存储的是key-value结构的数据，其中key是字符串类型，value有五种常用的数据类型</p>
<ul>
<li>字符串string类型：string普通字符串，常用</li>
<li>哈希表hash类型：hash适合存储对象</li>
<li>列表list类型：list按照插入顺序排列，允许存在重复的元素</li>
<li>无序集合set类型：set无序集合，没有重复的元素</li>
<li>有序集合sorted set类型：有序集合，没有重复元素</li>
</ul>
<h2 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h2><h3 id="字符串String操作命令"><a href="#字符串String操作命令" class="headerlink" title="字符串String操作命令"></a>字符串String操作命令</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置key和对应的value</span></span><br><span class="line"><span class="built_in">set</span> key value</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取key对应的value值</span></span><br><span class="line">get key</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置key存在的秒数</span></span><br><span class="line">setex key seconds value</span><br><span class="line"></span><br><span class="line"><span class="comment">#只有在key不存在时设置key的值</span></span><br><span class="line">setnx key value</span><br></pre></td></tr></table></figure>

<h3 id="哈希hash操作命令"><a href="#哈希hash操作命令" class="headerlink" title="哈希hash操作命令"></a>哈希hash操作命令</h3><p>Redis hash是一个string类型的field和calue的映射表，hash特别适合用于存储对象，常用的命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用 HSET 添加一个字段和值到哈希表中：</span></span><br><span class="line">HSET myhash field1 <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="comment">#这将在名为 myhash 的哈希表中添加一个字段 field1 并将其值设置为 &quot;Hello&quot;。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用 HGET 获取哈希表中指定字段的值：</span></span><br><span class="line">HGET myhash field1</span><br><span class="line"><span class="comment">#这将返回名为 myhash 的哈希表中 field1 字段的值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用 HMSET 添加多个字段和值到哈希表中：</span></span><br><span class="line">HMSET myhash field1 <span class="string">&quot;Hello&quot;</span> field2 <span class="string">&quot;World&quot;</span></span><br><span class="line"><span class="comment">#这将在名为 myhash 的哈希表中添加两个字段 field1 和 field2 并将它们的值设置为 &quot;Hello&quot; 和 &quot;World&quot;。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用 HLEN 获取哈希表中字段的数量：</span></span><br><span class="line">HLEN myhash</span><br><span class="line"><span class="comment">#这将返回名为 myhash 的哈希表中字段的数量。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用 HEXISTS 检查哈希表中是否存在指定的字段：</span></span><br><span class="line">HEXISTS myhash field1</span><br><span class="line"><span class="comment">#这将返回一个布尔值，表示名为 myhash 的哈希表中是否存在 field1 字段。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用 HDEL 删除哈希表中的一个或多个字段：</span></span><br><span class="line">HDEL myhash field1 field2</span><br><span class="line"><span class="comment">#这将从名为 myhash 的哈希表中删除 field1 和 field2 两个字段。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用 HKEYS 获取名为 myhash 的哈希表中的所有字段名：</span></span><br><span class="line">HKEYS myhash</span><br><span class="line"><span class="comment">#这将返回一个数组，包含名为 myhash 的哈希表中的所有字段名。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用 HVALS 获取名为 myhash 的哈希表中的所有字段值：</span></span><br><span class="line">HVALS myhash</span><br><span class="line"><span class="comment">#这将返回一个数组，包含名为 myhash 的哈希表中的所有字段值。</span></span><br></pre></td></tr></table></figure>

<h3 id="列表list操作命令"><a href="#列表list操作命令" class="headerlink" title="列表list操作命令"></a>列表list操作命令</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将一个或多个值插入到列表头部，返回列表的长度</span></span><br><span class="line">LPUSH mylist <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#移除并返回移除的头部元素</span></span><br><span class="line">LPOP mylist</span><br><span class="line"></span><br><span class="line"><span class="comment">#移除并返回移除的尾部元素</span></span><br><span class="line">RPOP mylist</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取列表指定范围内的所有元素（返回一个数组）</span></span><br><span class="line">LRANGE mylist <span class="number">0</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询指定列表所有的数据</span></span><br><span class="line">LRANGE mylist <span class="number">0</span> <span class="literal">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取列表指定索引位置的元素，返回指定位置的元素</span></span><br><span class="line">LINDEX mylist <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取列表的长度</span></span><br><span class="line">LLEN mylist</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改指定索引位置的数据</span></span><br><span class="line">LSET mylist <span class="number">1</span> orange</span><br></pre></td></tr></table></figure>

<h3 id="无序集合set操作命令"><a href="#无序集合set操作命令" class="headerlink" title="无序集合set操作命令"></a>无序集合set操作命令</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#向集合添加一个或多个成员</span></span><br><span class="line">SADD myset apple</span><br><span class="line">SADD myset orange banana</span><br><span class="line"></span><br><span class="line"><span class="comment">#从集合中删除一个或多个成员</span></span><br><span class="line">SREM myset orange</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回集合中所有的成员</span></span><br><span class="line">SMEMBERS myset</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回集合的基数（集合中元素的数量）</span></span><br><span class="line">SCARD myset</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断一个元素是否是集合的成员</span></span><br><span class="line">SISMEMBER myset apple</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回所有给定集合的并集</span></span><br><span class="line">SUNION set1 set2</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回所有给定集合的差集</span></span><br><span class="line">SDIFF set1 set2</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回所有给定集合的交集</span></span><br><span class="line">SINTER set1 set2</span><br></pre></td></tr></table></figure>

<h3 id="有序集合sorted-set操作命令"><a href="#有序集合sorted-set操作命令" class="headerlink" title="有序集合sorted set操作命令"></a>有序集合sorted set操作命令</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#向有序集合中添加成员</span></span><br><span class="line">ZADD myset <span class="number">20</span> <span class="string">&quot;Bob&quot;</span> <span class="number">30</span> <span class="string">&quot;Charlie&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取成员的分数</span></span><br><span class="line">ZSCORE myset <span class="string">&quot;Alice&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#移除成员</span></span><br><span class="line">ZREM myset <span class="string">&quot;Bob&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#增加成员的分数</span></span><br><span class="line">ZINCRBY myset <span class="number">5</span> <span class="string">&quot;Charlie&quot;</span></span><br><span class="line"><span class="comment">#35</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取成员的排名</span></span><br><span class="line"><span class="comment">#从大到小</span></span><br><span class="line">ZRANK myset <span class="string">&quot;Alice&quot;</span></span><br><span class="line"><span class="comment">#从小到大</span></span><br><span class="line">ZREVRANK myset <span class="string">&quot;Charlie&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取指定范围内的成员列表</span></span><br><span class="line">&gt; ZRANGEBYSCORE myset <span class="number">10</span> <span class="number">30</span> WITHSCORES LIMIT <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Alice&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;Charlie&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;30&quot;</span></span><br><span class="line"><span class="comment">#通过执行ZRANGEBYSCORE指令获取了myset有序集合中分数在10到30之间（包括10和30）的两个成员。由于指定了WITHSCORES选项，因此返回结果中包含每个成员的分数值。同时，由于指定了LIMIT选项，因此结果集合数量被限制为2个，并且偏移量为0。</span></span><br></pre></td></tr></table></figure>

<h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">KEYs pattern</span><br><span class="line"><span class="comment">#查找所有符合给定模式( pattern)的 key</span></span><br><span class="line"></span><br><span class="line">EXISTs key</span><br><span class="line"><span class="comment">#检查给定key是否存在</span></span><br><span class="line"></span><br><span class="line">rYPE key</span><br><span class="line"><span class="comment">#返回key所储存的值的类型</span></span><br><span class="line"></span><br><span class="line">TTL key</span><br><span class="line"><span class="comment">#返回给定key 的剩余生存时间(TTL, time to live)，以秒为单位</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DEL</span> key</span><br><span class="line"><span class="comment">#该命令用于在 key存在是删除key</span></span><br></pre></td></tr></table></figure>

<h2 id="Java操作radis"><a href="#Java操作radis" class="headerlink" title="Java操作radis"></a>Java操作radis</h2><h3 id="Java设置radis的spring类型"><a href="#Java设置radis的spring类型" class="headerlink" title="Java设置radis的spring类型"></a>Java设置radis的spring类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*添加键值对*/</span></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">&quot;city&quot;</span>,<span class="string">&quot;beijing&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取数据*/</span></span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;city&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加键值对并设置过期时间101秒*/</span></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">&quot;city&quot;</span>,<span class="string">&quot;beijing&quot;</span>,<span class="number">101</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置如果则不执行，如果没有就加上*/</span></span><br><span class="line"><span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;city&quot;</span>, <span class="string">&quot;nanjing&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Java设置radis的list类型"><a href="#Java设置radis的list类型" class="headerlink" title="Java设置radis的list类型"></a>Java设置radis的list类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ListOperations</span> <span class="variable">listOperations</span> <span class="operator">=</span> redisTemplate.opsForList();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*向list中存入多个值*/</span></span><br><span class="line">listOperations.leftPushAll(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">/*取值*/</span></span><br><span class="line">List&lt;String&gt; mylist = listOperations.range(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (String value : mylist) &#123;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">&#125;   <span class="comment">/*输出dcba*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得列表长度llen*/</span></span><br><span class="line">Long size=listOperations.size(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">lsize</span> <span class="operator">=</span> size.intValue();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; lsize; i++) &#123;</span><br><span class="line">        <span class="comment">/*出队列*/</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">element</span> <span class="operator">=</span> listOperations.rightPop(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">        System.out.println((String)element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Java设置radis的hash类型"><a href="#Java设置radis的hash类型" class="headerlink" title="Java设置radis的hash类型"></a>Java设置radis的hash类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashOperations hashOperations=redisTemplate.opsForHash();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*存值*/</span></span><br><span class="line">hashOperations.put(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">hashOperations.put(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br><span class="line">hashOperations.put(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;address&quot;</span>,<span class="string">&quot;bj&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*取值*/</span></span><br><span class="line">String age=(String) hashOperations.get(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;age&quot;</span>);</span><br><span class="line">System.out.println(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得hash结构中所有字段*/</span></span><br><span class="line">set keys=hashOperations.keys(<span class="string">&quot;002&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Object key : keys) &#123;</span><br><span class="line">    System.out.println(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得hash结构中所有字段*/</span></span><br><span class="line">List values=hashOperations.values(<span class="string">&quot;002&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Object value : values) &#123;</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java设置radis的Set类型"><a href="#Java设置radis的Set类型" class="headerlink" title="Java设置radis的Set类型"></a>Java设置radis的Set类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SetOperations setOperations= redisTemplate.opsForSet();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*存值*/</span></span><br><span class="line">setOperations.add(<span class="string">&quot;myset&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*取值*/</span></span><br><span class="line">Set&lt;String&gt; myset=setOperations.members(<span class="string">&quot;myset&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String o:myset)&#123;</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除成员*/</span></span><br><span class="line">setOperations.remove(<span class="string">&quot;myset&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Java设置radis的sorted-set类型"><a href="#Java设置radis的sorted-set类型" class="headerlink" title="Java设置radis的sorted set类型"></a>Java设置radis的sorted set类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZSetOperations zSetOperations=redisTemplate.opsForZSet();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*存值*/</span></span><br><span class="line">zSetOperations.add(<span class="string">&quot;myzset&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="number">10.0</span>);</span><br><span class="line">zSetOperations.add(<span class="string">&quot;myzset&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">20.0</span>);</span><br><span class="line">zSetOperations.add(<span class="string">&quot;myzset&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">30.0</span>);</span><br><span class="line">zSetOperations.add(<span class="string">&quot;myzset&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="number">40.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*取值*/</span></span><br><span class="line">Set&lt;String&gt; myzset= zSetOperations.range(<span class="string">&quot;myzset&quot;</span>,<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(String s:myzset)&#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改分数,添加20*/</span></span><br><span class="line">zSetOperations.incrementScore(<span class="string">&quot;myzset&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">20.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除*/</span></span><br><span class="line">zSetOperations.remove(<span class="string">&quot;myzset&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="使用Spring-Sache"><a href="#使用Spring-Sache" class="headerlink" title="使用Spring Sache"></a>使用Spring Sache</h2><h3 id="Spring-Cache简介"><a href="#Spring-Cache简介" class="headerlink" title="Spring Cache简介"></a>Spring Cache简介</h3><p>Spring Cache是一个框架，实现了基于注解的缓存功能，只需要简单地加一个注解，就能实现缓存功能。</p>
<p>Spring Cache提供了一层抽象，底层可以切换不同的cache实现。具体就是通过CacheManager接口来统一不同的缓存技术。</p>
<p>针对不同的缓存技术需要实现不同的CacheManager</p>
<table>
<thead>
<tr>
<th>CacheManager</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>EhCacheCacheManager</td>
<td>使用EhCache作为缓存技术</td>
</tr>
<tr>
<td>GuavaCacheManager</td>
<td>使用Google的GuavaCache作为缓存技术</td>
</tr>
<tr>
<td>RedisCacheManager</td>
<td>使用Redis作为缓存技术</td>
</tr>
</tbody></table>
<h3 id="Spring-Cache常用注解"><a href="#Spring-Cache常用注解" class="headerlink" title="Spring Cache常用注解"></a>Spring Cache常用注解</h3><table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@EnableCaching</td>
<td>开启缓存注解功能</td>
</tr>
<tr>
<td>@Cacheable</td>
<td>在方法执行前spring先查看缓存中是否有数据，如果有数据，则直接返回缓存数据;若没有数据，调用方法并将方法返回值放到缓存中</td>
</tr>
<tr>
<td>@CachePut</td>
<td>将方法的返回值放到缓存中</td>
</tr>
<tr>
<td>@CacheEvict</td>
<td>将一条或多条数据从缓存中删除</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cacheable:查询指定缓存，在执行时先查看缓存中是否有数据。如果有，优先加载内存。如果没有再去mysql中查找</span></span><br><span class="line"><span class="comment"> * value：缓存的名称，每个缓存名称下面可以有多个key</span></span><br><span class="line"><span class="comment"> * key：缓存的key</span></span><br><span class="line"><span class="comment"> * condition：满足条件时才会缓存数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;userCache&quot;, key = &quot;#id&quot;,condition = &quot;#id != null&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h2><p>首先本机设为从库，服务器作为主库</p>
<hr/>

<p>修改服务器（主库）</p>
<p>打开 Redis 主服务器 redis.windows.conf 配置文件，找到 bind 和 port 配置项，确保 Redis 绑定的 IP 地址和端口号正确：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind 127.0.0.1 		# 这里改成服务器的 IP 地址或者绑定的外网地址</span><br><span class="line">port 6379 			# 这里保持默认的 Redis 端口号</span><br><span class="line">requirepass 510609	# 设置主库密码</span><br></pre></td></tr></table></figure>

<p>主库src中运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server ../redis.conf						#运行服务</span><br><span class="line">redis-cli -h 192.168.136.131 -p 6379 -a 510609	#设置当前主库ip、端口和密码</span><br><span class="line">info replication								#查看角色和状态</span><br></pre></td></tr></table></figure>


<hr>

<p>修改本机（从库）</p>
<p>打开redis.conf配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slaveof 192.168.56.110 6379		#配置所属主服务器的ip和端口号</span><br><span class="line">masterauth 510609				#配置所属主服务的密码</span><br></pre></td></tr></table></figure>

<p>从库中启动redis-server.exe和redis-cli.exe，并运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slaveof 192.168.136.131 6379	#设置所属主库ip和端口号</span><br><span class="line">config set masterauth 510609	#填写主库密码</span><br><span class="line">info replication				#查看角色和状态</span><br></pre></td></tr></table></figure>

<h2 id="redis哨兵机制"><a href="#redis哨兵机制" class="headerlink" title="redis哨兵机制"></a>redis哨兵机制</h2><blockquote>
<p>主从复制带来的问题</p>
<p>当主服务宕机时，redis不能自动切换从服务为主服务，只能通过人工手动的形式，中间会出现服务断档</p>
</blockquote>
<p>从而引入哨兵模式概念：</p>
<p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p>
<p><strong>用文字描述一下故障切换（failover）的过程。假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。这样对于客户端而言，一切都是透明的。</strong></p>
<h3 id="哨兵配置"><a href="#哨兵配置" class="headerlink" title="哨兵配置"></a>哨兵配置</h3><ol>
<li><p>在readis文件夹下找到sentinel.conf文件</p>
</li>
<li><p>修改对应配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#禁止保护配置</span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line">#监控配置</span><br><span class="line">#setinel monitor:代表监控;</span><br><span class="line">#mymaster:代表主机名，可以自定义;</span><br><span class="line">#192.168.56.110∶主服务ip地址;</span><br><span class="line">#6379∶主服务端口号;</span><br><span class="line">#2:需要几个哨兵意见统一</span><br><span class="line">sentinel monitor mymaster 192.168.56.110 6379 2 </span><br><span class="line"></span><br><span class="line">#配置后台启动</span><br><span class="line">daemonize yes</span><br></pre></td></tr></table></figure></li>
<li><p>启动哨兵</p>
<p>Sentinel ./sentinel.conf</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot笔记</title>
    <url>/2023/06/12/SpringBoot/</url>
    <content><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="新建SpringBoot项目"><a href="#新建SpringBoot项目" class="headerlink" title="新建SpringBoot项目"></a>新建SpringBoot项目</h2><p>文件–&gt;新建–&gt;项目</p>
<p><img src="/img/SpringBoot/image-20230322144326585.png" alt="image-20230322144326585" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/SpringBoot/image-20230322144532122.png" alt="image-20230322144532122" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="配置格式"><a href="#配置格式" class="headerlink" title="配置格式"></a>配置格式</h3><p>SpringBoot提供了多种属性配置方法</p>
<ul>
<li><p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure></li>
<li><p>application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">server：</span></span><br><span class="line">	<span class="string">port：81</span>	</span><br></pre></td></tr></table></figure></li>
<li><p>application.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">server：</span></span><br><span class="line">	<span class="string">port：81</span>	</span><br></pre></td></tr></table></figure>

<p>优先级：有上到下</p>
</li>
</ul>
<h3 id="yaml文件"><a href="#yaml文件" class="headerlink" title="yaml文件"></a>yaml文件</h3><p>示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">  <span class="attr">tel:</span> <span class="number">1654654</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">大数据</span></span><br></pre></td></tr></table></figure>

<p>单个数据用变量名+冒号空格后面接数据表示</p>
<p>一对多数据（数组）用-加空格表示</p>
<p>注释使用#</p>
<h3 id="使用yaml中定义的属性值"><a href="#使用yaml中定义的属性值" class="headerlink" title="使用yaml中定义的属性值"></a>使用yaml中定义的属性值</h3><ol>
<li>通过@value引入</li>
</ol>
<p>创建资源文件application.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">lesson:</span> <span class="string">SpringBoot</span></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">  <span class="attr">tel:</span> <span class="number">1654654</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">大数据</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure>

<p>在Spring中使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;lesson&#125;&quot;)</span></span><br><span class="line">    String lesson;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>使用pojo（最常用）</p>
<p>Enterprise.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;enterprise&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enterprise</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String[] subject;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;, &quot;</span>, Enterprise.class.getSimpleName() + <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>)</span><br><span class="line">                .add(<span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">                .add(<span class="string">&quot;age=&quot;</span> + age)</span><br><span class="line">                .add(<span class="string">&quot;tel=&#x27;&quot;</span> + tel + <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">                .add(<span class="string">&quot;subject=&quot;</span> + Arrays.toString(subject))</span><br><span class="line">                .toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTel</span><span class="params">(String tel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getSubject() &#123;</span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSubject</span><span class="params">(String[] subject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Enterprise enterprise;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接打印enterprise对象</span></span><br><span class="line">System.out.println(enterprise);</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p>Enterprise[name=’itcast’, age=16, tel=’1654654’, subject=[Java, 前端, 大数据]]</p>
</li>
</ol>
<h2 id="多环境启动"><a href="#多环境启动" class="headerlink" title="多环境启动"></a>多环境启动</h2><p>设置多个mysql地址或者多个端口</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置默认启动环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#生产</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure>

<p>使用命令更改已打包的端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar springboot.jar --spring.profiles.active=test</span><br></pre></td></tr></table></figure>

<h2 id="多环境开发兼容（maven与boot协作）"><a href="#多环境开发兼容（maven与boot协作）" class="headerlink" title="多环境开发兼容（maven与boot协作）"></a>多环境开发兼容（maven与boot协作）</h2><p>在环境中如果maven和boot都有profile属性则优先执行maven中的设置</p>
<p>那如何让二者进行分工协作呢？</p>
<p><strong>我们可以让pom来命令.yaml文件具体执行哪一个环境</strong></p>
<p>示例：如何切换端口</p>
<ol>
<li>pom.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--起个别名--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--默认使用--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>test<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是pom中起的别名只能在pom中使用，所以我们要安装一个插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">useDefaultDelimiters</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useDefaultDelimiters</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>yaml</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置默认启动环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">$&#123;profile.active&#125;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#生产</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure>

<p>最后运行结果为执行81端口</p>
<hr>

<h2 id="配置文件层级"><a href="#配置文件层级" class="headerlink" title="配置文件层级"></a>配置文件层级</h2><p>配置文件分类        </p>
<p>SpringBoot中4级配置文件</p>
<ul>
<li>1级: file : config/application.yml        【最高】</li>
<li>2级: file : application.yml</li>
<li>3级: classpath: config/application.yml</li>
<li>4级: classpath: application.yml            【最低】</li>
</ul>
<p>作用:</p>
<ul>
<li>1级与2级留做系统打包后设置通用属性</li>
<li>3级与4级用于系统开发阶段设置通用属性</li>
</ul>
<h2 id="Springboot整合mybatis"><a href="#Springboot整合mybatis" class="headerlink" title="Springboot整合mybatis"></a>Springboot整合mybatis</h2><p>以通过id查找数据为例</p>
<ol>
<li>在yaml文件中配置数据库</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">510609</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>BookDao</p>
<p>终点注意Mapper，没有了扫描包，springboot会自动识别mapper的自动代理提供给调用类使用</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot08MybatisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookDao.getById(<span class="number">1</span>);</span><br><span class="line">		System.out.println(book);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>使用Swagger你只需要按照它的规范去定义接口及接口相关的信息，再通过Swagger衍生出来的一系列项目和工具,就可以做到生成各种格式的接口文档，以及在线接口调试页面等等。</p>
<p>knife4j是为java MVC框架集成的swagger</p>
<h3 id="具体用法"><a href="#具体用法" class="headerlink" title="具体用法"></a>具体用法</h3><ol>
<li><p>导入knife4j依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency</span><br><span class="line">	&lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>在webmcvconfig中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .select()</span><br><span class="line">       .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.itheima.reggie.contraller&quot;</span>))</span><br><span class="line">            .paths(PathSelectors.any())</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">            .title(<span class="string">&quot;瑞吉外卖&quot;</span>)</span><br><span class="line">            .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">            .description(<span class="string">&quot;瑞吉外卖接口文档&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>让前端接管</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;开始进行静态资源映射&quot;</span>);</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>前端放行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] urls=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/front/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/user/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/common/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/doc.html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/webjars/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/swagger-resources&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/v2/api-docs&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><p><img src="/img/SpringBoot/image-20230426102850026.png" alt="image-20230426102850026" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务</title>
    <url>/2023/09/24/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><h2 id="认识微服务"><a href="#认识微服务" class="headerlink" title="认识微服务"></a>认识微服务</h2><p>微服务是一种软件设计模式，它将<strong>应用程序</strong>拆分成小型、相互独立的服务，每个服务都可以通过标准化的接口进行通信和交互。</p>
<p>这些服务通常部署在容器中，每个服务都可以<strong>独立地进行扩展、升级和维护</strong>，从而提高了系统的灵活性、可伸缩性和可靠性。</p>
<p>与传统的单体式架构不同，微服务的架构可以更轻松地适应快速变化的业务需求，并且可以更容易地实现持续集成和持续部署（CI/CD）的流程。</p>
<p>微服务的特点：</p>
<ul>
<li>单一职责：微服务拆分颗粒度更小，每一个服务都对应唯一的业务能力，做到单一职责，避免重复业务开发</li>
<li>面向服务：微服务对外暴露业务接口</li>
<li>自治：团队独立、技术独立、数据独立、部署独立</li>
<li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题】</li>
</ul>
<h2 id="SpringCloud与SpringBoot的版本兼容关系"><a href="#SpringCloud与SpringBoot的版本兼容关系" class="headerlink" title="SpringCloud与SpringBoot的版本兼容关系"></a>SpringCloud与SpringBoot的版本兼容关系</h2><p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230421171911074.png" alt="image-20230421171911074" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h2><p>微服务的远程连接实例通常采用 RESTful API 或 RPC（Remote Procedure Call）来实现。</p>
<p>RESTful API 是一种基于 HTTP 协议的轻量级的、可扩展的架构风格，它使用明确的 URL 和 HTTP 方法（例如 GET、POST、PUT、DELETE）来表示对资源的操作。每个微服务都提供一组 RESTful API，其他微服务可以通过调用这些 API 来访问和使用该服务提供的功能。</p>
<p>使用步骤：</p>
<ol>
<li><p>注册RestTemplate</p>
<p>在order-service的OrderApplication中注册RestTemplate</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>服务远程调用RestTemplate</p>
<p>修改order-service中的OrderService的queryOrderById方法</p>
<p><em><strong>也就是通过http连接获取到user获取到的数据</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.利用RestTemplate发送http请求，查询用户</span></span><br><span class="line">        <span class="comment">// 2.1设置url路径</span></span><br><span class="line">        String url=<span class="string">&quot;http://localhost:8081/user/&quot;</span>+order.getUserId();</span><br><span class="line">        <span class="comment">// 2.2发送http请求，远程调用</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.封装user到order</span></span><br><span class="line">        order.setUser(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Eureka注册中心"><a href="#Eureka注册中心" class="headerlink" title="Eureka注册中心"></a>Eureka注册中心</h2><blockquote>
<p>在一个大型的分布式系统中，服务往往会有多个实例运行在不同的机器上，而这些服务之间又需要相互通信，这时就需要一个中心化的服务注册和发现机制，来管理服务的实例和状态。</p>
</blockquote>
<h3 id="Eureka概念"><a href="#Eureka概念" class="headerlink" title="Eureka概念"></a>Eureka概念</h3><p><b>通过 Eureka，我们可以很方便地将一个服务注册到 Eureka 服务器，并让其他服务消费该服务</b></p>
<p>服务提供者和服务消费者统称为eureka客户端</p>
<p>Eureka注册中心执行步骤：</p>
<ol>
<li><p>在服务提供者启动时会自动将注册服务信息发送给eureka</p>
</li>
<li><p>eureka接收到注册信息例如：</p>
<p>user-service:</p>
<p>​    localhost:8081</p>
<p>​    localhost:8082</p>
<p>​    localhost:8083</p>
<p>order-service:</p>
<p>​    localhost:8080</p>
</li>
<li><p>消费者使用时会找rureka拿取注册信息</p>
<p>例如想要请求user-service的信息，eureka就会将注册信息通过负载均衡向服务提供者发送请求</p>
</li>
</ol>
<p><em><strong>注：服务消费者不会拿到死掉的地址，因为服务提供者会每隔30s发送一次心跳确认状态</strong></em></p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230508113756050.png" alt="image-20230508113756050" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="搭建eureka服务"><a href="#搭建eureka服务" class="headerlink" title="搭建eureka服务"></a>搭建eureka服务</h3><ol>
<li><p>创建项目，引入spring-cloud-starter-netflix-eureka-server</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">  artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">2.2</span><span class="number">.7</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>注意：springboot、springcloud和eureka版本要对应</p>
</li>
<li><p>编写启动类，添加@EnableEurekaServer注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>添加application.yml文件，编写下面的配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span>   <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eurekaserver</span>  <span class="comment">#eureka的服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span>  <span class="comment">#eureka的地址信息</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure>

<p>文件结构：eureka以子文件形式出现</p>
<p>​    <img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230508182704703.png" alt="image-20230508182704703" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ol>
<h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><blockquote>
<p>服务注册，就是将提供某个服务的模块信息(通常是这个服务的ip和端口)注册到1个公共的组件上去</p>
</blockquote>
<ol>
<li><p>在order-service项目引入spring-cloud-starter-netflix-eureka-client的依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">  artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">2.2</span><span class="number">.7</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>在application.yml文件，编写下面的配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span>   <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eurekaserver</span>  <span class="comment">#eureka的服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span>  <span class="comment">#eureka的地址信息</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><blockquote>
<p>服务发现，就是新注册的这个服务模块能够及时的被其他调用者发现。不管是服务新增和服务删减都能实现自动发现。</p>
</blockquote>
<ol>
<li><p>修改OrderService的代码，修改访问的url路径，用服务名代替ip、端口:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String url=<span class="string">&quot;http://userservice/user/&quot;</span>+order.getUserId();</span><br></pre></td></tr></table></figure></li>
<li><p>在order-service项目的启动类OrderApplication中的RestTemplate添加负载均衡注解:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>	<span class="comment">//实现负载均衡</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h2><p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230806140023892.png" alt="image-20230806140023892" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>通过IRule实现可以修改负载均衡规则，有两种方式：</p>
<ol>
<li><p>添加依赖：您需要将Spring Cloud Ribbon依赖添加到您的项目中。 您可以在pom.xml文件中添加以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">(&#123;</span></span><br><span class="line"><span class="params">    //实行随机分配负载</span></span><br><span class="line"><span class="params">	return new RandomRule()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>配置文件方式:在order-service的application.yml文件中，添加新的配置也可以修改规则</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line"> <span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment">#负载均衡规则</span></span><br><span class="line">  <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure></li>
<li><p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230621085421470.png" alt="image-20230621085421470" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ol>
<h3 id="懒加载和饥饿加载"><a href="#懒加载和饥饿加载" class="headerlink" title="懒加载和饥饿加载"></a>懒加载和饥饿加载</h3><p>懒加载：在第一次发起请求的时候才会创建LoadBalancerClient对象，就会导致第一次访问时长比较久</p>
<p>饥饿加载：饥饿加载是指在启动项目时就创建LoadBalancerClient对象，并在后续请求中只使用一个LoadBalanceClient对象，从而减少了一开始就请求大量资源所带来的延迟和耗电量。</p>
<p>程序默认为懒加载：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"> <span class="attr">eager-load:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启饥饿加载</span></span><br><span class="line">  <span class="attr">clients:</span> <span class="string">userservice</span> <span class="comment">#指定对userservice这个服务饥饿加载</span></span><br></pre></td></tr></table></figure>

<h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><h3 id="下载安装运行"><a href="#下载安装运行" class="headerlink" title="下载安装运行"></a>下载安装运行</h3><p>下载1.4.1版本</p>
<p><a href="https://github.com/alibaba/nacos/releases/tag/1.4.1">Release 1.4.1 (Jan 15, 2021) · alibaba/nacos · GitHub</a></p>
<p>![image-20230509181757525](/img/微服务/Java SE.md)</p>
<p>解压安装</p>
<p>运行bin/startup.cmd</p>
<h3 id="使用necos注册中心"><a href="#使用necos注册中心" class="headerlink" title="使用necos注册中心"></a>使用necos注册中心</h3><ol>
<li><p>在父组件的pom文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在子组件中去掉eureka依赖，并加上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置yaml文件，去掉eureka的并添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>注：在运行程序时，记得启动nacos</p>
<h3 id="Nacos服务分级存储模型"><a href="#Nacos服务分级存储模型" class="headerlink" title="Nacos服务分级存储模型"></a>Nacos服务分级存储模型</h3><blockquote>
<p>在企业中，一般我们会把<strong>服务的多个实例分放在多个机房</strong>以达到容灾</p>
</blockquote>
<p>服务调用尽可能选择本地集群的服务，跨集群调用延迟较高</p>
<p>本地集群不可访问时，再去访问其它集群</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230510103222771.png" alt="image-20230510103222771" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><b>Nacos服务分级存储模型</b></p>
<ol>
<li>一级是服务，例如userservice</li>
<li>二级是集群，例如杭州或上海</li>
<li>三级是实例，例如杭州机房的某台部署了userservice的服务器</li>
</ol>
<p><b>服务集群属性设置：</b></p>
<ol>
<li><p>修改application.yml，添加如下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">cloud :</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">   <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos服务端地址</span></span><br><span class="line">   <span class="attr">discovery:</span></span><br><span class="line">    <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment">#配置集群名称，也就是机房位置，例如:HZ，杭州</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="加权负载均衡"><a href="#加权负载均衡" class="headerlink" title="加权负载均衡"></a>加权负载均衡</h3><ul>
<li><p>Nacos控制台可以设置实例的权重值，0~1之间同集群内的多个实例，</p>
</li>
<li><p>权重越高被访问的频率越高权重</p>
</li>
<li><p>设置为0则完全不会被访问</p>
</li>
</ul>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230510121556683.png" alt="image-20230510121556683" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h3><blockquote>
<p>Nacos中服务存储和数据存储的最外层都是一个名为namespace的东西，用来做最外层隔离</p>
</blockquote>
<p>Nacos环境隔离</p>
<ul>
<li><p>namespace用来做环境隔离</p>
</li>
<li><p>每个namespace都有唯一的id</p>
</li>
<li><p>不同namespace下的服务不可见</p>
<hr></li>
</ul>
<ol>
<li><p>在Nacos控制台可以创建namespace，用来隔离不同环境</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230510163803464.png" alt="image-20230510163803464" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>设置新命名空间</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230510163840077.png" alt="image-20230510163840077" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>保存后会在控制台看到一个命名空间id</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230510163949690.png" alt="image-20230510163949690" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>修改order-service的application.yml，添加namespace:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">   <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">   <span class="attr">discovery:</span></span><br><span class="line">    <span class="attr">cluster-name:</span> <span class="string">SH</span> <span class="comment">#上海</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span>		<span class="comment">#命名空间，填ID</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="临时实例和非临时实例"><a href="#临时实例和非临时实例" class="headerlink" title="临时实例和非临时实例"></a>临时实例和非临时实例</h3><p>临时实例和非临时实例区别：</p>
<p>​    临时实例：每隔三十秒向注册中心发送心跳</p>
<p>​    非临时实例：不自动发送心跳，由注册中心询问，更新速度更快</p>
<p>​    <img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230510171337216.png" alt="image-20230510171337216" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>服务注册到Nacos时，可以选择注册为临时或非临时实例，通过配置的配置来设置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">ntcos:</span></span><br><span class="line">   <span class="attr">discovery:</span></span><br><span class="line">    <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment">#设置为非临时实例</span></span><br></pre></td></tr></table></figure>

<h3 id="Nacos与Eureka的区别"><a href="#Nacos与Eureka的区别" class="headerlink" title="Nacos与Eureka的区别"></a>Nacos与Eureka的区别</h3><ol>
<li>Nacos支持服务端主动检测提供者状态:临时实例采用心跳模式，非临时实例采用主动检测模式</li>
<li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li>
<li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li>
<li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式;Eureka采用AP方式</li>
</ol>
<h3 id="Nacos统一配置管理"><a href="#Nacos统一配置管理" class="headerlink" title="Nacos统一配置管理"></a>Nacos统一配置管理</h3><p>Nacos不只是有强大的注册中心功能，他同时还兼备配置管理功能。所谓统一配置就是将这一个微服务中都能用到的配置放在一个文件中，并且能实现热更新</p>
<ol>
<li><p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230510173601186.png" alt="image-20230510173601186" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230510173619767.png" alt="image-20230510173619767" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>服务获取配置</p>
</li>
</ol>
<p>配置获取的步骤如下：</p>
<p>项目启动时会优先读取一个叫bootstarp.yml的文件，然后再将这个文件和本地的application.yml相结合，在通过这俩配置文件的结合体来创建spring容器最后加载bean</p>
<p>具体步骤：</p>
<ol>
<li><p>引入Nacos的配置管理客户端依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;! --nacos配置管理依赖--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在userservice中的resource目录添加一个bootstarp.yaml文件，这个文件是引导文件，优先级高于application.yaml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">application:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">userservice</span> <span class="comment">#服务名称，和nacos注册中心名称一致</span></span><br><span class="line"> <span class="attr">profiles:</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev</span></span><br><span class="line"> <span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">   <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos地址</span></span><br><span class="line">   <span class="attr">config:</span></span><br><span class="line">	<span class="attr">file-extension:</span> <span class="string">yaml#文件后缀名</span></span><br></pre></td></tr></table></figure>

<p>可以在user-servie中将pattern.dateformat这个属性注入到UserController中做测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//注入nacos中的配置属性</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写controller，通过日期格式化器来格式化当前时间并返回</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;now&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外，Nacos配置更改后，微服务可以实现热更新，有两种方法：</p>
<ol>
<li>通过@value注解注入，结合@RefreshScope来刷新</li>
<li>通过@ConfigurationProperties注入，自动刷新</li>
</ol>
</li>
</ol>
<blockquote>
<p>优先级：</p>
<p>服务名-环境.yaml&gt;服务名.yaml&gt;本地配置</p>
</blockquote>
<h3 id="Nacos集群搭建步骤"><a href="#Nacos集群搭建步骤" class="headerlink" title="Nacos集群搭建步骤"></a>Nacos集群搭建步骤</h3><ol>
<li><p>搭建MySQL集群并初始化数据库表</p>
</li>
<li><p>下载解压nacos</p>
</li>
<li><p>修改集群配置（节点信息）、数据库配置</p>
<ol>
<li><p>进入nacos的conf目录，修改配置文件cluster.conf.example重命名为cluster.conf</p>
</li>
<li><p>添加内容,集群中每一个节点的信息</p>
<p>127.0.0.1:8845</p>
<p>127.0.0.1:8846</p>
<p>127.0.0.1:8847</p>
</li>
<li><p>修改application.properties文件，添加数据库配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据源，告诉nacos用的什么集群</span></span><br><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysq1</span></span><br><span class="line"><span class="comment">#有几台机器</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">db.ur1.O</span>=<span class="string">jdbc:mysq7://127.0.0.1:3306/nacos?</span></span><br><span class="line"><span class="attr">characterEncoding</span>=<span class="string">utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useunicode=true&amp;usessL=fa1se&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root I</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>分别启动多个nacos节点</p>
</li>
<li><p>nginx反向代理</p>
<p>修改conf/nginx.conf文件，配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//放置集群地址，方便nginx设置反向代理</span><br><span class="line">upstream nacos-cluster &#123;</span><br><span class="line">	server 127.0.0.1:8845;</span><br><span class="line">	server 127.0.0.1:8846;</span><br><span class="line">	server 127.0.0.1:8847;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">	listen	80;</span><br><span class="line">	server_name	localhost;</span><br><span class="line">	location /nacos &#123;</span><br><span class="line">		proxy_pass http://nacos-cluster;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><h3 id="基于Feign的远程调用"><a href="#基于Feign的远程调用" class="headerlink" title="基于Feign的远程调用"></a>基于Feign的远程调用</h3><p>步骤：</p>
<ol>
<li><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建UserClient</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;userservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在springboot启动类中添加注解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@EnableFeignClients</span><br></pre></td></tr></table></figure></li>
<li><p>修改之前的orderService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.用Feign远程调用</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userClient.findById(order.getUserId());</span><br><span class="line">        <span class="comment">// 3.封装user到order</span></span><br><span class="line">        order.setUser(user);</span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Feign的性能优化"><a href="#Feign的性能优化" class="headerlink" title="Feign的性能优化"></a>Feign的性能优化</h3><blockquote>
<p>在Fegin的默认中是不支持连接池的URLConnection，因此每次请求都会进行三次握手和四次挥手大大提高了响应速度，因此我们对Fegin的性能优化首先就要解决让Fegin支持连接池</p>
</blockquote>
<p>Fegin中底层的客户端实现：</p>
<ul>
<li><p>URLcontroller：默认实现，不支持连接池</p>
</li>
<li><p>Apache HttpClient：支持连接池</p>
</li>
<li><p>OKHttp：支持连接池</p>
</li>
</ul>
<p>这里主要介绍使用Apache HttpClient的使用方法</p>
<ol>
<li><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置连接池</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"> <span class="attr">client:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">   <span class="attr">default:</span>	<span class="comment">#default全局的配置</span></span><br><span class="line">    <span class="attr">loggeiLevel:</span> <span class="string">BASIC</span> <span class="comment">#日志级别，BASIC就是基本的请求和晌应信息</span></span><br><span class="line"> <span class="attr">httpclient:</span></span><br><span class="line">  <span class="attr">enabled :</span> <span class="literal">true</span>	<span class="comment">#开启feign对HttpClient的支持</span></span><br><span class="line">  <span class="attr">max-connections:</span> <span class="number">200</span>	<span class="comment">#最大的连接数</span></span><br><span class="line">  <span class="attr">max-connections-per-route:</span> <span class="number">50</span> <span class="comment">#每个路径的最大连接数</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Feign最佳实践"><a href="#Feign最佳实践" class="headerlink" title="Feign最佳实践"></a>Feign最佳实践</h3><ol>
<li>将clients和pojo的user单独分离出来成为fegin-api</li>
<li>将fegin-api当做包引用</li>
<li>可能会遇到的问题：自动注入不成功</li>
</ol>
<p>​    解决方法：</p>
<ol>
<li><p>在@EnableFeignClients注释中添加basePackages，指定FeignClient所在的包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;cn.itcast.feign.clients&quot;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>在@EnableFeignClients注解中添加clients，指定具体Feignclient的字节码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EnableFeignclients(clients = &#123;Userclient.class&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="统一网关Gateway"><a href="#统一网关Gateway" class="headerlink" title="统一网关Gateway"></a>统一网关Gateway</h2><h3 id="为什么需要网关"><a href="#为什么需要网关" class="headerlink" title="为什么需要网关"></a>为什么需要网关</h3><p>网关的功能：</p>
<ol>
<li>身份验证和权限检测</li>
<li>服务路由、负载均衡</li>
<li>请求限流</li>
</ol>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>搭建网关服务的步骤：</p>
<ol>
<li><p>创建新的module，引入SpringCloudGetway的依赖和nacos的服务发现依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;! --网关依赖--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&lt;! --nacos服务发现依赖--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写路由配置及nacos地址</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment">#网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment">#网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment">#路由id，自定义，只要唯一即可</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment"># 路由的目标地址lb就是负载均衡，后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">           <span class="bullet">-</span> <span class="string">Path=/user/**</span>	<span class="comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id :</span> <span class="string">order-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://orderservice</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br></pre></td></tr></table></figure>

<p>网关执行流程：</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/d00h.gif" alt="image-20230517165753824" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ol>
<h3 id="断言工厂"><a href="#断言工厂" class="headerlink" title="断言工厂"></a>断言工厂</h3><p>网关需要符合所有的断言工厂才能正常分配</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230517175034135.png" alt="image-20230517175034135" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230517174934209.png" alt="image-20230517174934209" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="过滤器工厂"><a href="#过滤器工厂" class="headerlink" title="过滤器工厂"></a>过滤器工厂</h3><p>过滤器的作用：</p>
<ul>
<li>对路由的请求或响应做加工处理，比如添加请求头</li>
<li>配置在路由下的过滤器只对当前路由的请求生效</li>
</ul>
<p>例如：给所有进入userservice的请求添加一个请求头: Truth=itcast is freaking awesome!</p>
<p>实现方式：</p>
<ol>
<li>在gateway中修改application.yml文件，给userservice的路由添加过滤器：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">gateway:</span></span><br><span class="line">   <span class="string">routes:#网关路由配置</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span></span><br><span class="line">     <span class="attr">uri:</span> <span class="string">lb://userservice</span></span><br><span class="line">     <span class="attr">predicates:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">     <span class="string">filters:#过滤器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth，Itcast</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome!</span> <span class="comment">#添加请求头</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>在方法中接收</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id ,</span></span><br><span class="line"><span class="params">  <span class="meta">@RequestHeader(value = &quot;Truth&quot;,required = false)</span> String truth)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.queryById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="默认过滤器"><a href="#默认过滤器" class="headerlink" title="默认过滤器"></a>默认过滤器</h4><p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下，格式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment">#网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment">#路由id，自定义，只要唯一即可</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment"># 路由的目标地址lb就是负载均衡，后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">           <span class="bullet">-</span> <span class="string">Path=/user/**</span>	<span class="comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span></span><br><span class="line">          <span class="attr">filters:</span> <span class="comment">#过滤器</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth，Itcast</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome!</span> <span class="comment">#添加请求头</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id :</span> <span class="string">order-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://orderservice</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">      <span class="attr">default-filters:</span>  <span class="comment">#默认过滤器，会对所有的路由请求生效</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,Itcast</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome!</span>  <span class="comment">#在这里写添加请求头</span></span><br></pre></td></tr></table></figure>

<h4 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h4><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。</p>
<p>区别在于GatewayFilter通过配置定义，处理逻辑是固定的。而GlobalFilter的逻辑需要自己写代码实现。定义方式是实现GlobalFilter接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*order设置优先级，数字越低优先级越高*/</span></span><br><span class="line"><span class="meta">@Order(-1)</span></span><br><span class="line"><span class="comment">/*注册成spring的bean*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line"><span class="comment">//        1.获取请求参数</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = request.getQueryParams();</span><br><span class="line"><span class="comment">//        2.获取参数中authorization参数</span></span><br><span class="line">        String auth=params.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line"><span class="comment">//        3.判断参数值是否等于admin</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(auth)) &#123;</span><br><span class="line"><span class="comment">//        4.是，放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//        5.否，拦截并设置状态码</span></span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="跨域问题处理"><a href="#跨域问题处理" class="headerlink" title="跨域问题处理"></a>跨域问题处理</h4><p>跨域：域名不一致就是跨域，主要包括：</p>
<ul>
<li>域名不同：<a href="http://www.taobao.com和www.taobao.org/">www.taobao.com和www.taobao.org</a></li>
<li>域名相同，端口不同：localhost:8080和localhost:8081</li>
</ul>
<p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment">#全局的跨域处理</span></span><br><span class="line">      <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment">#解决options请求被拦截问题	</span></span><br><span class="line">      <span class="attr">corsConfigurations:</span></span><br><span class="line">      <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span>	<span class="comment">#所有请求进行跨域处理</span></span><br><span class="line">        <span class="attr">allowed0rigins:</span> <span class="comment">#允许哪些网站的跨域请求</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;http://localhost:8090&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;http://www.leyou.com&quot;</span></span><br><span class="line">        <span class="attr">allowedMethods:</span> <span class="comment">#允许的跨域ajax的请求方式</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">      <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span>  <span class="comment">#允许在请求中携带的头信息</span></span><br><span class="line">      <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment">#是否允许携带cookie</span></span><br><span class="line">      <span class="attr">maxAge:</span> <span class="number">360000</span>  <span class="comment">#这次跨域检测的有效期，在这个范围内浏览器将不再询问跨域</span></span><br></pre></td></tr></table></figure>

<h2 id="Docker分布式部署"><a href="#Docker分布式部署" class="headerlink" title="Docker分布式部署"></a>Docker分布式部署</h2><h3 id="项目部署的问题"><a href="#项目部署的问题" class="headerlink" title="项目部署的问题"></a>项目部署的问题</h3><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题:</p>
<ul>
<li>依赖关系复杂，容易出现兼容性问题</li>
<li>开发、测试、生产环境有差异</li>
</ul>
<h3 id="Docker如何解决依赖的兼容问题"><a href="#Docker如何解决依赖的兼容问题" class="headerlink" title="Docker如何解决依赖的兼容问题"></a>Docker如何解决依赖的兼容问题</h3><p>首先我们要知道，linux系统分为很多种，例如：Ubuntu、centos等，他们都是基于linux内核，而linux内核通过固定的指令就能操作硬件。而每个系统的差异就是因为打包linux指令的函数式不同，函数式不同就会造成不同的系统无法执行同一个命令。</p>
<p>Docker如何解决：</p>
<ul>
<li><p>Docker将用户程序与所需要调用的系统（例如centos）函数库一起打包成可移植的镜像 </p>
</li>
<li><p>Docker运行到不同的操作系统时，直接基于打包的库函数，借助操作系统的linux内核来运行</p>
</li>
</ul>
<h3 id="安装、卸载Docker"><a href="#安装、卸载Docker" class="headerlink" title="安装、卸载Docker"></a>安装、卸载Docker</h3><p>centos安装Docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 --skip-broken</span><br></pre></td></tr></table></figure>

<p>设置Docker下载源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置docker镜像源</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">sed -i &#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure>

<p>卸载Docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure>

<h3 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h3><p>docker官方镜像仓库网速较差，我们需要设置国内镜像服务：</p>
<p>参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>
<h3 id="docker获取镜像"><a href="#docker获取镜像" class="headerlink" title="docker获取镜像"></a>docker获取镜像</h3><p><a href="https://hub-stage.docker.com/">Docker Hub Container Image Library | App Containerization</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>

<h3 id="docker其他命令"><a href="#docker其他命令" class="headerlink" title="docker其他命令"></a>docker其他命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#启动 Docker 服务</span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line">#设置为自动启动：</span><br><span class="line">sudo systemctl enable docker</span><br><span class="line"></span><br><span class="line">#查看帮助</span><br><span class="line">docker save --help</span><br><span class="line"></span><br><span class="line">#查看镜像</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">#将镜像打包</span><br><span class="line">docker save -o nginx.tar nginx: latest</span><br><span class="line"></span><br><span class="line">#删除指定镜像</span><br><span class="line">docker rmi nginx : latest</span><br><span class="line"></span><br><span class="line">#读取镜像打包文件</span><br><span class="line">docker load -i nginx.tar</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="docker容器命令"><a href="#docker容器命令" class="headerlink" title="docker容器命令"></a>docker容器命令</h3><ol>
<li>docker run：创建并启动一个新容器。</li>
</ol>
<p>例如，使用下面的命令可以启动一个基于nginx镜像的名为 mycontainer 的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mycontainer -p 80:80 -d nginx</span><br></pre></td></tr></table></figure>

<ul>
<li><p>docker run :创建并运行一个容器</p>
</li>
<li><p>–name:给容器起一个名字，比如叫做mn</p>
</li>
<li><p>-p∶将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口-d:后台运行容器</p>
</li>
<li><p>nginx:镜像名称，例如nginx</p>
</li>
</ul>
<ol start="2">
<li>docker start：启动已经存在的一个容器。</li>
</ol>
<p>例如，使用下面的命令可以启动名为 mycontainer 的容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start mycontainer</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>docker stop：停止正在运行的容器。</li>
</ol>
<p>例如，使用下面的命令可以停止名为 mycontainer 的容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop mycontainer</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>docker rm：删除指定的容器。</li>
</ol>
<p>例如，使用下面的命令可以删除名为 mycontainer 的容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm mycontainer</span><br></pre></td></tr></table></figure>



<ol start="5">
<li>docker ps：列出所有正在运行的容器。</li>
</ol>
<p>例如，使用下面的命令可以列出所有正在运行的容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>



<ol start="6">
<li>docker exec：在正在运行的容器中执行命令。</li>
</ol>
<p>例如，使用下面的命令可以在名为 mycontainer 的容器中运行一个 ls 命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec mycontainer bash</span><br></pre></td></tr></table></figure>

<h3 id="进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”"><a href="#进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”" class="headerlink" title="进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”"></a>进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”</h3><h4 id="步骤一︰进入容器。"><a href="#步骤一︰进入容器。" class="headerlink" title="步骤一︰进入容器。"></a>步骤一︰进入容器。</h4><p>进入我们刚刚创建的nginx容器的命令为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it mn bash</span><br></pre></td></tr></table></figure>

<p>命令解读:</p>
<ul>
<li>docker exec :进入容器内部，执行一个命令</li>
<li>-it :给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互mn:要进入的容器的名称</li>
<li>bash:进入容器后执行的命令，bash是一个linux终端交互命令</li>
</ul>
<h4 id="步骤二︰进入nginx的HTML所在目录"><a href="#步骤二︰进入nginx的HTML所在目录" class="headerlink" title="步骤二︰进入nginx的HTML所在目录"></a>步骤二︰进入nginx的HTML所在目录</h4><p>/usrlshare/nginx/ htmlcd /usr/share/nginx/html</p>
<h4 id="步骤三-修改index-html的内容"><a href="#步骤三-修改index-html的内容" class="headerlink" title="步骤三:修改index.html的内容"></a>步骤三:修改index.html的内容</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27; s#Welcome to nginx#传智教育欢迎您#g&#x27;index.html</span><br><span class="line">sed -i &#x27;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#x27; index.html</span><br></pre></td></tr></table></figure>

<h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><h4 id="数据卷基本操作"><a href="#数据卷基本操作" class="headerlink" title="数据卷基本操作"></a>数据卷基本操作</h4><p>创建数据卷并查看数据卷在本机的位置：</p>
<ol>
<li><p>创建数据卷<br>docker volume create html</p>
</li>
<li><p>查看所有数据<br>docker volume ls</p>
</li>
<li><p>查看数据卷详细信息卷</p>
<p>docker volume inspect html</p>
</li>
</ol>
<h4 id="数据卷挂载到容器"><a href="#数据卷挂载到容器" class="headerlink" title="数据卷挂载到容器"></a>数据卷挂载到容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mn -v html:/root/html -p 8080:80 nginx</span><br></pre></td></tr></table></figure>

<p>docker run :就是创建并运行容器</p>
<p>–name mn:给容器起个名字叫mn</p>
<p>-v html:/root/htm : 把html数据卷挂载到容器内的/root/html这个目录中</p>
<p>-p 8080:80:把宿主机的8080端口映射到容器内的80端口</p>
<p>nginx:镜像名称</p>
<h3 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h3><h4 id="了解镜像结构"><a href="#了解镜像结构" class="headerlink" title="了解镜像结构"></a>了解镜像结构</h4><p>镜像是分层结构，每一层称为一个Layer</p>
<ul>
<li>Baselmage层:包含基本的系统函数库、环境变量、文件系统（最底层）</li>
<li>Entrypoint:入口，是镜像中应用启动的命令</li>
<li>其它:在Baselmage基础上添加依赖、安装程序、完成整个应用的安装和配置</li>
</ul>
<h4 id="自定义镜像-1"><a href="#自定义镜像-1" class="headerlink" title="自定义镜像"></a>自定义镜像</h4><ol>
<li><p>配置文件如下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 指定基础镜像</span><br><span class="line">FROM ubuntu:16.04</span><br><span class="line"># 配置环境变量，JDK的安装目录</span><br><span class="line">ENV JAVA_DIR=/usr/local</span><br><span class="line"></span><br><span class="line"># 拷贝jdk和java项目的包</span><br><span class="line">COPY ./jdk8.tar.gz $JAVA_DIR/</span><br><span class="line">COPY ./docker-demo.jar /tmp/app.jar</span><br><span class="line"></span><br><span class="line"># 安装JDK</span><br><span class="line">RUN cd $JAVA_DIR \</span><br><span class="line"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span><br><span class="line"> &amp;&amp; mv ./jdk1.8.0_144 ./java8</span><br><span class="line"></span><br><span class="line"># 配置环境变量</span><br><span class="line">ENV JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line">ENV PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"># 暴露端口</span><br><span class="line">EXPOSE 8090</span><br><span class="line"># 入口，java项目的启动命令</span><br><span class="line">ENTRYPOINT java -jar /tmp/app.jar</span><br></pre></td></tr></table></figure></li>
<li><p>构建镜像</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t javaweb:1.0 .</span><br></pre></td></tr></table></figure>

<p>javaweb指的是镜像名称、1.0表示版本，后面的.表示构建镜像的步骤文件在本文件夹内</p>
<ol start="3">
<li>在镜像的基础上创建容器并运行</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name web -p 8090:8090 -d javaweb:1.0</span><br></pre></td></tr></table></figure>



<blockquote>
<p>鉴于每次部署java太麻烦，docker提供了一个名为java:8-alpine镜像，将一个java项目构建为镜像</p>
</blockquote>
<p>实现思路如下:</p>
<ol>
<li>新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile</li>
<li>拷贝课前资料提供的docker-demo.jar到这个目录中</li>
<li>编写Dockerfile文件:<ol>
<li>基于java:8-alpine作为基础镜像b)将app.jar拷贝到镜像中</li>
<li>暴露端口</li>
<li>编写入口ENTRYPOINT使用docker build命令构建镜像</li>
<li>使用docker run创建容器并运行</li>
</ol>
</li>
</ol>
<h3 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h3><h4 id="什么是DockerCompose"><a href="#什么是DockerCompose" class="headerlink" title="什么是DockerCompose"></a>什么是DockerCompose</h4><ul>
<li>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器!</li>
<li>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。</li>
</ul>
<h4 id="DockerCompose有什么作用"><a href="#DockerCompose有什么作用" class="headerlink" title="DockerCompose有什么作用"></a>DockerCompose有什么作用</h4><blockquote>
<p>可以帮助我们快速部署分布式应用，无需一个个微服务去构建镜像和部署</p>
</blockquote>
<p>案例：将之前写好的cloud-dome使用docker部署成微服务项目</p>
<p>使用步骤：</p>
<ol>
<li><p>将需要的包放入其中包括gateway、mysql、order-service、user-service、nacos镜像</p>
</li>
<li><p>编辑配置文件docker-compose</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MODE:</span> <span class="string">standalone</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8848:8848&quot;</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7.25</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;</span></span><br><span class="line">  <span class="attr">userservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./user-service</span></span><br><span class="line">  <span class="attr">orderservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./order-service</span></span><br><span class="line">  <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./gateway</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;10010:10010&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改项目，将数据库、nacos地址都命名为docker-compose中的服务名</p>
</li>
</ol>
<p>例如nacos:server-addr:local:80更改成nacos：server-addr:nacos:8848</p>
<p>mysql同理</p>
<ol start="4">
<li><p>使用maven打包工具，将项目中的每一个微服务都打包成app.jar</p>
</li>
<li><p>将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中</p>
</li>
<li><p>将cloud-dome上传到虚拟机，利用dock-compose up -d来部署</p>
</li>
</ol>
<h2 id="同步通信和异步通信"><a href="#同步通信和异步通信" class="headerlink" title="同步通信和异步通信"></a>同步通信和异步通信</h2><p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230531112842838.png" alt="image-20230531112842838" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>同步通信就像打电话一样，需要立即的响应和回应，而且在两个通信方之间只能进行单向或双向通信。如果有其他消息发送，就必须等待当前的通信完成后才能处理下一个请求。因此，同步通信会占用较多的资源，并且不太适合大量数据传输或高并发处理。</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230531113346100.png" alt="image-20230531113346100" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>而异步通信更像是发短信一样，我把消息发送出去，就会立即显示发送成功。但是具体啥时候接收到响应就不管了。就像上面的例子用户支付完之后通知支付服务，支付服务会直接把支付成功发送给用户而不是等所有流程走完在发送。大大减少了传输时间。</p>
<h2 id="RabbitMQ消息队列"><a href="#RabbitMQ消息队列" class="headerlink" title="RabbitMQ消息队列"></a>RabbitMQ消息队列</h2><h3 id="单机部署和集群部署"><a href="#单机部署和集群部署" class="headerlink" title="单机部署和集群部署"></a>单机部署和集群部署</h3><p>单机部署：</p>
<ol>
<li><p>在线拉取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure></li>
<li><p>拉取后运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker load -i mq.tar</span><br></pre></td></tr></table></figure></li>
<li><p>运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -e RABBITMQ_DEFAULT_USER=root \</span><br><span class="line">  -e RABBITMQ_DEFAULT_PASS=510609 \</span><br><span class="line">  --name mq \</span><br><span class="line">  --hostname mq1 \</span><br><span class="line">  -p 15672:15672 \</span><br><span class="line">  -p 5672:5672 \</span><br><span class="line">  -d \</span><br><span class="line">  rabbitmq:3-management</span><br></pre></td></tr></table></figure></li>
<li><p>打开浏览器，地址栏搜索</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.136.131:15672/</span><br></pre></td></tr></table></figure></li>
<li><p>输入自己设置的用户名和密码</p>
</li>
<li><p>RabbitMQ中的几个概念:.</p>
<p>channel:操作MQ的工具.</p>
<p>exchange:路由消息到队列中· </p>
<p>queue:缓存消息</p>
<p>virtual host:虚拟主机，是对queue、exchange等<br>资源的逻辑分组</p>
</li>
<li><p>快速入门</p>
<p>基本消息队列的消息发送流程:<br>1．建立connection<br>2．创建channel<br>3．利用channel声明队列<br>4．利用channel向队列发送消息</p>
<p>基本消息队列的消息接收流程:<br>1．建立connection<br>2．创建channel<br>3．利用channel声明队列<br>4．定义consumer的消费行为handleDelivery()5．利用channel将消费者与队列绑定</p>
</li>
</ol>
<h2 id="SpringAMQP"><a href="#SpringAMQP" class="headerlink" title="SpringAMQP"></a>SpringAMQP</h2><h3 id="什么是AMQP"><a href="#什么是AMQP" class="headerlink" title="什么是AMQP"></a>什么是AMQP</h3><p>AMQP是用于在应用程序或之间传递业务消息的开放标准该协议与语言和平台无关，更符合微服务中独立性的要求</p>
<p>Spring AMQP是基于AMQP协议定义的一套API规范，提供了模板来发送和接收消息。包含两部分，其中spring-amqp是基础抽象，spring-rabbit是底层的默认实现。</p>
<h3 id="消息的发送和接收（入门）"><a href="#消息的发送和接收（入门）" class="headerlink" title="消息的发送和接收（入门）"></a>消息的发送和接收（入门）</h3><p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/webp" alt="img" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230531143841728.png" alt="image-20230531143841728" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>消息发送：</p>
<ol>
<li><p>配置rabbitAMOP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: 192.168.136.131</span><br><span class="line">    port: 5672</span><br><span class="line">    username: root</span><br><span class="line">    password: 510609</span><br><span class="line">    virtual-host: /</span><br></pre></td></tr></table></figure></li>
<li><p>新建测试类</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230531144907807.png" alt="image-20230531144907807" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>编写发送</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage2SimpleQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        String queueName=<span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        String message=<span class="string">&quot;hello,spring amqp!&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(queueName,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>消息接收：</p>
<ol>
<li><p>配置rabbitAMOP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: 192.168.136.131</span><br><span class="line">    port: 5672</span><br><span class="line">    username: root</span><br><span class="line">    password: 510609</span><br><span class="line">    virtual-host: /</span><br></pre></td></tr></table></figure></li>
<li><p>新建类</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230531150742841.png" alt="image-20230531150742841" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>类中编写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class SpringRabbitListener &#123;</span><br><span class="line">    @RabbitListener(queues = &quot;simple.queue&quot;)</span><br><span class="line">    public void listenSimpleQueue(String msg)&#123;</span><br><span class="line">        System.out.println(&quot;消费者接收到的simple.queue:【&quot;+msg+&quot;】&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>控制台返回：<em>消费者接收到的simple.queue:【hello,spring amqp!】</em></p>
<h3 id="work-Queue工作队列"><a href="#work-Queue工作队列" class="headerlink" title="work Queue工作队列"></a>work Queue工作队列</h3><p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/webp2" alt="img" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>Work Queue，工作队列，可以提高消息处理速度，避免队列消息堆积</p>
<blockquote>
<p>publisher在发送消息之后会将消息存放在queue中等待connection处理</p>
<p>默认轮询模式下，Work Queue会将生产者生产的消息一次性平均分配给consumer1和consumer2，当分配完消息后，它的自动确认机制会一次性全部确认。而不在乎自己能不能处理，届时就会出现消息堆积问题</p>
<p>而最好的方法就是在配置文件中添加消费策略</p>
</blockquote>
<p>例子：</p>
<ol>
<li><p>测试：发送消息50次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage2WorkQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    String queueName=<span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">    String message=<span class="string">&quot;hello,message_ _&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">50</span> ; i++) &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(queueName,message+i);</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>添加两个消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者1 接收到的simple.queue:【&quot;</span>+msg+<span class="string">&quot;】&quot;</span>+ LocalTime.now());</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者2.....接收到的simple.queue:【&quot;</span>+msg+<span class="string">&quot;】&quot;</span>+LocalTime.now());</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>解决消费策略问题</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.136</span><span class="number">.131</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">510609</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line"><span class="comment">#表示每次只处理一条消息</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="发布和订阅"><a href="#发布和订阅" class="headerlink" title="发布和订阅"></a>发布和订阅</h3><p>发布订阅模式与之前案例的区别就是允许将同一消息发送给多个消费者。实现方式是加入了exchange(交换机)</p>
<p>常见exchange类型包括:</p>
<ul>
<li>Fanout:广播</li>
<li>Direct:路由</li>
<li>Topic:话题</li>
</ul>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/webp3" alt="img" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>注意:exchange负责消息路由，而不是存储，路由失败则消息丢失</p>
<h3 id="FanoutExchange"><a href="#FanoutExchange" class="headerlink" title="FanoutExchange"></a>FanoutExchange</h3><p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230531165438796.png" alt="image-20230531165438796" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><strong>所谓FanoutExchange就是把消息传递给交换机，而交换机会将消息分别发送给消息队列1和消息队列2</strong></p>
<p>实现思路如下:</p>
<ol>
<li><p>在consumer服务中，利用代码声明队列、交换机，并将两者绑定</p>
</li>
<li><p>在consumer服务中，编写两个消费者方法，分别监听fanout.queue1和fanout.queue2</p>
</li>
<li><p>在publisher中编写测试方法，向itcast.fanout发送消息</p>
</li>
<li><p>编写FanoutConfig：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line">    <span class="comment">//itcast.fanout交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;itcast.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//fanout.queue1队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//fanout.queue2队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定队列交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding1</span><span class="params">(Queue fanoutQueue1,FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(fanoutQueue1)</span><br><span class="line">                .to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>编写两个消费者方法，分别监听fanout.queue1和fanout.queue2</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到fanout.queue1的消息是:【&quot;</span>+msg+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到fanout.queue2的消息是:【&quot;</span>+msg+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>在publisher中编写测试方法，向itcast.fanout交换机发送消息</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendFanoutExchange</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    String exchangeName=<span class="string">&quot;itcast.fanout&quot;</span>;</span><br><span class="line">    String message=<span class="string">&quot;hello,every one！&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;&quot;</span>,message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到输出：</p>
<p>消费者接收到fanout.queue2的消息是:【hello,every one！】</p>
<p>消费者接收到fanout.queue1的消息是:【hello,every one！】</p>
<h3 id="DirectExchange"><a href="#DirectExchange" class="headerlink" title="DirectExchange"></a>DirectExchange</h3><p>DirectExchange交换机是指提供者在发送消息时携带着一个key，就像暗号一样。而队列中会定义一个key，当发送的消息经过交换机时，交换机会核对到底是哪个消息队列和key匹配。如果几个消息队列中都存在这个key就都可以得到消息。</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230531173600033.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>实现思路如下:</p>
<ol>
<li><p>在consumer服务中，编写两个消费者方法，利用@RabbitListener声明Exchange、Queue、RoutingKey</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name=&quot;direct.queue1&quot;) ,</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;itcast.direct&quot;,type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">            key = &#123; &quot;red&quot;,&quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到direct.queue1的消息:【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name=&quot;direct.queue2&quot;) ,</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;itcast.direct&quot;,type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">            key = &#123; &quot;red&quot;,&quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到direct.queue2的消息:【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="2">
<li><p>在publisher中编写测试方法，向itcast. direct发送消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">( )</span>&#123;</span><br><span class="line">    <span class="comment">//交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.direct&quot;</span>;</span><br><span class="line">    <span class="comment">//消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, blue ! &quot;</span>;</span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;blue&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="TopicExchange"><a href="#TopicExchange" class="headerlink" title="TopicExchange"></a>TopicExchange</h3><p>TopicExchange与DirectExchange类似，区别在于routingKey必须是多个单词的列表，并且以.分割。</p>
<p>Queue与Exchange指定BindingKey时可以使用通配符:</p>
<ul>
<li>#:代指0个或多个单词</li>
<li>*:代指一个单词</li>
</ul>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20230531180547012.png" alt="image-20230531180547012" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>实现思路如下:</p>
<ol>
<li><p>在consumer服务中，编写两个消费者方法，分别监听topic.queue1和topic.queue2并利用@RabbitListener声明Exchange、Queue、RoutingKey</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding (</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;itcast.topic&quot;,</span></span><br><span class="line"><span class="meta">            type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicqueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到topic.queue1的消息:【&quot;</span> + msg + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding (</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicqueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到topic.queue1的消息:【&quot;</span> + msg + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在publisher中编写测试方法，向itcast.topic发送消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//交换机名称</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.topic&quot;</span>;</span><br><span class="line">	<span class="comment">//消息</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span><span class="string">&quot;传智教育在深交所上市了!是教育行业IPO第一股!&quot;</span>;</span><br><span class="line">	<span class="comment">//发送消息</span></span><br><span class="line">	rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;china.news&quot;</span>,message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="消息转换器"><a href="#消息转换器" class="headerlink" title="消息转换器"></a>消息转换器</h3><p>Spring对消息对象的处理是由org.springframework.amqp.support.converter.MessageConverter来处理的。而默认实现是SimpleMessageConverter，基于JDK的ObjectOutputStream完成序列化。</p>
<ul>
<li><p>如果要修改只需要定义一个MessageConverter 类型的Bean即可。推荐用JSON方式序列化，步骤如下：</p>
</li>
<li><p>发送消息：</p>
</li>
</ul>
<ol>
<li>我们在父工程引入依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>我们在publisher启动类中声明MessageConverter：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>接收消息：</li>
</ul>
<ol>
<li>我们在consumer启动类中定义MessageConverter：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>然后定义一个消费者，监听object.queue队列并消费消息：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;object.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenObjectQueue</span><span class="params">(Map&lt;String, Object&gt; msg)</span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;消费者接收到了object.queue：&quot;</span> + msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务高级篇</title>
    <url>/2023/10/10/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%AB%98%E7%BA%A7%E7%AF%87/</url>
    <content><![CDATA[<h1 id="微服务高级篇"><a href="#微服务高级篇" class="headerlink" title="微服务高级篇"></a>微服务高级篇</h1><h2 id="微服务保护"><a href="#微服务保护" class="headerlink" title="微服务保护"></a>微服务保护</h2><h3 id="初识Sentinel"><a href="#初识Sentinel" class="headerlink" title="初识Sentinel"></a>初识Sentinel</h3><h4 id="雪崩问题"><a href="#雪崩问题" class="headerlink" title="雪崩问题"></a>雪崩问题</h4><p>微服务调用链路中的某个服务出现故障，导致前一个服务请求越积越多，从而引起整个链路中的所有微服务都不可用，这就是雪崩</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%AB%98%E7%BA%A7%E7%AF%87/image-20230614095256216.png" alt="image-20230614095256216" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>解决方法：</p>
<ol>
<li><p>超时处理：设定超时时间，当请求超过一定时间没有响应就是返回错误信息，不会无休止等待</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%AB%98%E7%BA%A7%E7%AF%87/image-20230614120944069.png" alt="image-20230614120944069" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>如图，当请求时间超过一秒钟没有响应时就会直接返回错误信息，但是当数据量上去之后我们哪怕给1秒等待时间，但是进来的请求越来越多却还是1秒释放一个线程，久而久之就会导致瘫痪</p>
</li>
<li><p>舱壁模式：限定每一个业务能使用的线程数，避免耗尽整个tomcat的资源，因此也叫线程隔离。每个服务所使用的线程都是固定的，所以一个业务消耗只能消耗这几个线程，不会出现线程饱满的状况</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%AB%98%E7%BA%A7%E7%AF%87/image-20230614122251824.png" alt="image-20230614122251824" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>熔断降级：由断路器统计业务执行的异常比例，如果超出阈值则会熔断该业务，拦截访问该业务的一切请求。</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%AB%98%E7%BA%A7%E7%AF%87/image-20230614122453491.png" alt="image-20230614122453491" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>当从服务A访问服务D的业务中，传输错误的比例大于我们设定的比例，服务A就会马上熔断通往服务D的业务。完美解决了资源浪费的情况</p>
</li>
<li><p>限流控制：限制业务访问的QPS，避免服务因流量的突增而故障。</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%AB%98%E7%BA%A7%E7%AF%87/image-20230614122853374.png" alt="image-20230614122853374" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>通过使用Sentinel将大量涌入的请求缩减到受保护的服务可以承受的范围内，就可以避免因为流量突增而导致的故障</p>
</li>
</ol>
<h3 id="微服务整合Sentinel"><a href="#微服务整合Sentinel" class="headerlink" title="微服务整合Sentinel"></a>微服务整合Sentinel</h3><p>在order-service中整合Sentinel,并且连接Sentinel的控制台，步骤如下</p>
<ol>
<li><p>引入sentinel依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置控制台地址</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br></pre></td></tr></table></figure></li>
<li><p>访问微服务的任意端点，触发sentinel的监控</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%AB%98%E7%BA%A7%E7%AF%87/image-20230614142630512.png" alt="image-20230614142630512" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ol>
<h4 id="限流规则"><a href="#限流规则" class="headerlink" title="限流规则"></a>限流规则</h4><p>簇点链路:就是项目内的调用链路，链路中被监控的每个接口就是一个资源。默认情况下sentinel会监控SpringMVC的每一个端点（Endpoint)，因此SpringMVC的每一个端点（Endpoint)就是调用链路中的一个资源。<br>流控、熔断等都是针对簇点链路中的资源来设置的，因此我们可以点击对应资源后面的按钮来设置规则:</p>
<ul>
<li><p>直接：统计当前资源的请求，触发阈值时对当前资源直接限流，也是默认的模式</p>
</li>
<li><p>关联：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</p>
<p>使用场景︰比如用户支付时需要修改订单状态，同时用户要查询订单。查询和修改操作会争抢数据库锁，产生竞争。业务需求是有限支付和更新订单的业务，因此当修改订单业务触发阈值时，需要对查询订单业务限流。</p>
<p>满足下面条件可以使用关联模式:</p>
<ul>
<li>两个有竞争关系的资源</li>
<li>一个优先级较高，一个优先级较低</li>
</ul>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%AB%98%E7%BA%A7%E7%AF%87/image-20230614160303312.png" alt="image-20230614160303312" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>当/white资源访问量触发阙值时，就会对/read资源限流，避免影响/white资源</p>
</li>
<li><p>链路：统计从指定链路访问到本资源的请求，触发阈值时，对指定链路限流</p>
</li>
</ul>
<img src="/img/微服务高级篇/image-20230614155150402.png" alt="image-20230614155150402" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<h4 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h4><ol>
<li><p>Warm Up慢热</p>
<p>warm up也叫预热模式，是应对服务冷启动的一种方案。请求阈值初始值是threshold / coldFactor，持续指定时长后，逐渐提高到threshold值。而caldFactor的默认值是3<br>例如，我设置QPs的threshold为10，预热时间为5秒，那么初始阈值就是10/3，也就是3，然后在5秒后逐渐增长到10.</p>
</li>
<li><p>排队等待</p>
<p>当请求超过QPs阈值时，快速失败和warm up会拒绝新的请求并抛出异常。而排队等待则是让所有请求进入一个队列中,然后按照阈值允许的时间间隔依次执行。后来的请求必须等待前面执行完成，如果请求预期的等待时间超出最大时长，则会被拒绝。<br>例如:QPS=5，意味着每200ms处理一个队列中的请求;timeout =2000，意味着预期等待超过2000ms的请求会被拒绝并抛出异常</p>
</li>
</ol>
<h4 id="Feign整合Sentinel"><a href="#Feign整合Sentinel" class="headerlink" title="Feign整合Sentinel"></a>Feign整合Sentinel</h4><p>SpringCloud中微服务调用都是通过Fegin来实现的，因此做客户端保护必须整合Feign和Sentinel。</p>
<ol>
<li><p>修改OrderService的application.yml文件，开启Feign的Sentinel功能</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fegin:</span></span><br><span class="line">	<span class="attr">sentinel:</span></span><br><span class="line">		<span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>给FeginClient编写失败后的降级逻辑</p>
<ul>
<li><p>方法一：FallbackClass，无法对远程调用的异常做处理</p>
</li>
<li><p>方法二：FallbackFactory，可以对远程调用的异常做处理</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%AB%98%E7%BA%A7%E7%AF%87/image-20230614174448901.png" alt="image-20230614174448901" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserClientFallbackFactory</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;UserClient&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserClient <span class="title function_">create</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">        <span class="comment">//创建UserClient接口实现类，实现其中的方法，编写失败降级的处理逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserClient</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">                <span class="comment">//记录异常信息</span></span><br><span class="line">                log.error(<span class="string">&quot;查询用户异常&quot;</span>,throwable);</span><br><span class="line">                <span class="comment">//根据业务需求返回默认的数据，这里是空用户</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在feing-api项目中的DefaultFeignConfiguration类中将userClientFallbackFactory注册为一个Bean:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> UserClientFallbackFactory <span class="title function_">userClientFallbackFactory</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserClientFallbackFactory</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在feing-api项目中的Userclient接口中使用UserClientFallbackFactory:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;,fallbackFactory = UserClientFallbackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="线程隔离"><a href="#线程隔离" class="headerlink" title="线程隔离"></a>线程隔离</h4><p>线程隔离有两种方式实现:</p>
<ul>
<li><p>线程池隔离</p>
<p>规定好线程，每一次只能涌进固定数量的业务从而达到线程隔离</p>
</li>
<li><p>信号量隔离( Sentinel默认采用)</p>
<p>在请求和服务中间添加一层计数器，设置好固定的数量，每一个请求进来计数器就-1。当计数器归零时则不会再进请求。当然当请求完成后便会归还给计数器。从而达到线程隔离作用</p>
<img src="/img/微服务高级篇/image-20230614181731342.png" alt="image-20230614181731342" style="zoom: 50%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/></li>
</ul>
<img src="/img/微服务高级篇/image-20230614182412357.png" alt="image-20230614182412357" style="zoom:50%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<h4 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h4><p>熔断降级是解决雪崩问题的重要手段。其思路是由断路器统计服务调用的异常比例、慢请求比例，如果超出阈值则会熔断该服务。即拦截访问该服务的一切请求;而当服务恢复时，断路器会放行访问该服务的请求。</p>
<p><img src="/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%AB%98%E7%BA%A7%E7%AF%87/image-20230614182836660.png" alt="image-20230614182836660" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>断路器熔断策略有三种：慢调用、异常比例、异常数</p>
<ol>
<li><p>慢调用:业务的响应时长（RT)大于指定时长的请求认定为慢调用请求。在指定时间内，如果请求数量超过设定的最小数量，慢调用比例大于设定的阈值，则触发熔断。例如:</p>
<img src="/img/微服务高级篇/image-20230614183635010.png" alt="image-20230614183635010" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/></li>
</ol>
<p>解读:RT超过500ms的调用是慢调用，统计最近10000ms内的请求，如果请求量超过10次并且慢调用比例不低于0.5，则触发熔断，熔断时长为5秒。然后进入half-open状态，放行一次请求做测试。</p>
<hr>

<ol start="2">
<li><p>异常比例或异常数∶统计指定时间内的调用，如果调用次数超过指定请求数，并且出现异常的比例达到设定的比例阈值（或超过指定异常数），则触发熔断。例如:</p>
<p><img src="/img/微服务高级篇/image-20230614184330031.png" alt="image-20230614184330031" style="zoom: 50%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/><img src="/img/微服务高级篇/image-20230614184437025.png" alt="image-20230614184437025" style="zoom: 50%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/></p>
</li>
</ol>
<p>解读：统计最近1000ms内的请求，如果请求量超过10次，并且异常比例不低于0.5，则触发熔断，熔断时长为5秒。然后进入half-open状态，放行一次请求做测试。</p>
<h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><p>在分布式系统下，一个业务跨越多个服务或数据源，每个服务都是一个分支事务，要保证所有分支事务最终状态一致，这样的事务就是分布式事务。</p>
<h4 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h4><ul>
<li>Consistency（一致性）：用户访问分布式系统中的任意节点，得到的数据必须一致</li>
<li>Availability(可用性)∶用户访问集群中的任意健康节点，必须能得到响应，而不是超时或拒绝</li>
<li>Partition(分区)∶因为网络故障或其它原因导致分布式系统中的部分节点与其它节点失去连接，形成独立分区。</li>
</ul>
<h4 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h4><p>BASE理论是对CAP的一种解决思路，包含三个思想：</p>
<ul>
<li>Basically Available(基本可用)︰分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li>
<li>Soft State(软状态)∶在一定时间内，允许出现中间状态，比如临时的不、致状态。</li>
<li>Eventually Consistent(最终一致性)∶虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致</li>
</ul>
<h4 id="Seata架构"><a href="#Seata架构" class="headerlink" title="Seata架构"></a>Seata架构</h4><p>Seata事务管理中有三个重要的角色:</p>
<ul>
<li>TC(Transaction Coordinator)-事务协调者︰维护全局和分支事务的状态，协调全局事务提交或回滚。</li>
<li>TM(Transaction Manager)-事务管理器：定义全局事务的范围、开始全局事务、提交或回滚全局事务。</li>
<li>RM(Resource Manager)-资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li>
</ul>
<h4 id="微服务集成Seata"><a href="#微服务集成Seata" class="headerlink" title="微服务集成Seata"></a>微服务集成Seata</h4><ol>
<li><p>修改conf目录下的registry.conf文件：</p>
<p>内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">registry</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # tc服务的注册中心类，这里选择nacos，也可以是eureka、zookeeper等</span></span><br><span class="line">  <span class="attr">type</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nacos</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">    # seata tc 服务注册到 nacos的服务名称，可以自定义</span></span><br><span class="line">    <span class="attr">application</span> = <span class="string">&quot;seata-tc-server&quot;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:8848&quot;</span></span><br><span class="line">    <span class="attr">group</span> = <span class="string">&quot;DEFAULT_GROUP&quot;</span></span><br><span class="line">    <span class="attr">namespace</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;SH&quot;</span></span><br><span class="line">    <span class="attr">username</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">    <span class="attr">password</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">config</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # 读取tc服务端的配置文件的方式，这里是从nacos配置中心读取，这样如果tc是集群，可以共享配置</span></span><br><span class="line">  <span class="attr">type</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line"><span class="comment">  # 配置nacos地址等信息</span></span><br><span class="line">  <span class="attr">nacos</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:8848&quot;</span></span><br><span class="line">    <span class="attr">namespace</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">group</span> = <span class="string">&quot;SEATA_GROUP&quot;</span></span><br><span class="line">    <span class="attr">username</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">    <span class="attr">password</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">    <span class="attr">dataId</span> = <span class="string">&quot;seataServer.properties&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在nacos添加配置</p>
<p>特别注意，为了让tc服务的集群可以共享配置，我们选择了nacos作为统一配置中心。因此服务端配置文件seataServer.properties文件需要在nacos中配好。</p>
<p>配置内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据存储方式，db代表数据库</span></span><br><span class="line"><span class="attr">store.mode</span>=<span class="string">db</span></span><br><span class="line"><span class="attr">store.db.datasource</span>=<span class="string">druid</span></span><br><span class="line"><span class="attr">store.db.dbType</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">store.db.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">store.db.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/seata?useUnicode=true&amp;rewriteBatchedStatements=true</span></span><br><span class="line"><span class="attr">store.db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">store.db.password</span>=<span class="string">123</span></span><br><span class="line"><span class="attr">store.db.minConn</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">store.db.maxConn</span>=<span class="string">30</span></span><br><span class="line"><span class="attr">store.db.globalTable</span>=<span class="string">global_table</span></span><br><span class="line"><span class="attr">store.db.branchTable</span>=<span class="string">branch_table</span></span><br><span class="line"><span class="attr">store.db.queryLimit</span>=<span class="string">100</span></span><br><span class="line"><span class="attr">store.db.lockTable</span>=<span class="string">lock_table</span></span><br><span class="line"><span class="attr">store.db.maxWait</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"># 事务、日志等配置</span></span><br><span class="line"><span class="attr">server.recovery.committingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.asynCommittingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.rollbackingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.timeoutRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.maxCommitRetryTimeout</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">server.maxRollbackRetryTimeout</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">server.rollbackRetryTimeoutUnlockEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">server.undo.logSaveDays</span>=<span class="string">7</span></span><br><span class="line"><span class="attr">server.undo.logDeletePeriod</span>=<span class="string">86400000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 客户端与服务端传输方式</span></span><br><span class="line"><span class="attr">transport.serialization</span>=<span class="string">seata</span></span><br><span class="line"><span class="attr">transport.compressor</span>=<span class="string">none</span></span><br><span class="line"><span class="comment"># 关闭metrics功能，提高性能</span></span><br><span class="line"><span class="attr">metrics.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">metrics.registryType</span>=<span class="string">compact</span></span><br><span class="line"><span class="attr">metrics.exporterList</span>=<span class="string">prometheus</span></span><br><span class="line"><span class="attr">metrics.exporterPrometheusPort</span>=<span class="string">9898</span></span><br></pre></td></tr></table></figure>



<p>其中的数据库地址、用户名、密码都需要修改成你自己的数据库信息。</p>
</li>
<li><p>启动TC服务</p>
<p>进入bin目录，运行其中的seata-server.bat即可：</p>
<p>启动成功后，seata-server应该已经注册到nacos注册中心了。</p>
<p>打开浏览器，访问nacos地址：<a href="http://localhost:8848，然后进入服务列表页面，可以看到seata-tc-server的信息：">http://localhost:8848，然后进入服务列表页面，可以看到seata-tc-server的信息：</a></p>
</li>
<li><p>微服务集成seata</p>
<p>引入依赖</p>
<p>首先，我们需要在微服务中引入seata依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--版本较低，1.3.0，因此排除--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--seata starter 采用1.4.2版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;seata.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<p>需要修改application.yml文件，添加一些配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">registry:</span> <span class="comment"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span></span><br><span class="line">    <span class="comment"># 参考tc服务自己的registry.conf中的配置</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span> <span class="comment"># tc</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-tc-server</span> <span class="comment"># tc服务在nacos中的服务名称</span></span><br><span class="line">      <span class="attr">cluster:</span> <span class="string">SH</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">seata-demo</span> <span class="comment"># 事务组，根据这个获取tc服务的cluster名称</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span> <span class="comment"># 事务组与TC服务cluster的映射关系</span></span><br><span class="line">      <span class="attr">seata-demo:</span> <span class="string">SH</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
