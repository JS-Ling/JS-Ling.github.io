<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java从入门到转行</title>
    <url>/2023/02/27/Java%20SE/</url>
    <content><![CDATA[<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image002.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="Java入门"><a href="#Java入门" class="headerlink" title="Java入门"></a>Java入门</h2><h3 id="Java概述"><a href="#Java概述" class="headerlink" title="Java概述"></a>Java概述</h3><blockquote>
<p>Java是由sun公司在1996年正式发布的高级编程语言。JAVA语言的诞生解决了网络程序的安全、健壮、平台无关、可移植等很多难题。</p>
</blockquote>
<h3 id="Java技术平台简介"><a href="#Java技术平台简介" class="headerlink" title="Java技术平台简介"></a>Java技术平台简介</h3><blockquote>
<p>Java SE：标准版</p>
</blockquote>
<ol>
<li><p> Java技术的基础和核心</p>
</li>
<li><p> 主要用于开发桌面应用程序</p>
</li>
</ol>
<blockquote>
<p>Java EE：企业版</p>
</blockquote>
<ol>
<li><p> 提供了企业级的应用开发的完整解决方案</p>
</li>
<li><p> 很多的网站都是采用Java EE技术开发</p>
</li>
</ol>
<h3 id="Java环境搭建"><a href="#Java环境搭建" class="headerlink" title="Java环境搭建"></a>Java环境搭建</h3><blockquote>
<p>详情见：<a href="https://www.runoob.com/java/java-environment-setup.html">Java 开发环境配置 | 菜鸟教程 (runoob.com)</a></p>
</blockquote>
<h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">aba</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123; </span><br><span class="line"></span><br><span class="line">		<span class="comment">//main()方法是java程序的入口点</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h3><blockquote>
<p>\n 将光标移动到下一行的第一格</p>
<p>\t 将光标移到下一个水平制表位置（加制表符）</p>
</blockquote>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><blockquote>
<p>单行注释以//开始</p>
<p>多行注释以/* */框起来</p>
</blockquote>
<h3 id="Java编码规范"><a href="#Java编码规范" class="headerlink" title="Java编码规范"></a>Java编码规范</h3><ol>
<li><p> 类名使用public修饰</p>
</li>
<li><p> 一行只写一句语句</p>
</li>
<li><p> 每一条Java语句必须以分号结束</p>
</li>
<li><p> { }的使用及位置</p>
</li>
<li><p> 代码缩进</p>
</li>
</ol>
<h3 id="Java输入输出"><a href="#Java输入输出" class="headerlink" title="Java输入输出"></a>Java输入输出</h3><ol>
<li> 输入</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">aaa</span> <span class="operator">=</span>input.next(); 获取键盘输入的值</span><br><span class="line"></span><br><span class="line">						 .nextInt(); 用于获取整形数</span><br><span class="line"></span><br><span class="line">                         .nextDouble() 用于获取小数</span><br><span class="line"></span><br><span class="line">                         .nextChar() 用于获取字符</span><br><span class="line"></span><br><span class="line">                         .nextBoolean() 用于获取布朗值</span><br><span class="line"></span><br><span class="line">.nextLine() 获取键盘输入的值</span><br><span class="line"></span><br><span class="line">next（）和nextLine（）的区别</span><br></pre></td></tr></table></figure>

<p>next（）：</p>
<ol>
<li><p> 一定要读取到有效字符后才能结束输入</p>
</li>
<li><p> 对输入有效字符之前遇到的空白，next（）方法会自动将其去掉</p>
</li>
<li><p> 只有输入有效字符后才能将其后面输入的空白作为分隔符或者结束符</p>
</li>
<li><p> next（）不能得到带有空格的字符串</p>
</li>
</ol>
<p>nextLine（）：</p>
<ol>
<li><p> 以enter为结束符，也就是说nextLine（）方法返回的是输入回车之前 的所有字符</p>
</li>
<li><p> 可以获得空白</p>
</li>
</ol>
<p>&nbsp;</p>
<ol>
<li> 输出</li>
</ol>
<blockquote>
<p>System.out.print(“ “)</p>
</blockquote>
<h2 id="数据类型和运算符"><a href="#数据类型和运算符" class="headerlink" title="数据类型和运算符"></a>数据类型和运算符</h2><h3 id="常用的数据类型"><a href="#常用的数据类型" class="headerlink" title="常用的数据类型"></a>常用的数据类型</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>byte（）</td>
<td>是8位、有符号的，以二进制补码表示的整数</td>
<td>0</td>
</tr>
<tr>
<td>char（字符型）</td>
<td>用于存储单个字符</td>
<td>‘u0000’</td>
</tr>
<tr>
<td>int（整型）</td>
<td>用于存储整数二进制以00开头，八进制以0开头，十六进制以0x开头</td>
<td>0</td>
</tr>
<tr>
<td>double（双精度）</td>
<td>用于存储小数</td>
<td>0.0d</td>
</tr>
<tr>
<td>String（字符串）</td>
<td>用于存储一串字符</td>
<td>null</td>
</tr>
<tr>
<td>long（）</td>
<td>存储int盛不下的整数</td>
<td>0L</td>
</tr>
<tr>
<td>Short（短整型）</td>
<td>整形的一种</td>
<td>0</td>
</tr>
<tr>
<td>boolean（布尔值）</td>
<td>判别真假，数据类型表示一位的信息</td>
<td>false</td>
</tr>
</tbody></table>
<p>自动类型转换规则：</p>
<p>规则一：如果一个操作数为double型，则整个表达式可提升为double型</p>
<p>规则二：两个类型要兼容，数值类型（整型和浮点型）相互兼容</p>
<p>目标类型大于源类型，例如double型&gt;float型 &gt;long型&gt;int型&gt;byte、short、char</p>
<p>强制类型转换：</p>
<p>例如：double a=10.24</p>
<p>Int b=(int)a</p>
<p>注：1.byte、short、char这三种类型都可以发生数学运算（char中的字母会默认变成ascll码处理）</p>
<p>2.小的单位在运算的时候都会被首先提升成为大类型然后在计算</p>
<p><strong>数据类型除了八种基本数据类型还会有三种引用类型</strong></p>
<p>类（class）， 接口（interface），数组（array），(枚举类型、注解类型、字符串(String)类型) </p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ol>
<li><p> 赋值运算符：=、+=、-=、*=、/=、%=</p>
</li>
<li><p> 算术运算符：+、-、*、/、%、num1++等价于num1=num1+1、–同上</p>
</li>
<li><p> 关系运算符：&gt;、&lt;、==、!=、&gt;=、&lt;=</p>
</li>
<li><p> 逻辑运算符：&amp;&amp;与、||或、!非</p>
</li>
</ol>
<blockquote>
<p>运算符的优先级：小括号&gt;算术运算符&gt;关系运算符&gt;逻辑运算符&gt;赋值运算符</p>
</blockquote>
<ol>
<li> 位运算符：</li>
</ol>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>如果相对应的位数都是1，则返回1，否则返回0</td>
</tr>
<tr>
<td>|</td>
<td>如果相对应的位数都是0，则返回0，否则返回1</td>
</tr>
<tr>
<td>^</td>
<td>如果对应位置的位数相同则返回0，如果不同则返回1</td>
</tr>
<tr>
<td>~</td>
<td>按位取反，-1在取反</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移，左移一位相当于*2</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移，右移一位相当于除以2取商</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>右移指定位数前面补零</td>
</tr>
</tbody></table>
<ol>
<li> instanceof运算符</li>
</ol>
<blockquote>
<p>使用格式：</p>
<p>String name = “James”;</p>
<p>boolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真</p>
</blockquote>
<ol>
<li> 条件运算符</li>
</ol>
<blockquote>
<p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p>
<p>例如：</p>
<p>int a=10;</p>
<p>int b;</p>
<p>b=(a&lt;5) ? 6:9;</p>
<p>System.<em>out</em>.println(b); //b=9</p>
</blockquote>
<h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><h3 id="if选择结构"><a href="#if选择结构" class="headerlink" title="if选择结构"></a>if选择结构</h3><blockquote>
<p>if（条件）{</p>
<p>​    //如果满足条件返回的代码块</p>
<p>}else{</p>
<p>​    //如果不满足条件返回的代码块</p>
<p>}</p>
</blockquote>
<h3 id="多重if选择结构"><a href="#多重if选择结构" class="headerlink" title="多重if选择结构"></a>多重if选择结构</h3><blockquote>
<p>if（条件1）{</p>
<p>}else if（条件2）{</p>
<p>}else{</p>
<p>}</p>
</blockquote>
<h3 id="switch选择结构"><a href="#switch选择结构" class="headerlink" title="switch选择结构"></a>switch选择结构</h3><blockquote>
<p>switch（表达式）{</p>
<p>case 常量1：</p>
<p>​    语句；</p>
<p>​        break；</p>
<p>case 常量2：</p>
<p>​    语句；</p>
<p>​        break；</p>
<p>…</p>
<p>default：</p>
<p>​    语句；</p>
<p>​        break；</p>
<p>}</p>
<p>switch后边的控制表达式的数据类型只能是整数和字符型，不能是boolean型</p>
<p>switch和多重if选择结构：</p>
<p>相同点：都用来处理多分支条件的结构</p>
<p>不同点：switch只能处理等值条件判断的情况，而且条件必须是整形或字符型变量</p>
<p>多重if选择结构适合某个变量处于某个连续区间时的情况</p>
</blockquote>
<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><blockquote>
<p>for（int i=0;i&lt;=100;i++）{</p>
<p>//<strong>初始化参数 条件判断 迭代</strong></p>
<p>System.out.println(“好好学习！”)</p>
<p>break; //结束这个循环</p>
<p>countinue；//跳出这次循环执行下一次</p>
<p>}</p>
</blockquote>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><blockquote>
<p><strong>while</strong>(i&lt;=100) { //循环条件</p>
<p>System.out.println(“”)； //执行代码块</p>
<p>i++； //迭代</p>
<p>}</p>
</blockquote>
<h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><blockquote>
<p>do{</p>
<p>循环操作</p>
<p>}while（循环条件）</p>
<p><strong>注：while和do-while的区别</strong></p>
<p><strong>执行次序不同：while先判断在执行，do-while先执行后判断</strong></p>
<p><strong>初次情况不满足循环条件时：while一次都不执行</strong></p>
<p><strong>do-while不管任何情况都会执行一次</strong></p>
</blockquote>
<h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><blockquote>
<p><strong>break</strong>用于完全结束一个循环，跳出循环体</p>
<p>break不仅可以结束其所在的循环，还可以直接结束其外部循环。此时需要在break后紧跟一个标签，这个标签用于表示一个外层循环</p>
<p>详情见<a href="file:///C:\Users\Administrator\AppData\Roaming\Microsoft\Word\java笔记309855513911934490\java练习.md">带标签的break语句</a></p>
<p><strong>continue</strong>用于在循环体中结束本次循环，开始下一次循环</p>
</blockquote>
<h2 id="递归结构"><a href="#递归结构" class="headerlink" title="递归结构"></a>递归结构</h2><blockquote>
<p>递归结构的思想就是自己调用自己</p>
<p>递归结构两个部分：</p>
<p>定义递归头：什么时候不调用方法。如果没有头将陷入死循环，也就是结束条件</p>
<p>递归体：什么时候要调用自身方法</p>
<p><a href="file:///C:\Users\Administrator\AppData\Roaming\Microsoft\Word\java笔记309855513911934490\java练习.md">递归实现阶乘</a></p>
</blockquote>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h3><blockquote>
<p>数组是一个变量存储相同数据类型的一组数据</p>
</blockquote>
<h3 id="数组基本要素"><a href="#数组基本要素" class="headerlink" title="数组基本要素"></a>数组基本要素</h3><blockquote>
<p>标识符：数组的名称，用于区别不同的数组</p>
<p>数组元素：向数组中存放的数据</p>
<p>元素下标：对数组元素进行编号</p>
<p>元素类型：数组元素的数据类型（数组中的所有元素必须属于相同的数据类型）</p>
<p><strong>注：数组长度固定不变，避免数组越界</strong></p>
</blockquote>
<h3 id="使用数组四步走"><a href="#使用数组四步走" class="headerlink" title="使用数组四步走"></a>使用数组四步走</h3><blockquote>
<p>1.声明数组：int a[ ];(声明数组时不规定数组长度)</p>
<p>2.分配空间：a=new int[5];</p>
<p>数据类型[ ] 数组名 = new 数组类型[大小]</p>
</blockquote>
<h3 id="3-赋值-a-0-8"><a href="#3-赋值-a-0-8" class="headerlink" title="3.赋值: a[0]=8;"></a>3.赋值: a[0]=8;</h3><blockquote>
<p>方法一：边声明边赋值</p>
<p>int score[ ]={89,79,76};</p>
<p>int score[ ]=new int[ ]{89,79,76}; //不能指定数组长度</p>
<p>方法二：动态从键盘中获取信息并赋值</p>
<p>Scanner input = new Scanner(System.in);</p>
<p>for(int I =0;i&lt;30;i++){</p>
<p>score[i]=input.nextlnt( );</p>
<p>}</p>
<p>4.处理数据:a[0]=a[0]*10</p>
</blockquote>
<h3 id="For-Each循环"><a href="#For-Each循环" class="headerlink" title="For-Each循环"></a>For-Each循环</h3><blockquote>
<p>在不使用索引的情况下输出所有数组元素</p>
<p>for（数组类型 element：数组名）{</p>
<p>System.out.print（element）；</p>
<p>}</p>
</blockquote>
<h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><ol>
<li> 将数组转化成长度固定的列表（Arrays.asList）</li>
</ol>
<blockquote>
<p><em>List</em>&lt;<em>String</em>&gt; list1 = Arrays.asList(数组名);</p>
<p>        System.out.println(list1);</p>
</blockquote>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image003.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image004.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>成员变量和局部变量的区别</p>
<ul>
<li><p>作用域不同</p>
<ul>
<li><p>  局部变量的作用域仅限于定义它的方法</p>
</li>
<li><p>  成员变量的作用域在整个类内部都是可见的</p>
</li>
</ul>
</li>
<li><p>初始值不同</p>
<ul>
<li><p>  Java会给成员变量一个初始值</p>
</li>
<li><p>  Java不会给局部变量初始值</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>局部变量包括：方法体、代码块、形参</p>
</blockquote>
<p>注：在同一个方法中，不允许有同名局部变量；在不同的方法中，可以有同名局部变量。</p>
<p>在同一个类中，成员变量和局部变量同名时，局部变量具有更高的优先性</p>
<h2 id="Final修饰符"><a href="#Final修饰符" class="headerlink" title="Final修饰符"></a>Final修饰符</h2><blockquote>
<p>在JAVA语言中，用关键字final来定义一个常量</p>
<p>常量一旦被初始化后就不能改变</p>
<p>声明格式：</p>
<p>final 数据类型 名称=内容；</p>
<p>final</p>
<p>final关键字可以用于修饰类、变量和方法</p>
<p>final修饰变量：</p>
<p>final修饰的类变量和方法不能改变</p>
<p>final修饰的变量（常量），必须要赋初始值</p>
<p>final可以 在创建时赋值，可以在普通初始化代码块中，可以在构造方法中</p>
<p>final创建的类变量，只能在创建时赋值和在静态初始化代码中</p>
<p>final修饰方法：</p>
<p>如果用final修饰方法，如果有子类那么不能在子类中重写此方法</p>
<p>final修饰类：</p>
<p>final修饰类则此类不可派生子类</p>
</blockquote>
<h2 id="方法（函数）"><a href="#方法（函数）" class="headerlink" title="方法（函数）"></a>方法（函数）</h2><h3 id="方法概述"><a href="#方法概述" class="headerlink" title="方法概述"></a>方法概述</h3><blockquote>
<p>就是将一个功能抽取出来，把代码单独定义在一个大括号内形成一个独立的包装。当我们需要这个功能的时候，就可以去调用，这样既实现了代码的复用性，也解决了代码冗余的现象</p>
</blockquote>
<h3 id="定义的格式"><a href="#定义的格式" class="headerlink" title="定义的格式"></a>定义的格式</h3><blockquote>
<p>修饰符 返回值类型 方法名 （参数列表）{</p>
<p>代码…</p>
<p>return ；</p>
<p>}</p>
<p>例如：</p>
<p><strong>public</strong> <strong>class</strong> score {</p>
<p>​    <strong>public</strong> <strong>static</strong> <strong>void</strong> main(String[] args) {</p>
<p>​        System.<em><strong>out</strong></em>.println(<em>aaa</em>(10,20));</p>
<p>​    }</p>
<p>public <strong>static</strong> <strong>int</strong> aaa(<strong>int</strong> a,<strong>int</strong> b) {</p>
<p>​        <strong>int</strong> ret=a+b;</p>
<p>​        <strong>return</strong> ret;</p>
<p>​    }</p>
<p>}</p>
</blockquote>
<h3 id="方法定义的注意事项"><a href="#方法定义的注意事项" class="headerlink" title="方法定义的注意事项"></a>方法定义的注意事项</h3><blockquote>
<p>方法定义的先后顺序无所谓</p>
<p>方法定义必须是挨着的，不能在一个方法的内部定义另一个方法</p>
</blockquote>
<p>方法定义之后自己不会执行，如果希望执行，一定要进行方法的调用</p>
<h3 id="方法的返回值"><a href="#方法的返回值" class="headerlink" title="方法的返回值"></a>方法的返回值</h3><p>返回值类型分为：基本数据类型和引用数据类型</p>
<p>基本数据类型return的值必须和数据类型一致</p>
<p>引用数据类型：</p>
<p>为类时return该类的对象</p>
<p>为抽象类名时return该类的子类对象</p>
<p>为接口名时return该接口的实现类的对象</p>
<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h3 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h3><blockquote>
<p>整个程序的基本单位就是类，方法是从属于类和对象</p>
</blockquote>
<h3 id="Java是面向对象的语言"><a href="#Java是面向对象的语言" class="headerlink" title="Java是面向对象的语言"></a>Java是面向对象的语言</h3><ol>
<li><p> 所有的Java程序都是以类class为组织单元</p>
</li>
<li><p> 关键字class定义自定义的数据类型</p>
</li>
</ol>
<h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image005.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>创建类</h3><p>类的方法示例</p>
<blockquote>
<p>public 返回值类型 方法名（）{</p>
<p>​    //这里编写方法的主体</p>
<p>}</p>
<p>方法的返回值</p>
</blockquote>
<ul>
<li><p>  如果方法具有返回值，方法中必须使用关键字return返回该值，返回值为该返回值的类型</p>
</li>
<li><p>  如果方法没有返回值，返回值类型为void</p>
</li>
</ul>
<p>注：一个文件中可以有多个类，但是公共的类只能有一个，就是public修饰的那一个，每存在一个类运行时系统就会自行创建一个class文件</p>
<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象<img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image006.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></h3><h2 id="初始化块"><a href="#初始化块" class="headerlink" title="初始化块"></a>初始化块</h2><p>初始化块分为：普通初始化块和静态初始化块</p>
<p>普通初始化和静态初始化的区别：</p>
<ol>
<li><p> 定义格式不同：普通初始化直接用{ }引起来，静态初始化要在前面加上static</p>
</li>
<li><p> 初始化对象不同：普通初始化块为对象进行初始化，静态初始化为类进行初始化</p>
</li>
<li><p> 调用方法不同： 普通初始化在创建对象时隐式调用，静态初始化在类加载时隐式调用</p>
</li>
<li><p> 调用次数不同：静态初始化可以多次被调用随着对象的创建进行添加，静态初始化只能被调用一次</p>
</li>
</ol>
<p>初始化对象执行顺序：</p>
<p>静态初始化&gt;普通初始化&gt;构造方法</p>
<p>有子类初始化对象执行顺序:</p>
<p>父类静态初始化&gt;子类静态初始化&gt;父类普通初始化&gt;父类构造方法&gt;子类普通初始化&gt;子类构造方法</p>
<p>构造方法用于初始化对象而静态初始化块用于初始化类</p>
<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>什么是构造器</p>
<p>用于对象的初始化，而不是创建对象</p>
<p>声明格式</p>
<blockquote>
<p>[修饰符] 类名(形参列表){<br>            //n条语句<br>       }</p>
</blockquote>
<p>构造器四个要点</p>
<ol>
<li><p> 构造器通过new关键字调用</p>
</li>
<li><p> 构造器不能定义返回值类型，不能使用return返回某个值</p>
</li>
<li><p> 如果我们没有定义构造器，则编译器会自动定义一个无参的构造方法</p>
</li>
<li><p> 构造器的方法名必须和类名一致</p>
</li>
</ol>
<h2 id="java虚拟机概念"><a href="#java虚拟机概念" class="headerlink" title="java虚拟机概念"></a>java虚拟机概念</h2><p>java虚拟机的内存可以分成三个区域：栈stack、堆heep、方法区method</p>
<p>内存图</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image007.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>代码见<a href="file:///C:\Users\Administrator\AppData\Roaming\Microsoft\Word\java笔记309855513911934490\java练习.md">Java练习</a></p>
<p>栈的特点</p>
<ol>
<li><p> 描述的是方法执行的内存模型。每个方法被调用都会创建一个栈帧</p>
</li>
<li><p> jvm为每个线程创建一个帧，用来存放执行方法信息</p>
</li>
<li><p> 栈属于线程私有，不能实现线程的共享</p>
</li>
<li><p> 栈的存储特性是“先进后出”，“后来居上”</p>
</li>
<li><p> 栈有系统自动分配速度快（栈是一个连续的内存空间）</p>
</li>
</ol>
<p>堆的特点</p>
<ol>
<li><p> 用于存储创建好的对象和数组（数组也是对象）</p>
</li>
<li><p> jvm只有一个堆，对接所有线程共享</p>
</li>
<li><p> 是一个不连续内存空间，分配灵活速度慢</p>
</li>
<li><p> 堆被所有线程共享，和堆上的区域，会被垃圾回收器做进一步划分</p>
</li>
</ol>
<p>方法区（也是一个堆）的特点</p>
<ol>
<li><p> 方法区是Java虚拟机规范，可以有不同的实现</p>
</li>
<li><p> jvm只有一个方法区，被所有线程共享</p>
</li>
<li><p> 方法区实际也是堆，只是用于存储类、常量相关的信息</p>
</li>
<li><p> 用来存放程序中哟永远不变或者唯一的内容（类信息、静态信息、字符串信息）</p>
</li>
<li><p> 常量池存放常量：如文本字符串、final常量</p>
</li>
</ol>
<h2 id="访问权限修饰符"><a href="#访问权限修饰符" class="headerlink" title="访问权限修饰符"></a>访问权限修饰符</h2><table>
<thead>
<tr>
<th></th>
<th>private</th>
<th>friendly(默认)</th>
<th>protected</th>
<th>public</th>
</tr>
</thead>
<tbody><tr>
<td>当前类访问权限</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>包访问权限</td>
<td>×</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>子类访问权限</td>
<td>×</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>其他类访问权限</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
</tbody></table>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><blockquote>
<p>构造方法是专门用来创建对象的方法，当我们通过关键字new来创建对象时其实就是在调用结构方法</p>
<p>格式：</p>
<p>public 类名称（参数类型 参数名称）{</p>
<p>方法名</p>
<p>}</p>
</blockquote>
<p>注意事项：</p>
<ol>
<li><p> 构造方法的名称必须和所在的类名完全一样，就连大小写也是一样</p>
</li>
<li><p> 构造方法不能写返回类型，连void都不写</p>
</li>
<li><p> 构造方法不能return一个具体的返回值</p>
</li>
<li><p> 如果没有编写任何构造方法，那么编译器将会默认赠送一个构造方法，没有参数，方法体什么事情都不做</p>
</li>
<li><p> 一旦编写了至少一个构造方法，那么编译器将不再赠送</p>
</li>
<li><p> 构造方法也是可以进行重载的</p>
</li>
</ol>
<blockquote>
<p>重载：方法名称相同，参数列表不同</p>
</blockquote>
<h2 id="面向对象三大特性"><a href="#面向对象三大特性" class="headerlink" title="面向对象三大特性"></a>面向对象三大特性</h2><h3 id="封装在java中的体现（增强安全性和简化编程）"><a href="#封装在java中的体现（增强安全性和简化编程）" class="headerlink" title="封装在java中的体现（增强安全性和简化编程）"></a>封装在java中的体现（增强安全性和简化编程）</h3><ol>
<li><p> 方法就是一种封装</p>
</li>
<li><p>关键字private也是一种封装</p>
<ol>
<li> 一旦使用了private进行修饰，那么本类当中仍然可以随意访问，但是超出了本类的范围之外就不能直接访问了</li>
</ol>
</li>
</ol>
<blockquote>
<p>但是可以间接访问private成员变量，就是定义一对Getter和Setter方法</p>
<p>使用规则：</p>
<p>必须叫setXxx或者是getXxx的命名规则</p>
<p>对于Getter来说，不能有参数，返回值类型和成员变量对应</p>
<p>对于Setter来说，不能有返回值，参数类型和成员变量对应</p>
<p>封装就是将一些细节隐藏起来对外界不可见</p>
</blockquote>
<h3 id="java中的继承性（解决代码可复用性）"><a href="#java中的继承性（解决代码可复用性）" class="headerlink" title="java中的继承性（解决代码可复用性）"></a>java中的继承性（解决代码可复用性）</h3><p>在继承的关系中，“子类就是一个父类”。也就是说，子类可以被当做父类看待</p>
<p>定义父类的格式</p>
<p><strong>public class 父类名称{</strong></p>
<p><strong>…</strong></p>
<p><strong>}</strong></p>
<p>定义子类的格式</p>
<p><strong>public class 子类名称 extends 父类名称{</strong></p>
<p><strong>…</strong></p>
<p><strong>}</strong></p>
<p><strong>注：子类在引用时可以找到父类中的方法和变量，但是父类就只能调用自己的</strong></p>
<blockquote>
<p><strong>super详解：</strong></p>
<p><strong>1.super是Java的关键字，他是直接父类对象的引用</strong></p>
<p><strong>2.就像this不能出现在static修饰的方法中一样，super也不能出现在static修饰的方法中</strong></p>
<p><strong>3.如果子类定义里父类同名的属性，也会发生子类属性覆盖父类属性的情形。子类的方法直接访问该属性，都会访问到覆盖属性，无法访问父类被覆盖的属性—通过super访问父类被覆盖的属性</strong></p>
<p><strong>4.如果没有在子类中写super，系统将会自动调用</strong></p>
<p><strong>5.一般把super写到方法的最前面</strong></p>
<p><strong>在继承中，当父类有构造方法时，子类一定会调用父类的构造方法</strong></p>
</blockquote>
<h3 id="java中的多态（增加程序可扩充性）"><a href="#java中的多态（增加程序可扩充性）" class="headerlink" title="java中的多态（增加程序可扩充性）"></a>java中的多态（增加程序可扩充性）</h3><p>多态就是：父类引用指向子类对象</p>
<p>父类名称 对象名=new 子类名称（）</p>
<p>多态只能调用子类和父类都有的方法</p>
<p>如果非要调用子类自己有的方法就需要</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image008.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image009.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>向上转型：</p>
<p>Animal an1=new Dog();</p>
<p>a1.sleep(); //报错的 原因：an1是父类对象，父类没有办法调用子类</p>
<p><strong>Dog d=(Dog)an1; 这实际上就是将父类当做子类使用，也叫作向上转型</strong></p>
<p><strong>d.sleep(); //正确的</strong></p>
<h2 id="抽象方法和抽象类"><a href="#抽象方法和抽象类" class="headerlink" title="抽象方法和抽象类"></a>抽象方法和抽象类</h2><h3 id="什么是抽象方法和抽象类"><a href="#什么是抽象方法和抽象类" class="headerlink" title="什么是抽象方法和抽象类"></a>什么是抽象方法和抽象类</h3><p>抽象方法：就是在方法的基础上加上abstract关键字，然后去掉大括号，直接分号结束</p>
<p>抽象类：就是抽象方法所在的类，必须是抽象类才行，在class前面加上abstract即可</p>
<h3 id="使用抽象方法和抽象类的注意事项"><a href="#使用抽象方法和抽象类的注意事项" class="headerlink" title="使用抽象方法和抽象类的注意事项"></a>使用抽象方法和抽象类的注意事项</h3><ol>
<li><p> 不能直接new抽象类对象，必须用一个子类来继承抽象父类</p>
</li>
<li><p> 子类必须覆盖重写抽象父类的所有的抽象方法</p>
</li>
</ol>
<blockquote>
<p>重写和覆盖的实现：子类去掉抽象方法的abstract关键字，然后补上方法的大括号</p>
</blockquote>
<ol>
<li><p> 创建子类对象进行使用</p>
</li>
<li><p> 在抽象类中，不一定包含抽象对象，但是有抽象方法的类必须是抽象类</p>
</li>
</ol>
<h3 id="abstract使用注意事项"><a href="#abstract使用注意事项" class="headerlink" title="abstract使用注意事项"></a>abstract使用注意事项</h3><ol>
<li><p> final和abstract永远不能同时使用</p>
</li>
<li><p> abstract不能修饰变量</p>
</li>
<li><p> static和abstract也不能同时使用</p>
</li>
<li><p> private和abstract也不能同时使用</p>
</li>
</ol>
<h2 id="this关键字的使用"><a href="#this关键字的使用" class="headerlink" title="this关键字的使用"></a>this关键字的使用</h2><blockquote>
<p>当方法的局部变量和成员变量重名是，根据就近原则会优先赋局部变量的值。如果想要使用成员变量的值就要用到this.成员变量名</p>
</blockquote>
<p><a href="file:///C:\Users\Administrator\AppData\Roaming\Microsoft\Word\java笔记309855513911934490\java练习.md">this案例</a></p>
<h2 id="对象数组的声明和使用"><a href="#对象数组的声明和使用" class="headerlink" title="对象数组的声明和使用"></a>对象数组的声明和使用</h2><h3 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h3><blockquote>
<p>类名称 [ ]对象数组名=new 类名称[ ]{对象,对象……}</p>
</blockquote>
<h2 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h2><h3 id="什么是ArrayList类"><a href="#什么是ArrayList类" class="headerlink" title="什么是ArrayList类"></a>什么是ArrayList类</h3><blockquote>
<p>ArrayList是<strong>大小可变数组</strong>的实现，存储在内的东西叫元素，ArrayList可以无限往里添加元素，大小也会随着元素的变化而变化</p>
</blockquote>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>ArrayList&lt;String&gt; zu=new ArrayList&lt;&gt;();</p>
<blockquote>
<p>ArrayList后面有一个&lt;E&gt;代表泛值</p>
<p>泛值：也就是装在集合中的所有元素，全都是统一的什么类型</p>
<p>注意，泛值只能是引用类型，不能是基本类型</p>
<p>注意事项：</p>
<p>对于ArrayList集合来说，可以直接打印内容</p>
<p>如果内容为空，得到的是空的中括号</p>
</blockquote>
<h3 id="ArrayList添加、访问、删除和获取长度"><a href="#ArrayList添加、访问、删除和获取长度" class="headerlink" title="ArrayList添加、访问、删除和获取长度"></a>ArrayList添加、访问、删除和获取长度</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">添加：zu.add(“嗨害嗨”)；</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> add（E e）</span><br><span class="line"></span><br><span class="line">注意事项：添加的数据类型要符合泛值类型</span><br><span class="line"></span><br><span class="line">访问：zu.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">返回的是指定索引位置的值，</span><br><span class="line"></span><br><span class="line">删除：zu.remove(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">返回的是指定索引值所删除的值</span><br><span class="line"></span><br><span class="line">访问长度：zu.size();</span><br><span class="line"></span><br><span class="line">返回的是数组列表的长度</span><br></pre></td></tr></table></figure>



<h3 id="向ArrayList中添加基本数据类型"><a href="#向ArrayList中添加基本数据类型" class="headerlink" title="向ArrayList中添加基本数据类型"></a>向ArrayList中添加基本数据类型</h3><blockquote>
<p>格式如下：</p>
<p>ArrayList&lt;Integer&gt; aaa=new ArrayList&lt;&gt;();</p>
<p>​                Byte<br>​                        Short<br>​                        Long<br>​                        Float<br>​                        Double<br>​                        Character<br>​                        Boolean</p>
</blockquote>
<h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><p>Math.abs(a)//返回a的绝对值</p>
<p>Math.ceil(a)//上舍入</p>
<p>Math.floor(a)//下舍入</p>
<p>Math.round(a)//四舍五入</p>
<h2 id="字符串概述"><a href="#字符串概述" class="headerlink" title="字符串概述"></a>字符串概述</h2><h3 id="什么是字符串"><a href="#什么是字符串" class="headerlink" title="什么是字符串"></a>什么是字符串</h3><blockquote>
<p>在程序中，但凡是使用双引号引起来的东西就是字符串</p>
</blockquote>
<h3 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点"></a>字符串的特点</h3><ol>
<li><p> 字符串的内容是不可变的</p>
</li>
<li><p> 正是因为字符串的内容不可变，所以字符串是可以共享使用的</p>
</li>
<li><p> 字符串的效果上相当于是char[ ]字符数组，但底层原理是byte[ ]字节数组</p>
</li>
</ol>
<h3 id="创建字符串三种方法"><a href="#创建字符串三种方法" class="headerlink" title="创建字符串三种方法"></a>创建字符串三种方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过构造创建字符串对象</span></span><br><span class="line"></span><br><span class="line">String name1=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;害&quot;</span>);  </span><br><span class="line">System.out.println(name1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据字符数组创建字符串  </span></span><br><span class="line"><span class="type">char</span> []name2=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;  </span><br><span class="line">String str1=<span class="keyword">new</span> <span class="title class_">String</span>(name2);  </span><br><span class="line">System.out.println(str1);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//根据字节数组创建字符串  </span></span><br><span class="line"><span class="type">byte</span> []name3=&#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>&#125;;  </span><br><span class="line">String str2=<span class="keyword">new</span> <span class="title class_">String</span>(name3);  </span><br></pre></td></tr></table></figure>

<p>System.<em>out</em>.println(str2);</p>
<h3 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h3><blockquote>
<p>在程序当中，直接写在双引号中的字符串都是放在常量池当中</p>
<p>对于基本类型来讲“==”是对数值进行比较</p>
<p>对于引用类型来讲“==”是对地址值进行比较</p>
</blockquote>
<h3 id="字符串内容比较"><a href="#字符串内容比较" class="headerlink" title="字符串内容比较"></a>字符串内容比较</h3><blockquote>
<p>.equals() //比较字符串内容(区分大小写)</p>
<p>.equalsIgnoreCase() //比较字符串内容(不区分大小写)</p>
<p>注意事项：</p>
</blockquote>
<ol>
<li><p> 任何对象都可以用object接收</p>
</li>
<li><p> .equals有对称性，就是说a.equals（b）和b.equals（a）效果一样</p>
</li>
<li><p> 如果比较的双方一个是常量一个是变量，推荐把常量写在前面</p>
</li>
</ol>
<h3 id="字符串的获取"><a href="#字符串的获取" class="headerlink" title="字符串的获取"></a>字符串的获取</h3><blockquote>
<p>.length() //获取字符串长度</p>
<p>str1.concat(str2) //字符串拼接</p>
<p>str1.charAt(1) //获取指定位置的字符</p>
<p>str1.indexOf(“aaa”) //返回指定字符第一次出现位置的值，如果没有返回-1</p>
</blockquote>
<h3 id="字符串的截取"><a href="#字符串的截取" class="headerlink" title="字符串的截取"></a>字符串的截取</h3><blockquote>
<p>str1.substring(3) //使用一个参数是从指定字符开始截到末尾</p>
<p>str1.substring(3,5) //使用两个参数是从指定位置开始截到第二个参数位不包括最后一位</p>
</blockquote>
<h3 id="字符串的转化"><a href="#字符串的转化" class="headerlink" title="字符串的转化"></a>字符串的转化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> []aaa= &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">String zu=<span class="keyword">new</span> <span class="title class_">String</span>(aaa);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串转化为字符数组  </span></span><br><span class="line"><span class="type">char</span> [] charArray=zu.toCharArray();  </span><br><span class="line">System.out.println(charArray[<span class="number">0</span>]); <span class="comment">//a  </span></span><br><span class="line">System.out.println(<span class="string">&quot;===========&quot;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串转化为字节数组  </span></span><br><span class="line"><span class="type">byte</span> [] byteArray=zu.getBytes();  </span><br><span class="line">System.out.println(byteArray[<span class="number">0</span>]); <span class="comment">//97  </span></span><br><span class="line">System.out.println(<span class="string">&quot;===========&quot;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串替换  </span></span><br><span class="line">String str1=<span class="string">&quot;墨子我艹你妈&quot;</span>;  </span><br><span class="line">String str2=str1.replace(<span class="string">&quot;艹&quot;</span>,<span class="string">&quot;\*&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个参数表示要替换的字符，第二个表示替换成什么  </span></span><br><span class="line">System.out.println(str2); <span class="comment">//墨子我\*你妈</span></span><br></pre></td></tr></table></figure>



<h3 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h3><p>//字符串分割</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str3=<span class="string">&quot;aaa,bbb,ccc,ddd&quot;</span>;  </span><br><span class="line">String [] str4=str3.split(<span class="string">&quot;,&quot;</span>); <span class="comment">//用什么分割  </span></span><br><span class="line">System.out.println(str4[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>



<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="什么是接口"><a href="#什么是接口" class="headerlink" title="什么是接口"></a>什么是接口</h3><p>接口就是多个类的公共规则</p>
<p>可以通过接口来实现多重继承</p>
<p>接口是一种引用数据类型，最重要的内容就是其中的抽象方法</p>
<h3 id="如何定义一个接口"><a href="#如何定义一个接口" class="headerlink" title="如何定义一个接口"></a>如何定义一个接口</h3><p>格式：public interface 接口名称{</p>
<p>…</p>
<p>}</p>
<h3 id="接口包含的内容"><a href="#接口包含的内容" class="headerlink" title="接口包含的内容"></a>接口包含的内容</h3><p>java7.0可以包含</p>
<p>1. 常量</p>
<p>2. 抽象方法</p>
<blockquote>
<p>java8.0额外包括</p>
<p>1. 默认方法</p>
<p>2. 静态方法</p>
<p>java9.0额外包括</p>
<p>1. 私有方法</p>
<p>注意：接口中只能是抽象方法，不能是其他方法</p>
</blockquote>
<h3 id="接口的定义和使用"><a href="#接口的定义和使用" class="headerlink" title="接口的定义和使用"></a>接口的定义和使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestInterface</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>; <span class="comment">//必须是抽象方法 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在实现类中必须重写接口中的抽象方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">extendsClass</span> <span class="keyword">implements</span> <span class="title class_">TestInterface</span>&#123; </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123; </span><br><span class="line">		System.out.println(<span class="string">&quot;我是从接口中重写的抽象方法&quot;</span>); </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="接口的默认方法使用"><a href="#接口的默认方法使用" class="headerlink" title="接口的默认方法使用"></a>接口的默认方法使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">text</span><span class="params">()</span>&#123;  </span><br><span class="line"></span><br><span class="line">	&#125; <span class="comment">//接口的默认方法  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口的默认对象可以被实现类继承和重写</p>
<p>接口的默认对象不需要在实现类中实现</p>
<p>用于解决接口的升级问题</p>
<h3 id="接口中的静态方法使用"><a href="#接口中的静态方法使用" class="headerlink" title="接口中的静态方法使用"></a>接口中的静态方法使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterfaceStatic</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodStatic</span><span class="params">()</span>&#123; </span><br><span class="line">		System.out.println(<span class="string">&quot;这是接口的静态方法&quot;</span>); </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterfaceStaticTest</span>&#123; </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">		MyInterfaceStatic.methodStatic(); </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口中的静态方法可以直接在测试类中调用，因为静态方法从属于类</span></span><br></pre></td></tr></table></figure>



<h3 id="接口中的私有方法"><a href="#接口中的私有方法" class="headerlink" title="接口中的私有方法"></a>接口中的私有方法</h3><p>可以解决的问题：</p>
<p>我们需要抽取一个共有的方法，用来解决两个默认方法之间重复的代码的问题。但是这个共有方法不应该让实现类使用，应该是私有化的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterfaceStatic</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodStatic1</span><span class="params">()</span>&#123; </span><br><span class="line">		System.out.println(<span class="string">&quot;静态方法1&quot;</span>); </span><br><span class="line">		selectStatic(); </span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodStatic2</span><span class="params">()</span>&#123; </span><br><span class="line">		System.out.println(<span class="string">&quot;静态方法2&quot;</span>); </span><br><span class="line">		selectStatic(); </span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectStatic</span><span class="params">()</span>&#123; </span><br><span class="line">		System.out.println(<span class="string">&quot;aaa&quot;</span>); </span><br><span class="line">		System.out.println(<span class="string">&quot;bbb&quot;</span>); </span><br><span class="line">		System.out.println(<span class="string">&quot;ccc&quot;</span>); </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterfaceStaticTest</span>&#123; </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">		MyInterfaceStatic.methodStatic1(); </span><br><span class="line">		MyInterfaceStatic.methodStatic2(); </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="内部类格式"><a href="#内部类格式" class="headerlink" title="内部类格式"></a>内部类格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWindow</span>&#123; <span class="comment">//外部类</span></span><br><span class="line">	String name; </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyEvent</span>&#123; <span class="comment">//内部类 </span></span><br><span class="line">		… </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部类可以使用外部类中的属性和方法</p>
<h3 id="创建内部类对象格式"><a href="#创建内部类对象格式" class="headerlink" title="创建内部类对象格式"></a>创建内部类对象格式</h3><blockquote>
<p>外部类名.内部类名 对象名 =new 外部类名().new内部类名();</p>
</blockquote>
<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><blockquote>
<p>什么是匿名内部类？</p>
<p>​    就是一个没有名字的局部内部类</p>
<p>匿名内部类的目的是简化代码，也是开发常用的形式</p>
<p>匿名内部类的格式</p>
<p>new 类名|抽象类|接口（形参）{</p>
<p>方法重写</p>
<p>}</p>
</blockquote>
<p>匿名内部类的特点：</p>
<ol>
<li><p> 匿名内部类是一个没有名字的内部类</p>
</li>
<li><p> 匿名内部类一旦写出来，就会立即创建一个匿名内部类的方法返回</p>
</li>
<li><p> 匿名内部类的对象的类型相当于是当前new的那个的类型的子类类型</p>
</li>
</ol>
<h1 id="java高级编程"><a href="#java高级编程" class="headerlink" title="java高级编程"></a>java高级编程</h1><h2 id="Java类"><a href="#Java类" class="headerlink" title="Java类"></a>Java类</h2><h3 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h3><blockquote>
<p>Random r=new Random();</p>
<p>Int i=r.nextInt(100);</p>
</blockquote>
<h3 id="ArrayList类-1"><a href="#ArrayList类-1" class="headerlink" title="ArrayList类"></a>ArrayList类</h3><blockquote>
<p>是大小可变的数组</p>
</blockquote>
<h3 id="Object类（所有的类都默认继承object）"><a href="#Object类（所有的类都默认继承object）" class="headerlink" title="Object类（所有的类都默认继承object）"></a>Object类（所有的类都默认继承object）</h3><blockquote>
<p>toString方法（使用的话一般需要重写）</p>
<p>public String toString（）；返回一个字符串</p>
<p>equals方法</p>
</blockquote>
<h3 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h3><ul>
<li>  用来获取日历</li>
</ul>
<blockquote>
<p>//获得一个日历</p>
<p>Calendar cal=Calendar.getInstance();</p>
<p>//获取年份</p>
<p>int year=cal.get(cal.YEAR);</p>
<p>//获取月份用0-11来表示</p>
<p>int month=cal.get(cal.MONTH);</p>
<p> <img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image010.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</blockquote>
<ul>
<li>  设置年份</li>
</ul>
<blockquote>
<p>//设置年份</p>
<p>cal.set(alendar.YEAR,2020)</p>
<p>从日历的基础上增加或者减去</p>
<p>public abstract void add(int field,int )</p>
<p>//将年份减去三</p>
<p>cal.add(cal.YEAR,-3)</p>
</blockquote>
<h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><ul>
<li>  返回当前时间的毫秒值</li>
</ul>
<blockquote>
<p>System.currentTimeMillis()</p>
</blockquote>
<ul>
<li>  将数组中指定的数据拷贝到另一个数组中</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.arraycopy()</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> [] src=<span class="keyword">new</span> <span class="title class_">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> [] dest=&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">System.arraycopy(src,<span class="number">0</span>,dest,<span class="number">1</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>



<h3 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h3><blockquote>
<p>向字符串追加内容</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image011.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>toString方法，将StringBuilder类转化为String类</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image012.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</blockquote>
<h3 id="封装类"><a href="#封装类" class="headerlink" title="封装类"></a>封装类</h3><p>像int，double，long等基本数据类型是不能想引用数据类型那样调用方法的</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image013.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image014.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image015.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h2><blockquote>
<p>集合与数组的区别：数组长度是固定的，集合长度可变；数组中存储的是同一类型数据，统一集合中可以存储多种数据类型，包括基本数据类型和引用数据类型。</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image016.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>创建集合：</p>
<p>Collection&lt;String&gt; coll=new ArrayList&lt;String&gt;()</p>
<p>常用方法：</p>
<p>public boolean add();将给定的对象添加到当前集合中</p>
<p>public void clear（）;清空集合中所有元素</p>
<p>public boolean remove();把给定的对象从当前集合中删除</p>
<p>public boolean contains(Object o);判断集合中是否存在指定元素</p>
<p>boolean isEmpty();判断集合是否为空</p>
<p>int size();集合的长度，也就是集合中元素的长度</p>
</blockquote>
<h3 id="迭代器Iterator"><a href="#迭代器Iterator" class="headerlink" title="迭代器Iterator"></a>迭代器Iterator</h3><p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image017.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image018.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>增强for:</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image019.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>collection的子接口，不但继承了Collection接口中的全部方法</p>
<p>创建list：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list1=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">list1.add(“alice”);</span><br><span class="line"></span><br><span class="line">list的子类：ArrayList</span><br><span class="line"></span><br><span class="line">list的子类：LinkedList</span><br><span class="line"></span><br><span class="line">LinkedList&lt;String&gt; kdt=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;;();</span><br><span class="line"></span><br><span class="line">	.addFirst()添加元素到列表头部</span><br><span class="line"></span><br><span class="line">	.addLast()添加元素到列表尾部</span><br><span class="line"></span><br><span class="line">	.getFist()返回列表的第一个元素</span><br><span class="line"></span><br><span class="line">	.getLast()返回列表的最后一个元素</span><br><span class="line"></span><br><span class="line">	.removeFirst()移除并返回列表的第一个元素</span><br><span class="line"></span><br><span class="line">	.removeLast()移除并返回列表的最后一个元素</span><br><span class="line"></span><br><span class="line">	.push()向列表推入一个元素（从前面推进去）</span><br><span class="line"></span><br><span class="line">	.pop()弹出一个元素</span><br></pre></td></tr></table></figure>



<h3 id="set类"><a href="#set类" class="headerlink" title="set类"></a>set类</h3><blockquote>
<p>同样是继承于Collection接口，set中所存储的元素是不重复的，并且元素是无序的</p>
</blockquote>
<ol>
<li> HashSet</li>
</ol>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image020.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>HashSet的子类LinkedHashList类</p>
<blockquote>
<p>查找速度快数据是有序的</p>
</blockquote>
<h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><blockquote>
<p>往集合中添加一些元素</p>
<p>Collections.addAll（list,1,2,3,4,5）</p>
<p>打乱集合顺序</p>
<p>Collections.shuffle(list)</p>
<p>将集合中元素排序(默认升序)</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image021.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>Collections.sort(list)</p>
</blockquote>
<h2 id="Map（键值对）"><a href="#Map（键值对）" class="headerlink" title="Map（键值对）"></a>Map（键值对）</h2><blockquote>
<p>与Collection不同，Collection当中的集合都是孤立的，向集合中存储元素都是一个个元素存储，Map中的元素都是成对存在的，每个元素都是值和键两部分组成，通过键可以找到对应的值</p>
</blockquote>
<p>常用的子类中有HashMap，和HashMap下还有一个子类LinkedHashMap</p>
<p>常用的方法：</p>
<p>HashMap&lt;String,String&gt; map=new HashMap&lt;String,String&gt;();</p>
<p>​    map.put( “218307035”,”张三”); 把指定的键于指定的值添加到map集合中</p>
<p>​    map.remove(“218307035”); 移除指定的键所对应的键值对，并返回键值对的值</p>
<p>​    map.get(“218307035”); 获取这个键所对应的值</p>
<p>​    map.keySet() 获取集合中所有的键</p>
<p>​    map.containskey(“218307035”) 判断集合中是否包含指定的键</p>
<p>遍历所有键值对</p>
<p>​    for(String key:map.keySet()){</p>
<p>​        String v=map.get(key)</p>
<p>​        System.out.println(key+”:”+v)</p>
<p>​    }</p>
<p>获取所有的项（键值对）</p>
<p>​    set&lt;Entry&lt;String,String&gt;&gt; entrySet=map.entrySet();</p>
<p>​    getkey()获取Entry键</p>
<p>​    getValue(）获取Entry对象的值</p>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型，用来灵活的将数据类型应用到不同的类、方法、接口当中，将数据类型作为参数传递。</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="异常-1"><a href="#异常-1" class="headerlink" title="异常"></a>异常</h3><blockquote>
<p>指的就是程序在运行过程中，出现的非正常的情况，会导致程序非正常停止</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image022.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>Error:严重错误，无法通过处理的错误，只能写程序时尽量避免</p>
<p>Exception:表示异常，可以通过处理之后，使程序继续运行</p>
</blockquote>
<h3 id="异常的捕获try…catch"><a href="#异常的捕获try…catch" class="headerlink" title="异常的捕获try…catch"></a>异常的捕获try…catch</h3><ol>
<li> 将有可能发生异常的代码放在try语句中，将有可能发生异常的种类放在catch的参数中，catch语句块中处理异常、</li>
</ol>
<blockquote>
<p>try{</p>
<p>//要监听的代码</p>
<p>}catch（异常类型 异常名变量）{</p>
<p>//针对异常进行处理的代码</p>
<p>}</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image023.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</blockquote>
<ol>
<li><p>当有多个异常种类时可以用多个catch语句进行捕获，一但捕获到某个异常try语句中，程序停止不再执行，会往下运行其他程序</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image024.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
<li><p>如果try语句中还有其他异常，而catch语句并没有捕获到，可以在最后加一个catch语句，参数为所有异常的父类Exception，它能够捕获到所有的异常，但是一旦前面的某一个catch捕获到了异常，后面的所有catch语句将不在进行捕获。</p>
</li>
</ol>
<blockquote>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image025.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</blockquote>
<h3 id="finally语句块"><a href="#finally语句块" class="headerlink" title="finally语句块"></a>finally语句块</h3><blockquote>
<p>当程序发生异常时在catch语句中捕获到，并进行处理时，可能会让程序发生跳转或者返回等等。这时发生try…catch后面的语句就不再执行，为了解决这个问题，finally语句块中的程序是无论是否发生异常都会去执行的代码。</p>
</blockquote>
<h3 id="异常的抛出throw"><a href="#异常的抛出throw" class="headerlink" title="异常的抛出throw"></a>异常的抛出throw</h3><p>1.当程序发生异常时，不做处理，可以抛出给调用者，让调用者处理。throw是写在方法内部，该方法的声明处要用throws关键字抛出异常种类。</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image026.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>2.当方法内部用了多了throw，抛出多个异常时，在方法的声明处，用throws关键字抛出多个异常种类，用逗号隔开。</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image027.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>并发：多个事件同一时间段内发生</p>
<p>并行：多个时间同一时刻发生（同时发生）</p>
<p>进程：一个内存中运行的应用程序，每个进程都有独立的内存空间，一个应用处程序可以有多个进程</p>
<p>线程：是最小的执行单元，一个进程中可以有多个线程</p>
<blockquote>
<p>多线程：程序可以同时运行多个任务</p>
</blockquote>
<h3 id="创建线程（继承Thread）"><a href="#创建线程（继承Thread）" class="headerlink" title="创建线程（继承Thread）"></a>创建线程（继承Thread）</h3><ol>
<li><p> 定义一个Thread的子类，并重写run（）方法，run()方法就代表了线程需要完成的任务</p>
</li>
<li><p> 创建Thread子类的对象</p>
</li>
<li><p> 调用线程的start（）方法来启动线程</p>
</li>
</ol>
<h3 id="创建线程（通过Runnable接口）："><a href="#创建线程（通过Runnable接口）：" class="headerlink" title="创建线程（通过Runnable接口）："></a>创建线程（通过Runnable接口）：</h3><ol>
<li><p> 定义Runnable的实现类，重写该接口的run（）方法</p>
</li>
<li><p> 创建该实现类的类对象并以此类对象作为Thread的参数来创建Thread对象，该对象才是真正的线程对象。</p>
</li>
<li><p> 调用start（）方法来启动线程</p>
</li>
</ol>
<h3 id="Thread类主要方法"><a href="#Thread类主要方法" class="headerlink" title="Thread类主要方法"></a>Thread类主要方法</h3><blockquote>
<p>public Thread（String name）；分配一个指定名字的线程对象</p>
<p>public String getName();获取线程的名称</p>
<p>public void run();线程要执行的任务在此处定义</p>
<p>public void start();线程开始执行run()方法</p>
<p>public static void sleep(long millis);是当前正在执行的线程以指定的毫秒数暂停运行（用在try…catch）</p>
<p>public static Thread currentThread();返回当前正在运行的线程</p>
</blockquote>
<h3 id="带名称的线程创建"><a href="#带名称的线程创建" class="headerlink" title="带名称的线程创建"></a>带名称的线程创建</h3><blockquote>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image028.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</blockquote>
<h3 id="Runnable比Thread的优势"><a href="#Runnable比Thread的优势" class="headerlink" title="Runnable比Thread的优势"></a>Runnable比Thread的优势</h3><ol>
<li><p> 适合多个相同的程序代码的线程去共享同一个资源</p>
</li>
<li><p> 可以避免java中的单继承的局限性</p>
</li>
</ol>
<blockquote>
<p>一个类中只能有一个爹，类继承了Thread类就不能继承其它类，而实现Runnable接口还可以去继承其他类，实现其它接口</p>
</blockquote>
<p> 3.增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立。</p>
<blockquote>
<p>实现Runriable接口的方式,把设嚣线程任务和开启新线程进行了分离(解耦)</p>
</blockquote>
<ol>
<li> 线程池只能放入实现Runable或Callable类线程，不能直接放入继承Thread的类。</li>
</ol>
<p>扩展：在java中，每次程序运行都会调用至少两个线程，一个是main线程另一个是垃圾收集线程。因此每当使用java命令执行一个类的时候，实际上都会启动一个jvm每一个jvm其实都在操作系统上启动一个线程</p>
<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><blockquote>
<p>什么是线程安全</p>
<p>当一个共享资源被多个线程共享时各个线程不相通，所以就会形成线程多次执行同一个任务</p>
<p>为了解决这个问题java提供了同步锁和Lock锁</p>
<p>同步锁格式：</p>
<p>Object lock=new Object();</p>
<p>synchronized（lock）{</p>
<p>需要同步的代码</p>
<p>}</p>
</blockquote>
<p>Lock锁格式：</p>
<p>导入 java.util.concurrent.locks.Lock;和java.util.concurrent.locks.ReentrantLock;</p>
<p>Lock lock=new ReentrantLock；</p>
<blockquote>
<p>public void lock()；加同步锁</p>
<p>public void unlock()；解锁</p>
</blockquote>
<h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><blockquote>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image029.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</blockquote>
<h3 id="等待唤醒机制"><a href="#等待唤醒机制" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h3><ol>
<li><p> wait:线程不再活动，进入wait set中，不会浪费cpu,这时的状态就是waiting,必须等着另一个线程执行唤醒notify动作，把在waiting中的线程唤醒，这时waiting 中的线程从waiting set中释放出来。</p>
</li>
<li><p> notify：从waiting set中选取一个线程释放，</p>
</li>
<li><p> notifyAll:把waiting set中所有的线程唤醒。</p>
</li>
</ol>
<blockquote>
<p>注意事项：从waiting set中释放的线程并不代表可以立即恢复执行，只是进入可执行状态；</p>
<p><strong>锁资源：</strong></p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image030.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><strong>生产者线程：</strong></p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image031.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><strong>消费者线程</strong>：</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image032.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><strong>测试类：</strong></p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image033.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><strong>运行结果：</strong></p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image034.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>注意事项：</p>
<p>1.wait和notify方法必须要用同一个锁对象（题中用的是bz）,锁对象只能唤醒同一个锁对象中等待的线程。</p>
<p>2.锁对象可以是任意对象。-</p>
<p>3.wait和notify方法必须要放在同步代码块或者同步方法中。</p>
</blockquote>
<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><blockquote>
<p>什么是lambda表达式</p>
<p>是一种简化匿名内部类的方法，只能够简化函数式接口（接口中只有一个抽象方法）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xianc</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span>  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;  </span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在运行&quot;</span>);  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;  </span><br><span class="line">	xianc xc=<span class="keyword">new</span> <span class="title class_">xianc</span>();  </span><br><span class="line">	Thread th=<span class="keyword">new</span> <span class="title class_">Thread</span>(xc);  </span><br><span class="line">	th.start(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名内部类  </span></span><br><span class="line">	Thread th=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;  </span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在运行&quot;</span>);  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;);  </span><br><span class="line">th.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda表达式  </span></span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;  </span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在运行&quot;</span>);  </span><br><span class="line">	&#125;).start();  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="File文件类"><a href="#File文件类" class="headerlink" title="File文件类"></a>File文件类</h2><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote>
<p>public File(String pathname);通过给定的路径名字符串创建File实例。</p>
<p>public File(String parent,String child);第一个参数是父路径，第二个参数是文件名。</p>
<p>public File(File parent,String chilid);第一个参数是通过父路径创建的File实例。</p>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<p>public String getAbsolutePath():返回文件的绝对路径。</p>
<p>public String getPath();返回路径名的字符串，即定义File对象实例时，传进去的参数。</p>
<p>public String getName();获取文件的名称</p>
<p>public long length();获取文件的大小。</p>
</blockquote>
<h3 id="判断功能方法"><a href="#判断功能方法" class="headerlink" title="判断功能方法"></a>判断功能方法</h3><blockquote>
<p>public boolean exists();用于判断指定路径中文件是否存在</p>
<p>public boolean isDirectory();用于判断路径是否是一个目录</p>
<p>public boolean isFile();用于判断路径是否是一个文件</p>
</blockquote>
<h3 id="创建和删除功能"><a href="#创建和删除功能" class="headerlink" title="创建和删除功能"></a>创建和删除功能</h3><blockquote>
<p>public boolean createFile();当文件或目录不存在的时候返回true并创建，如果存在就返回false</p>
<p>public boolean delete();当文件存在时返回true否则返回false</p>
<p>public boolean mkdir();创建一个目录</p>
<p>public boolean mkdirs();创建多级目录</p>
</blockquote>
<h3 id="遍历目录"><a href="#遍历目录" class="headerlink" title="遍历目录"></a>遍历目录</h3><blockquote>
<p>public String[] list();返回一个String数组，表示该File目录中的所有子文件和目录。</p>
<p>只能输出一级目录下的文件和目录。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;  </span><br><span class="line">File dir=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:&quot;</span>); <span class="comment">/*创建文件对象*/</span></span><br><span class="line"></span><br><span class="line">String [] names= dir.list();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(String i:names)&#123;  </span><br><span class="line">		System.out.println(i);  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5201314.pptx</p>
<p>实训练习</p>
<p>WordPress mysqle</p>
<p>外星人就在月球背面.txt</p>
<p>课件</p>
<p>软件安装包</p>
<p>public File[] listFile();返回是一个File数组，表示该File目录中的所有子文件和目录。只能输出一级目录下的文件和目录。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">File dir=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:&quot;</span>); <span class="comment">/*创建文件对象*/</span>  </span><br><span class="line">File [] names= dir.listFiles();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(File i:names)&#123;  </span><br><span class="line">System.out.println(i);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>都是一级文件<br>/* F:$RECYCLE.BIN<br>F:5201314.pptx<br>F:实训练习<br>F:WordPress mysqle<br>F:外星人就在月球背面.txt<br>F:课件*/</p>
</blockquote>
<h3 id="文件过滤器"><a href="#文件过滤器" class="headerlink" title="文件过滤器"></a>文件过滤器</h3><blockquote>
<p>导入java.io.FileFilter;是一个接口，里面有一个抽象方法：</p>
<p>boolean accept(File name);</p>
<p>例子：保留所有.java类型的文件</p>
<p>方法一：先建立一个FileFilter的实现类，重写accept方法，然后在测试类里，创建该实现类的类对象，遍历目录中的所有文件，每层循环都调用一次该对象中的accept方法，返回true则输出该文件，否则不输出。</p>
<p>FileFilter的实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bianlimulu</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.FileFilter&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File pathname)</span> &#123;  </span><br><span class="line">	<span class="keyword">return</span> pathname.getName().endsWith(<span class="string">&quot;.java&quot;</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">File file=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F://&quot;</span>);  </span><br><span class="line">File [] dir=file.listFiles(); <span class="comment">/*创建数组接收文件*/</span>  </span><br><span class="line">FileFilter ff=<span class="keyword">new</span> <span class="title class_">bianlimulu</span>(); <span class="comment">/*利用多态创建对象*/</span>  </span><br><span class="line"><span class="keyword">for</span>(File a:dir)&#123; <span class="comment">/*遍历数组元素*/</span>  </span><br><span class="line">	<span class="keyword">if</span>(ff.accept(a))&#123; <span class="comment">/*如果末尾是.java*/</span>  </span><br><span class="line">		System.out.println(a); <span class="comment">/*输出*/</span>  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/*F:\\abc3.java*/</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<p>方法二：对方法一种，不再单独写一个类，而是用内部类来实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bianlimulu</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;  </span><br><span class="line">File file=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:&quot;</span>);  </span><br><span class="line">File [] list=file.listFiles();  </span><br><span class="line">FileFilter ff=<span class="keyword">new</span> <span class="title class_">FileFilter</span>()&#123;  </span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File pathname)</span> &#123;  </span><br><span class="line">	<span class="keyword">return</span> pathname.getName().endsWith(<span class="string">&quot;.java&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">for</span>(File f:list)&#123;  </span><br><span class="line">	<span class="keyword">if</span> (ff.accept(f)) &#123;  </span><br><span class="line">		System.*out*.println(f);  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="字节流和字符流"><a href="#字节流和字符流" class="headerlink" title="字节流和字符流"></a>字节流和字符流</h2><h3 id="IO的分类"><a href="#IO的分类" class="headerlink" title="IO的分类"></a>IO的分类</h3><blockquote>
<p>输入流：把数据从其他设备上读取到内存中</p>
<p>输出流：把数据从内存中写出到其他设备</p>
</blockquote>
<h3 id="字节流和字符流-1"><a href="#字节流和字符流-1" class="headerlink" title="字节流和字符流"></a>字节流和字符流</h3><blockquote>
<p>字节流：以字节为单位，读写数据</p>
<p>字符流：以字符为单位，读写数据</p>
</blockquote>
<h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><ol>
<li> OutputStream类是一个抽象类，表示所有字节的输出流的父类。</li>
</ol>
<blockquote>
<p>导入java.io.FileOutputStream;必须写在try语句中，或者抛出异常IOException。</p>
<p>File dir=new File(“E:\\aaa.txt”);</p>
<p>FileOutputStream fos=new FileOutputStream(dir,true);</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image035.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</blockquote>
<p>一次存放多个字节</p>
<blockquote>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image036.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</blockquote>
<ol>
<li> InputStream类是一个抽象类，表示所有字节的输出流的父类。</li>
</ol>
<blockquote>
<p>导入java.io.FileInputStream;必须写在try语句中，或者抛出异常IOException。</p>
<p>File dir=new File(“E:\\aaa.txt”);</p>
<p>FileInputStream fos=new FileInputStream(dir);</p>
</blockquote>
<p>读一个字符</p>
<blockquote>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image037.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</blockquote>
<h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><ol>
<li> 字符输出流</li>
</ol>
<blockquote>
<p>当用字节流读写文件时，可能会遇到一个问题，就是遇到中文字符时，会显示乱码，这个时候可以用字符流来读取文件</p>
<p>字符输出流：Reader类是一个抽象类，用来读取文件内容，常用得一个子类就是FileReader，导入java.io.FileReader；</p>
<p>字符输入流：Writer类是一个抽象类，用来读取文件内容，常用得一个子类就是FileReader，导入java.io.FileWriter；</p>
<p>1构造方法</p>
<p>public FileWriter(File file);以File类对象为参数创建输出流</p>
<p>public FileWriter(String filename,boolean append);以文件名为参数，创建输出流，每次都是先把文件清空，在往里写内容。第二个参数代表是否追加，即每次写的时候是在文件后面追加内容，还是先清空，再重写，如果是true,则是追加，false是清空重写，默认是false.</p>
</blockquote>
<ol>
<li> 字符输入流</li>
</ol>
<blockquote>
<p>导入java.io.FileReader；用来读取文件内容。</p>
<p>1，构造方法</p>
<p>（1）public FileReader(File file)；参数为File类对象，创建一个字符输入流。</p>
<p>（2）public FileReader(String filename);参数为文件名，创建一个字符输入流。</p>
<p>2.读取字符数据</p>
<p>（1）read();一次读取一个字符</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image038.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>(2)read(char[] c);一次读取一个字符数组</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image039.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</blockquote>
<h3 id="关闭和刷新机制"><a href="#关闭和刷新机制" class="headerlink" title="关闭和刷新机制"></a>关闭和刷新机制</h3><blockquote>
<p>我们在利用输出流写东西时，如果不调用close()方法，所写的内容是无法写出到文件上的，但是调用了close()方法，那么就无法再继续写内容，这个时候可以用刷新机制flush()，调用flush()方法，可以将之前写的内容都呈现在文件中。</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image040.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><strong>文件输出：我爱你</strong></p>
</blockquote>
<h3 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h3><p>缓冲流也就高效流。基本流中，每次读一次数据，写一次数据，频繁的IO操作，会降低程序运行的效率，缓冲流就是在创建流对象的时候，会创建一个缓冲区，通过缓冲区，将数据暂存在缓冲区，从而提高读写的效率。</p>
<p>1.字节缓冲流：</p>
<p>（1）字节缓冲输入流：BufferedInputStream(new FileInputSream())</p>
<p>（2）字节缓冲输出流：BufferedOutputStream(new OutputFormat</p>
<p>​    putStream())</p>
<p>2.字符缓冲流</p>
<p>（1）字符缓冲输入流：BufferedReader(new FileReader())</p>
<p>（2）字符缓冲输出流：BufferedWriter(new FileWriter())</p>
<h3 id="效率测试字节缓冲流"><a href="#效率测试字节缓冲流" class="headerlink" title="效率测试字节缓冲流"></a>效率测试字节缓冲流</h3><p>（1）基本字节流</p>
<blockquote>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image041.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</blockquote>
<p>运行结果：224ms</p>
<p>（2）缓冲流</p>
<blockquote>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image042.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</blockquote>
<p>运行结果：3ms</p>
<p>（1）基本字符流</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image043.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>运行结果：45ms</p>
<p>（2）字符缓冲流</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image044.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>运行结果：17ms</p>
<h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><blockquote>
<p>程序中，读写的文件默认是utf-8，但是往往有些时候文件并不是utf-8而是GBK或者其他编码，这个时候程序在读写时可能会出错，这个时候可以用转换流来制定读取的文件编码</p>
</blockquote>
<p>InputStreamReader类：它读取字节，并按照指定编码读取。</p>
<p>（1）构造方法：</p>
<p>public InputStramReader(InputStream in,String charsetName);创建一个指定字符集的字符流。</p>
<p>（2）指定编码读取</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image045.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>2.OutputStreamWriter:写出字节，按照指定编码</p>
<p>（1）构造方法</p>
<p>public OutputStreamWriter(OutputStream in);创建一个默认字符集的字符流</p>
<p>public OutputStramWriter(OutputStream in,String charsetName);创建一个指定字符集的字符流。</p>
<p>指定编码写出</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image046.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p>一个类对象要想序列化，这个类定义时必须实现一个接口Serializable，导入java.io.Serializable;</p>
<p>一、ObjectOutputStream类:序列化</p>
<p>构造方法：public ObjectOutputStream(outputStream out);</p>
<p>导入java.io.ObjectOutputStream;</p>
<p>1.定义一个序列化的类</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image047.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>2.在测试类里写出对象方法：writeObject()</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image048.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ol>
<li> ObjectInputStream类:反序列化</li>
</ol>
<p>构造方法：public ObjectInputStream(inputStream in);</p>
<p>导入java.io.ObjectInputStream;</p>
<p>读取对象序列化文件调用readObject()方法，必须抛出异常ClassNotFoundException；</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image049.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="属性集"><a href="#属性集" class="headerlink" title="属性集"></a>属性集</h2><p>导入java.util.Properties；使用键值对结果来存储数据，每一个键跟值都是字符串。</p>
<p>构造方法：</p>
<p>public Properties();</p>
<h3 id="基本的存储方式"><a href="#基本的存储方式" class="headerlink" title="基本的存储方式"></a>基本的存储方式</h3><blockquote>
<p>public object setProperty(String key,String value);保存一对的属性</p>
<p>public String getProperty(String key);通过键获取对应的属性值</p>
<p>public Set&lt;String&gt; stringPropertyNames();获取所有键的名称</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image050.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</blockquote>
<h3 id="与流有关的方法"><a href="#与流有关的方法" class="headerlink" title="与流有关的方法"></a>与流有关的方法</h3><blockquote>
<p>1.public void load(InputStream in);从字节输入流中读取键值对。</p>
</blockquote>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image051.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ol>
<li> 前提是1.txt的文本存储内容为：</li>
</ol>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image052.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>2.public void store(OutputStream out,String comment );将属性集内容写出到文本文件中。</p>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image053.jpg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="网络通讯协议"><a href="#网络通讯协议" class="headerlink" title="网络通讯协议"></a>网络通讯协议</h2><p>通过计算机网络可以使用多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时要遵守一定的规则，被称为网络通讯协议，它对数据的传输格式、传输速率、传输步骤等做了统一的规定，通信双方必须同时遵守才能完成数据的传输和交换。</p>
<p><strong>TCP/IP协议</strong>：传输控制协议。是面向连接的通信协议，即在传输之前，发送端和接收端建立连接，然后才传输数据，它提供了两台计算机之间可靠无差错的数据传输。三次握手：在发送端发送数据的准备阶段，客户端与服务器之间有三次交互，以保证连接的可靠。</p>
<p>第一次握手：客户端向服务器发送连接请求，等待服务器确认。</p>
<p>第二次握手：服务器端向客户端回送一个响应，通知客户端收到了连接请求。</p>
<p>第三次握手：客户端再次向服务器端发送确认信息，确认连接。</p>
<p>完成三次握手，客户端和服务器端就可以开始进行数据传输了，由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛。</p>
<p><strong>UDP协议：</strong>用户数据报协议。无连接协议，数据发送端和接收端不建立连接，即当一台计算机向另一台计算机发送数据时，发送端不用确认接收端是否存在，就直接发送数据，同样，如果接收端接收到数据了，它也不会向发送端反馈是否收到数据。由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP。</p>
<p>特点：数据被限制在64kb以内，超出这个范围就不能发送了。</p>
<h3 id="网络编程的三要素"><a href="#网络编程的三要素" class="headerlink" title="网络编程的三要素"></a>网络编程的三要素</h3><ol>
<li><p> 协议：TCP/IP或UDP等等。</p>
</li>
<li><p> IP地址：用来给一个网络中的计算机设备的唯一编号。IP地址分类主要分为IPV4和IPV6</p>
</li>
<li><p> 端口号：每台计算机都有很多进程，如果说IP地址可以唯一的标识网络中的电脑，那么端口号就可以唯一的标识电脑中的进程（应用程序）。</p>
</li>
</ol>
<blockquote>
<p>端口号一般用两个字节来表示，取值范围0~65535.</p>
</blockquote>
<p>利用协议+IP地址+端口号三元组合，就可以唯一的标识网络中的进程了。</p>
<h3 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h3><p>两端（客户端和服务器端）通信时的步骤：</p>
<ol>
<li><p> 服务器端程序，需要先启动，等待客户端的连接。</p>
</li>
<li><p> 客户端主动去连接服务器端，连接成功后才能通信，服务器端不可以主动连接客户端。</p>
</li>
</ol>
<p>在Java中，提供了两个类用于实现TCP通信程序：</p>
<ol>
<li><p> 客户端：导入java.net.Scoket;创建Socket类对象，向服务端发出连接请求，服务端相应请求，两者连接开始通信。</p>
</li>
<li><p> 服务器端：导入java.net.ServerSocket；创建ServerSocket对象，相当于开启一个服务，等待客户端的连接。</p>
</li>
</ol>
<h3 id="客户端Socket类"><a href="#客户端Socket类" class="headerlink" title="客户端Socket类"></a>客户端Socket类</h3><blockquote>
<p>1.构造方法：public Socket(String host,int port);参数host代表的是要连接的服务器端的IP地址，port代表的指定的端口号。127.0.0.1代表的是本机地址。</p>
<p>2.成员方法：</p>
<p>（1）public InputStream getInputStream();返回输入流</p>
<p>（2）public OutputStream getOutputStream();返回输出流</p>
<p>（3）public void close();关闭套接字</p>
<p>（4）public void shutdownOutput();禁用此套接字的输出流。</p>
</blockquote>
<h3 id="服务器端ServerSocket类"><a href="#服务器端ServerSocket类" class="headerlink" title="服务器端ServerSocket类"></a>服务器端ServerSocket类</h3><blockquote>
<p>1.构造方法：public ServerSocket(int port);port代表的指定的端口号。</p>
<p>2.成员方法：</p>
<p>（1）public Socket accept();侦听并接收连接，返回一个新的Socket对象，用于和客户端实现通信。</p>
</blockquote>
<h3 id="网络程序案例"><a href="#网络程序案例" class="headerlink" title="网络程序案例"></a>网络程序案例</h3><p><strong>服务器端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fuwuqiduan</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String\[\] args)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">	<span class="comment">//创建指定端口号  </span></span><br><span class="line">	ServerSocket ss=<span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">6666</span>);  </span><br><span class="line">	<span class="comment">/*侦听并接收连接*/</span>  </span><br><span class="line">	Socket server=ss.accept();  </span><br><span class="line">	<span class="comment">/*返回输入流*/</span>  </span><br><span class="line">	InputStream is=server.getInputStream();  </span><br><span class="line">	<span class="type">byte</span> [] b=<span class="keyword">new</span> <span class="title class_">byte</span> [<span class="number">100</span>];  </span><br><span class="line">	<span class="comment">/*输入流读取返回到数组b*/</span>  </span><br><span class="line">	is.read(b);  </span><br><span class="line">	<span class="keyword">for</span>(<span class="type">byte</span> i:b)&#123;  </span><br><span class="line">		System.out.print((<span class="type">char</span>)i);  </span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="comment">/*输出流*/</span>  </span><br><span class="line">	OutputStream out=server.getOutputStream();  </span><br><span class="line">	out.write(<span class="string">&quot;i am fine thanks&quot;</span>.getBytes(StandardCharsets.*UTF\_8*));  </span><br><span class="line">	out.close();  </span><br><span class="line">	ss.close();  </span><br><span class="line">	is.close();  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/*alice,how are you*/</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>客户端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">kehuduan</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">	<span class="comment">/*创建客户端对象*/</span>  </span><br><span class="line">	Socket client=<span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6666</span>);  </span><br><span class="line">	<span class="comment">/*创建输出流*/</span>  </span><br><span class="line">	OutputStream os=client.getOutputStream();  </span><br><span class="line">	os.write(<span class="string">&quot;alice,how are you&quot;</span>.getBytes(StandardCharsets.UTF_8));  </span><br><span class="line">	<span class="comment">/*创建输入流*/</span>  </span><br><span class="line">	InputStream in=client.getInputStream();  </span><br><span class="line">	<span class="type">byte</span> [] b=<span class="keyword">new</span> <span class="title class_">byte</span> [<span class="number">20</span>];  </span><br><span class="line">	in.read(b);  </span><br><span class="line">	<span class="keyword">for</span>(<span class="type">byte</span> i:b)&#123;  </span><br><span class="line">		System.*out*.print((<span class="type">char</span>)i);  </span><br><span class="line">	&#125;  </span><br><span class="line">	os.close();  </span><br><span class="line">	client.close();  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="XML文件操作"><a href="#XML文件操作" class="headerlink" title="XML文件操作"></a>XML文件操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dom</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> IOException, DocumentException &#123;  </span><br><span class="line"><span class="comment">/*创建XML对象*/</span>  </span><br><span class="line">SAXReader reader=<span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*读取指定XML文件*/</span>  </span><br><span class="line">Document docx=reader.read(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\\\Users\\\\Administrator\\\\Desktop\\\\网课练习\\\\XML操作\\\\新建文本文档.XML&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取根节点*/</span>  </span><br><span class="line">Element gen=docx.getRootElement();  </span><br><span class="line">System.*out*.println(gen.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取父节点下第一个子节点返回类型为Element*/</span>  </span><br><span class="line">Element zi1=gen.element(<span class="string">&quot;author&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取根节点下所有节点*/</span>  </span><br><span class="line">List list1= gen.elements(<span class="string">&quot;author&quot;</span>);  </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list1.size();i++)&#123;  </span><br><span class="line">	Element e1=(Element) (list1.get(i));  </span><br><span class="line">	System.*out*.println(e1.getText());  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*向指定的节点内添加一个节点*/</span>  </span><br><span class="line">Element son=zi1.addElement(<span class="string">&quot;age&quot;</span>);  </span><br><span class="line">son.setText(<span class="string">&quot;female&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改节点名*/</span>  </span><br><span class="line">son.setName(<span class="string">&quot;性别&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取当前节点的父节点 */</span>  </span><br><span class="line"><span class="comment">/*删除当前节点的子节点*/</span>  </span><br><span class="line">Element p1=gen.getParent();  </span><br><span class="line">p1.remove(gen);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*给节点添加属性*/</span>  </span><br><span class="line">gen.addAttribute(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;12345&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*节点修改属性*/</span>  </span><br><span class="line">gen.setAttributeValue(<span class="string">&quot;class&quot;</span>,<span class="string">&quot;4567&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*节点删除属性*/</span>  </span><br><span class="line">gen.remove(gen.attribute(<span class="string">&quot;class&quot;</span>));  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建输出文本字符集对象*/</span>  </span><br><span class="line">OutputFormat f=OutputFormat.createPrettyPrint();</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定用什么字符集保存  </span></span><br><span class="line">f.setEncoding(<span class="string">&quot;utf-8&quot;</span>);  </span><br><span class="line">FileOutputStream fo=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\\\Users\\\\Administrator\\\\Desktop\\\\网课练习\\\\XML操作\\\\新建文本文档.XML&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建XMLWrite对象，第一个属性是字符编码，第二个属性是文件*/</span>  </span><br><span class="line">XMLWriter w=<span class="keyword">new</span> <span class="title class_">XMLWriter</span>(fo,f);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将document对象写入到硬盘  </span></span><br><span class="line">w.write(docx);  </span><br><span class="line"><span class="comment">//关闭writer对象  </span></span><br><span class="line">fo.close();  </span><br><span class="line">w.close();  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Excel文件操作"><a href="#Excel文件操作" class="headerlink" title="Excel文件操作"></a>Excel文件操作</h2><h3 id="常见操作类：针对03版本，07版本只需把Hssp改为XSSf即可"><a href="#常见操作类：针对03版本，07版本只需把Hssp改为XSSf即可" class="headerlink" title="常见操作类：针对03版本，07版本只需把Hssp改为XSSf即可"></a>常见操作类：针对03版本，07版本只需把Hssp改为XSSf即可</h3><ol>
<li><p> HSSFWorkBook：Excel的文档对象</p>
</li>
<li><p> HSSFSheet：Excel文档中Sheet类</p>
</li>
<li><p> HSSRRow：Excel的行类</p>
</li>
<li><p> HSSFCell：Excel的列类</p>
</li>
<li><p> HSSFFont：Ecel的字体类</p>
</li>
<li><p> HSSFCellStyle：单元格样式表</p>
</li>
</ol>
<h3 id="创建一个Excel文件"><a href="#创建一个Excel文件" class="headerlink" title="创建一个Excel文件"></a>创建一个Excel文件</h3><blockquote>
<p>HSSFWorkbook wb=new HSSFWorkbook();/*创建一个Excel操作对象*/</p>
<p>FileOutputStream fos=new FileOutputStream(“D:\\a1.xls”);<br>wb.write(fos);<br>fos.close();<br>wb.close();</p>
</blockquote>
<h3 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建一个Excel操作对象*/</span>  </span><br><span class="line">HSSFWorkbook wb=<span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>(); <span class="comment">/*创建一个Excel操作对象*/</span>  </span><br><span class="line">FileOutputStream fos=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\\\a1.xls&quot;</span>);  </span><br><span class="line">wb.write(fos);  </span><br><span class="line">fos.close();  </span><br><span class="line">wb.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*读入一个Excel对象*/</span>  </span><br><span class="line">FileInputStream fis=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\\\a1.xls&quot;</span>);  </span><br><span class="line">wb=<span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>(fis);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建一个sheet表*/</span>  </span><br><span class="line">wb.createSheet(<span class="string">&quot;2022.9.14&quot;</span>);  </span><br><span class="line">fos=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\\\a1.xls&quot;</span>);  </span><br><span class="line">wb.write(fos);  </span><br><span class="line">fos.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建一个sheet操作对象，定位到第一张sheet*/</span>  </span><br><span class="line">Sheet sheet= wb.getSheetAt(<span class="number">0</span>);  </span><br><span class="line">System.out.println(sheet.getSheetName());<span class="comment">/*获取sheet的名字并输出*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加行createSheet()*/</span>  </span><br><span class="line">Row r=sheet.getRow(<span class="number">0</span>);  </span><br><span class="line"><span class="keyword">if</span>(r==<span class="literal">null</span>)&#123;  </span><br><span class="line">sheet.createRow(<span class="number">0</span>);  </span><br><span class="line">System.out.println(<span class="string">&quot;创建了第一行&quot;</span>);  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">sheet.getRow(<span class="number">0</span>);  </span><br><span class="line">System.out.println(<span class="string">&quot;获取了第一行&quot;</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建多个行*/</span>  </span><br><span class="line">Row [] row=<span class="keyword">new</span> <span class="title class_">Row</span>[<span class="number">3</span>];  </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&amp;lt;<span class="number">3</span>;i++)&#123;  </span><br><span class="line">row [i]=sheet.createRow(i);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建单元格*/</span>  </span><br><span class="line">r=sheet.getRow(<span class="number">0</span>);  </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;  </span><br><span class="line">r.createCell(i).setCellValue(<span class="string">&quot;数据&quot;</span>+i);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除行内容，保留行*/</span>  </span><br><span class="line">r=sheet.getRow(<span class="number">0</span>);  </span><br><span class="line">sheet.removeRow(r);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*直接删除行*/</span>  </span><br><span class="line">sheet.shiftRows(<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>);<span class="comment">/*第一个参数是起始行，第二个参数是结尾行，-1代表下面的行上移*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*读取单元格名称*/</span>  </span><br><span class="line">r=sheet.getRow(<span class="number">0</span>);  </span><br><span class="line">Cell cell=r.getCell(<span class="number">0</span>);  </span><br><span class="line">System.*out*.println(cell.getStringCellValue());<span class="comment">/*输出单元格内容*/</span></span><br><span class="line"></span><br><span class="line">fos=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\\\a1.xls&quot;</span>);  </span><br><span class="line">wb.write(fos);  </span><br><span class="line">wb.close();  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="java爬虫"><a href="#java爬虫" class="headerlink" title="java爬虫"></a>java爬虫</h2><h3 id="Jsop类"><a href="#Jsop类" class="headerlink" title="Jsop类"></a>Jsop类</h3><blockquote>
<p>主要是来完成对HTML的解析</p>
<p>parse（File in,String charctName）;解析HTML文件</p>
<p>connect(String url);通过网络地址获取Document对象</p>
</blockquote>
<h3 id="Document类"><a href="#Document类" class="headerlink" title="Document类"></a>Document类</h3><blockquote>
<p>获取整个html文档存放在Document类对象里，通过它可以获取Element和Elements对象</p>
<p>getElementById(String id);根据id属性获取唯一的Element对象。</p>
<p>getElementsByTag(String tagName);通过标签获取元素对象的集合。</p>
<p>getElementsByAttribute(String key);根据属性名称获取元素集合。</p>
<p>getElementsByAttributeValue(String key,String value);根据属性值获取元素的集合</p>
</blockquote>
<h3 id="解析HTML"><a href="#解析HTML" class="headerlink" title="解析HTML"></a>解析HTML</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String url=<span class="string">&quot;https://www.51miz.com/sound/?utm\_term=8027759&amp;utm\_source=baidu2&amp;bd\_vid=11472151438253179744&quot;</span>;  </span><br><span class="line">Document att= Jsoup.connect(url).get();  </span><br><span class="line">Elements sound=att.getElementsByTag(<span class="string">&quot;source&quot;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="Element类"><a href="#Element类" class="headerlink" title="Element类"></a>Element类</h3><blockquote>
<p>1.getElementByid(String id);根据id属性获取唯一的Element对象。</p>
<p>2.getElementsByTag(String tagName);通过标签获取元素对象的集合。</p>
<p>3.getElementsByAttribute(String key);根据属性名称获取元素集合。</p>
<p>4.getElementsByAttributeValue(String key,String value);根据属性值获取元素的集合。</p>
<p>String attr(String key);根据属性名称获取属性的值。</p>
<p>String text();获取文本内容。</p>
<p>String html();获取标签体的所有内容，包含标签。</p>
</blockquote>
<h3 id="爬取图片"><a href="#爬取图片" class="headerlink" title="爬取图片"></a>爬取图片</h3><p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image054.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="爬取视频"><a href="#爬取视频" class="headerlink" title="爬取视频"></a>爬取视频</h3><p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image055.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="爬取音频"><a href="#爬取音频" class="headerlink" title="爬取音频"></a>爬取音频</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">String url=<span class="string">&quot;https://www.51miz.com/sound/?utm\_term=8027759&amp;utm\_source=baidu2&amp;bd\_vid=11472151438253179744&quot;</span>;  </span><br><span class="line">Document att= Jsoup.connect(url).get();  </span><br><span class="line">Elements sound=att.getElementsByTag(<span class="string">&quot;source&quot;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sound.size(); i++) &#123;  </span><br><span class="line">	Element e=sound.get(i);  </span><br><span class="line">	String s=e.attr(<span class="string">&quot;src&quot;</span>);  </span><br><span class="line">	<span class="keyword">if</span>(!s.startsWith(<span class="string">&quot;http&quot;</span>))&#123;  </span><br><span class="line">		s=<span class="string">&quot;http:&quot;</span>+s;  </span><br><span class="line">	&#125;  </span><br><span class="line">	URL videoUrl=<span class="keyword">new</span> <span class="title class_">URL</span>(s);  </span><br><span class="line">	String path=<span class="string">&quot;E:\\\\迅雷下载\\\\下载&quot;</span>+i+<span class="string">&quot;.mp3&quot;</span>;  </span><br><span class="line">	File file=<span class="keyword">new</span> <span class="title class_">File</span>(path);  </span><br><span class="line">	FileUtils.*copyURLToFile*(videoUrl,file);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>反射是能够直接操作类中所有的内部属性和方法</p>
</blockquote>
<h3 id="为什么不直接new对象而是使用反射呢"><a href="#为什么不直接new对象而是使用反射呢" class="headerlink" title="为什么不直接new对象而是使用反射呢"></a>为什么不直接new对象而是使用反射呢</h3><blockquote>
<p>静态编译：在<strong>编译</strong>时就已经给定了类型，绑定了对象</p>
<p>Student stu=new Student();</p>
<p>动态编译：在<strong>运行</strong>时才给定类型，绑定对象。</p>
<p>动态编译最大限度的发挥了java的灵活性，体现了多态的应用</p>
<p>动态编译的缺点：对性能影响大</p>
</blockquote>
<h3 id="反射机制的应用"><a href="#反射机制的应用" class="headerlink" title="反射机制的应用"></a>反射机制的应用</h3><blockquote>
<p><strong>java反射机制提供的功能</strong></p>
</blockquote>
<ol>
<li><p> 在运行时判断任意一个对象所属的类</p>
</li>
<li><p> 在运行时构造任意一个类的对象</p>
</li>
<li><p> 在运行时判断任意一个类所具有的成员变量和方法</p>
</li>
<li><p> 在运行时获取泛型类型</p>
</li>
<li><p> 在运行时调用任意一个对象的成员变量和方法</p>
</li>
<li><p> 在运行时处理注释</p>
</li>
<li><p> 生成状态代理（spring底层构造出的一个框架—应用工具）</p>
</li>
</ol>
<blockquote>
<p><strong>反射相关的主要API</strong></p>
</blockquote>
<ol>
<li><p>java.lang.Class:代表一个类（生成的对象叫做类对象）</p>
<ol>
<li> 第一种方法：通过class关键字获取类对象（多用于知道是什么类型或传参）</li>
</ol>
</li>
</ol>
<blockquote>
<p>xcc xcc=new xcc();</p>
<p>Class&lt;?&gt; clazz=xcc.class;</p>
</blockquote>
<ol>
<li> 第三种方法：通过class对象的getClass方法（多用于获取字节码的方式）</li>
</ol>
<blockquote>
<p>xcc xcc=new xcc();</p>
<p>Class clayy=xcc.getClass();</p>
</blockquote>
<ol>
<li> 第二种方法：通过class类的类方法forName来获取类对象（多用于指配文件，将类名定义在配置文件中，便于利用Java的反射机制生成类对象加载类）</li>
</ol>
<blockquote>
<p>Class claxx= Class.<em>forName</em>(“包名”);</p>
</blockquote>
<ol>
<li> reflect包</li>
</ol>
<blockquote>
<p><strong>class类+java.lang.reflect=反射</strong></p>
</blockquote>
<p>java.lang包下的Class&lt;T&gt;表示一个正在运行的java应用程序中的类和接口是Reflection的起源</p>
<p>java.lang.reflect包下：</p>
<p>Field类：代表类对象的成员变量</p>
<p>Method类：代表类对象的方法</p>
<p>Constructor类：代表类的构造方法</p>
<p>Array类：提供了动态创建数组，以及访问数组的元素的静态方法</p>
<ol>
<li> Class类获取class的实例</li>
</ol>
<blockquote>
<p>通常情况下我们通过new Object来生成一个类的实例对象，但是有的时候没办法直接new我们就必须通过反射动态生成</p>
<p>实例化无参构造方法的对象：</p>
<p>Class.newInstance（）；</p>
<p>Class.getConstructor(new Class[]{}).newInstance(new Object[]{})</p>
</blockquote>
<p>实例化有参构造方法</p>
<p>Constructor constr=classtype.getConstructor(new Class[]{String.class,int.class,boolean.class});</p>
<p>zhi cc=(zhi) constr.newInstance(new Object[]{“zhangsan”,18,true});</p>
<p>调用构造方法</p>
<p>获取本身setName的所有方法</p>
<blockquote>
<p>Method mee=classtype.getDeclaredMethod(“setName”,</p>
<p>String.class);</p>
<p>System.<em>out</em>.println(mee.getName());</p>
</blockquote>
<p>获取所有公有化的方法</p>
<p>Method[] mee=classtype.getMethods()</p>
<p>调用方法</p>
<p>met2.invoke(构造实例,”setName”);</p>
<p>获取属性</p>
<p>Field fi2= classtype.getField(“name”);</p>
<p>field fi=clazz.getDeclaredField()</p>
<p>Field[] fi=clazz.getFields()</p>
<h3 id="class类常用的方法"><a href="#class类常用的方法" class="headerlink" title="class类常用的方法"></a>class类常用的方法</h3><p>获取空参构造方法</p>
<blockquote>
<p>Constructor con=clazz.getConstructor().newInstance()</p>
<p>Constructor con=clazz.getConstructor(new Class[]{})</p>
</blockquote>
<p>获取有参构造</p>
<blockquote>
<p>Constructor con=clazz.getCountructor(new Class[]{String.class,int.class})</p>
</blockquote>
<p>获取所有公共方法</p>
<p>Method me=clazz.getMethod(“toString”,new Class[]{});</p>
<p>获取所有本身的方法</p>
<p>Method me=clazz.getMethods</p>
<h3 id="类的加载与classLoader（类加载器）"><a href="#类的加载与classLoader（类加载器）" class="headerlink" title="类的加载与classLoader（类加载器）"></a>类的加载与classLoader（类加载器）</h3><ol>
<li> 类的加载过程</li>
</ol>
<blockquote>
<p><strong>当程序主动使用某个类的时候。如果该类还未被加载到内存中则系统会通过三步进行该类的初始化</strong></p>
</blockquote>
<ol>
<li><p> 将类的class文件读入到内存中，并为之创建一个java.lang.Class对象，此过程由类加载器完成</p>
</li>
<li><p> 将类的二进制数据合并到JRE当中</p>
</li>
<li><p> jvm负责对类进行初始化</p>
</li>
</ol>
<p>&nbsp;</p>
<ol>
<li><p>各个步骤具体操作</p>
<ol>
<li><p> 加载：将class文件字节码内容加载到内存当中，并将这些静态数据转换成方法区的运行时数据接口，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口（引用地址）。所有需要访问和使用类数据的只能通过这个class对象。这个加载过程需要加载器的参与</p>
</li>
<li><p>链接：将java类的二进制代码合并到JVM的运行状态之中的过程</p>
<ol>
<li><p> ·验证：确保加载的类信息符合JVM规范，例如：以café开头，没有安全方面问题</p>
</li>
<li><p> 准备：正式为变量（static）分配内存并设置变量默认初始值的阶段，这些内存都将在方法区进行分配</p>
</li>
<li><p> 解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程</p>
</li>
</ol>
</li>
<li><p>初始化</p>
<ol>
<li><p> 执行类构造器&lt;clinit&gt;()方法的过程。类构造器&lt;clinit&gt;()方法是由编译器自动收集类中所有变量的赋值动作和静态代码块儿中的语句合并产生的</p>
</li>
<li><p> 当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化</p>
</li>
<li><p> 虚拟机会保证一个类的&lt;clinit&gt;()方法在多线程环境中被正确加锁和同步</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="JDBC技术"><a href="#JDBC技术" class="headerlink" title="JDBC技术"></a>JDBC技术</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>jdbc就是java操作数据库的一套API</p>
<p>全称（Java DataBase Connectivity）</p>
</blockquote>
<h3 id="JDBC本质"><a href="#JDBC本质" class="headerlink" title="JDBC本质"></a>JDBC本质</h3><blockquote>
<p>sun公司定义的一套关系型数据库准则，即接口，各个厂商去实现这个接口，提供数据库的驱动jar包，使用JDBC实际上执行的就是jar中的实现类</p>
</blockquote>
<h3 id="JDBC-API详解"><a href="#JDBC-API详解" class="headerlink" title="JDBC API详解"></a>JDBC API详解</h3><blockquote>
<p>DriverManager（驱动管理类）</p>
</blockquote>
<ol>
<li> 注册驱动</li>
</ol>
<blockquote>
<p>Class.forName(“com.mysql.jdbc.Driver”);</p>
<p>可以省略</p>
</blockquote>
<ol>
<li> 获取链接</li>
</ol>
<blockquote>
<p>Connection lian=DriverManager.getConnection(String url,String use,int password)</p>
</blockquote>
<p>.getConnection属性值</p>
<ol>
<li> url链接路径</li>
</ol>
<blockquote>
<p>语法：jdbc:mysql://ip地址:端口号/数据库名称</p>
<p>示例：jdbc:mysql://127.0.0.1:3306/biglist</p>
</blockquote>
<ol>
<li> Connection（连接数据库）</li>
</ol>
<p>&nbsp;</p>
<ol>
<li> 获取执行SQL的对象</li>
</ol>
<blockquote>
<p>con.createStatement()</p>
</blockquote>
<ol>
<li> 事务管理</li>
</ol>
<blockquote>
<p>开启事务：setAutoCommit(boolean autoCommit);填true表示自动提交事务，false表示手动提交</p>
<p>提交事务：commit()</p>
<p>回滚事务：rollback()</p>
<p>PreparedStatement</p>
<p>PreparedStatement作用：</p>
<p>预编译SQL语句对象并切能执行：预防SQL注入问题</p>
</blockquote>
<ol>
<li> Statement(执行SQL语句)</li>
</ol>
<p>&nbsp;</p>
<ol>
<li> ResultSet .executeQuery（sql）（结果集对象）</li>
</ol>
<blockquote>
<p>封装DQL查询语句的结果</p>
<p>ResultSet .executeQuery（sql）执行DQL语句，返回ResultSet对象</p>
<p>获取查询结果</p>
<p>boolean next（）；</p>
</blockquote>
<ol>
<li><p> 将光标从前位置向前移动一行</p>
</li>
<li><p> 判断当前行为有效行</p>
</li>
</ol>
<blockquote>
<p>返回值true和false</p>
<p>xxx getXxx（参数）：获取数据</p>
<p>xxx：数据类型；如int getInt（参数）；String getString（参数）</p>
<p>参数：</p>
<p>int：列的编号，从1开始</p>
<p>String：列的名称</p>
</blockquote>
<ol>
<li> int executeUpdate（sql）：执行DML、DDL语句</li>
</ol>
<blockquote>
<p>executeQuery <br>用于产生单个结果集的语句，例如 SELECT 语句。 被使用最多的执行 SQL 语句的方法是 executeQuery。这个方法被用来执行 SELECT 语句，它几乎是使用最多的 SQL 语句。  </p>
<p>executeUpdate<br>用于执行 INSERT、UPDATE 或 DELETE 语句以及 SQL DDL（数据定义语言）语句，例如 CREATE TABLE 和 DROP TABLE。INSERT、UPDATE 或 DELETE 语句的效果是修改表中零行或多行中的一列或多列。executeUpdate 的返回值是一个整数，指示受影响的行数（即更新计数）。对于 CREATE TABLE 或 DROP TABLE 等不操作行的语句，executeUpdate 的返回值总为零。</p>
</blockquote>
<h3 id="csp0连接池"><a href="#csp0连接池" class="headerlink" title="csp0连接池"></a>csp0连接池</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">ComboPooledDataSource cpd=new ComboPooledDataSource();</span><br><span class="line"></span><br><span class="line">Connection con= cpd.getConnection();</span><br><span class="line"></span><br><span class="line">等同于</span><br><span class="line"></span><br><span class="line">String url=”jdbc:mysql:///biglist”;</span><br><span class="line"></span><br><span class="line">String name=”root”;</span><br><span class="line"></span><br><span class="line">String pwd=”510609”;</span><br><span class="line"></span><br><span class="line">Connection con=DriverManager.getConnection(url,name,pwd)</span><br><span class="line"></span><br><span class="line">配置文件：必须放在src里面，并且只能叫c3p0-config.xml</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 默认配置，如果没有指定则使用这个配置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">default-config</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 连接参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span></span><br><span class="line">    jdbc:mysql://localhost:3306/biglist?serverTimezone=Asia/Shanghai</span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>510609<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 连接池参数 --&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--初始化申请的连接数量--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--最大的连接数量--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--超时时间--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">default-config</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">命名的配置,可以通过方法调用实现  </span><br><span class="line"><span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;mySource&quot;</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>510609<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>  </span><br><span class="line">	jdbc:mysql://localhost:3306/a1?characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!-- 如果池中数据连接不够时一次增长多少个 --&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>50<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">named-config</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="DBUtils"><a href="#DBUtils" class="headerlink" title="DBUtils"></a>DBUtils</h3><blockquote>
<p>可以设置查询结果集的封装策略</p>
<p>QueryRunner qr=new QueryRunner(cpd);</p>
</blockquote>
<p>QueryRunner类，用于执行数据库操作</p>
<h4 id="query（con-sql语句，查询操作）用于执行查询"><a href="#query（con-sql语句，查询操作）用于执行查询" class="headerlink" title="query（con,sql语句，查询操作）用于执行查询"></a>query（con,sql语句，查询操作）用于执行查询</h4><blockquote>
<p>ArrayHandler:把结果集中的第一行数据转成对象数组。</p>
<p>ArrayListHandler:把结果集中的每一行数据都转成一个对象数组，再存放到 List中。</p>
<p>BeanHandler:将结果集中的第一行数据封装到一个对应的JavaBean实例中。</p>
<p>BeanListHandler:将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</p>
<p>ColumnListHandler:将结果集中某一列的数据存放到List 中。</p>
<p>KeyedHandler:将结果集中的每一行数据都封装到一个Map里，然后再根据指定的 key把每个Map再存放到一个 Map里。</p>
<p>MapHandler:将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</p>
<p>MapListHandler:将结果集中的每一行数据都封装到一个Map 里，然后再存放到List。ScalarHandler:将结果集中某一条记录的其中某一列的数据存成object.</p>
</blockquote>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ComboPooledDataSource cpd=<span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">Connection con= cpd.getConnection();  </span><br><span class="line">QueryRunner qr=<span class="keyword">new</span> <span class="title class_">QueryRunner</span>(cpd);  </span><br><span class="line">String sql=<span class="string">&quot;select * from dz&quot;</span>;  </span><br><span class="line">Listshit list=qr.query(con,sql, <span class="keyword">new</span> <span class="title class_">BeanListHandlershit</span>(shit.class));  </span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>

<p>shit表示javabean实现类：包括getset、空参构造、toString</p>
<h4 id="update（）用于执行增删改"><a href="#update（）用于执行增删改" class="headerlink" title="update（）用于执行增删改"></a>update（）用于执行增删改</h4><blockquote>
<p>ResultSetHandler接口，用于处理Result结果集</p>
</blockquote>
<p>实现类：BeanHandler将结果集中的第一行数据封装在实现类对象中</p>
<blockquote>
<p><img src="/img/JavaSE%E7%AC%94%E8%AE%B0/image056.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</blockquote>
<h2 id="Tomcat配置idea"><a href="#Tomcat配置idea" class="headerlink" title="Tomcat配置idea"></a>Tomcat配置idea</h2><blockquote>
<p><a href="https://baijiahao.baidu.com/s?id=1725595546321519849&wfr=spider&for=pc">如何在 IDEA 中创建并部署 JavaWeb 程序 (baidu.com)</a></p>
</blockquote>
<h2 id="服务器组件Servlet"><a href="#服务器组件Servlet" class="headerlink" title="服务器组件Servlet"></a>服务器组件Servlet</h2><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol>
<li><p> 创建一个java ee项目</p>
</li>
<li><p> 在src中创建一个类并且实现Servlet接口</p>
</li>
<li><p> 实现接口中的抽象方法</p>
</li>
<li><p> 配置Servlet</p>
</li>
</ol>
<blockquote>
<p>在web.xml文件中的web-app标签中写入：</p>
</blockquote>
<p>&lt;servlet&gt;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行原理：</p>
<blockquote>
<p>1.当服务器接收到客户端浏览器的请求后，会解析url路径，获取访问的Servlet的路径</p>
<p>2.查找web.xml中是否有对应的&lt;url-pattern&gt;标签内容</p>
<p>3.如果有则会找到对应的&lt;servlet-class&gt;全类名</p>
<p>4.Tomcat会将字节码文件加载进内存，创建类名的实例化对象</p>
<p>5.调用其方法</p>
</blockquote>
<h3 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h3><p>1.被创建（加载资源）</p>
<p>public void init() {<br>            /*初始化方法，在Servlet创建时执行只会执行一次*/</p>
<p>}</p>
<p>设置什么时候被创建</p>
<p>指定Servlet的创建时机，在web.xml文件的Servlet下创建<br>            1.第一次被访问时创建：&lt;load-on-startup&gt;的值为负数<br>            2.在服务器启动时创建：&lt;load-on-startup&gt;的值为0或者正整数</p>
<p>2.提供服务</p>
<p>public void service() {</p>
<p>​    System.<em>out</em>.println(“hello service”);<br>​            /*提供服务的方法，每一次Servlet被访问时会执行，可执行多次*/<br>​        }</p>
<p>3.被销毁</p>
<p>public void destroy() {<br>            /*销毁方法，在Servlet正常关闭时执行*/</p>
<p>}</p>
<blockquote>
<p>在Servlet被销毁之前执行，一般用于释放资源</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>白学宫主——GUI</title>
    <url>/2023/02/27/JavaGUI%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JavaGUI图形化界面笔记"><a href="#JavaGUI图形化界面笔记" class="headerlink" title="JavaGUI图形化界面笔记"></a>JavaGUI图形化界面笔记</h1><h2 id="常用窗体"><a href="#常用窗体" class="headerlink" title="常用窗体"></a>常用窗体</h2><h3 id="Jframe"><a href="#Jframe" class="headerlink" title="Jframe"></a>Jframe</h3><p>新建Jframe</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">       JFrame jf=<span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;我的第一个界面&quot;</span>);</span><br><span class="line"><span class="comment">/*设置窗体大小和出现的位置*/</span></span><br><span class="line">jf.setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">500</span>,<span class="number">700</span>);</span><br><span class="line"><span class="comment">/*设置窗体是否显示*/</span></span><br><span class="line">jf.setVisible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">/*设置窗体是否可调节（默认可调）*/</span></span><br><span class="line">jf.setResizable(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>   设定窗口关闭方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*隐藏当前窗口，并释放窗体占用的所有资源*/</span></span><br><span class="line">jf.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);</span><br><span class="line"><span class="comment">/*隐藏当前窗口*/</span></span><br><span class="line">jf.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);</span><br><span class="line"><span class="comment">/*结束窗口所在的应用程序*/</span></span><br><span class="line">jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"><span class="comment">/*点击后什么都不做*/</span></span><br><span class="line">jf.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);</span><br></pre></td></tr></table></figure>

<p>设置背景颜色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jf.getContentPane().setBackground(Color.decode(<span class="string">&quot;#dddddd&quot;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="Jdialog（弹窗）"><a href="#Jdialog（弹窗）" class="headerlink" title="Jdialog（弹窗）"></a>Jdialog（弹窗）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JDialog jd=<span class="keyword">new</span> <span class="title class_">JDialog</span>(jf ,<span class="string">&quot;弹窗&quot;</span>);</span><br><span class="line">jd.setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">jd.setVisible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h2 id="常用的面板"><a href="#常用的面板" class="headerlink" title="常用的面板"></a>常用的面板</h2><p>面板也是一种swing容器，他可以作为容器容纳其他组件，但是他也必须放在一个容器内</p>
<h3 id="Jpanel"><a href="#Jpanel" class="headerlink" title="Jpanel"></a>Jpanel</h3><p>Jpanel是最基础的面板，继承自java.awt.Container类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JPanel jp=<span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line">JButton jb=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;登录&quot;</span>);</span><br><span class="line">JButton jb2=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;注册&quot;</span>);</span><br><span class="line">jp.add(jb);</span><br><span class="line">jp.add(jb2);</span><br><span class="line">jf.add(jp);</span><br></pre></td></tr></table></figure>

<h3 id="JscrollPane（滚动面板）"><a href="#JscrollPane（滚动面板）" class="headerlink" title="JscrollPane（滚动面板）"></a>JscrollPane（滚动面板）</h3><p>定义实例：JScrollPane jsp=new JScrollPane(某个继承自JPanel类的实例 pane);<br> 设置初始大小：jsp.setPreferredSize(new Dimension(200,200));</p>
<p>设置滚动条显示和隐藏</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JScrollPane waiceng1=<span class="keyword">new</span> <span class="title class_">JScrollPane</span>(waiceng,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);</span><br></pre></td></tr></table></figure>

<h2 id="常用组件"><a href="#常用组件" class="headerlink" title="常用组件"></a>常用组件</h2><h3 id="标签组件"><a href="#标签组件" class="headerlink" title="标签组件"></a>标签组件</h3><p>类：JLabel</p>
<p>作用：显示文本或者提示信息</p>
<p>构造方法：</p>
<p>new JLabel（）；</p>
<p>new JLabel（Icon icon）；       设置图标</p>
<p>new Jlabel（Icon icon，SwingConstants.CENTER） 设置图标+水平对齐方式</p>
<p>new Jlabel（String str，SwingConstants.CENTER）    设置文字+水平对齐方式</p>
<p>new Jlabel（String str，Icon icon，SwingConstants.CENTER）</p>
<p>设置文字图标+水平对齐方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jf.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);</span><br><span class="line">JLabel jl=<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;我是提示文字&quot;</span>,SwingConstants.);</span><br><span class="line">jf.add(jl);</span><br></pre></td></tr></table></figure>

<h3 id="按钮组件"><a href="#按钮组件" class="headerlink" title="按钮组件"></a>按钮组件</h3><p>类：JButton</p>
<p>构造方法：</p>
<p>new JButton（）；</p>
<p>new JButton(Icon icon);  指定图标</p>
<p>new JButton(String txt);  指定文字</p>
<p>new JButton(Icon icon,String txt);    指定文字和图标</p>
<p>其他方法：</p>
<p>setEnabled(boolean n)  按钮是否可用</p>
<p>setBorderPainted(boolean n)    按钮是否带边框</p>
<p>setToolTipText(String st)     鼠标上移提示文字</p>
<h3 id="单选多选按钮"><a href="#单选多选按钮" class="headerlink" title="单选多选按钮"></a>单选多选按钮</h3><p>单选</p>
<p>new JRadioButton（）；</p>
<p>new JRadioButton（Icon icon）；    设置图标</p>
<p>new JRadioButton（Icon icon，boolean b）  设置图标+是否选中</p>
<p>new JRadioButton（String str，boolean b）      设置文字+是否选中</p>
<p>new JRadioButton（String str，Icon icon，boolean b）</p>
<p>设置文字图标+是否选中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JRadioButton jr=<span class="keyword">new</span> <span class="title class_">JRadioButton</span>(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">JRadioButton jr2=<span class="keyword">new</span> <span class="title class_">JRadioButton</span>(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">ButtonGroup bg=<span class="keyword">new</span> <span class="title class_">ButtonGroup</span>();</span><br><span class="line">bg.add(jr);</span><br><span class="line">bg.add(jr2);</span><br><span class="line">jf.add(jr);</span><br><span class="line">jf.add(jr2);</span><br></pre></td></tr></table></figure>

<p>复选</p>
<p>new JCheckBox（）；</p>
<p>new JCheckBox (Icon icon,boolean b);    指定图标+是否被选中</p>
<p>new JCheckBox (String txt,boolean b);    指定文字+是否被选中</p>
<h3 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h3><p>构造方法</p>
<p>new JComboBox（）；</p>
<p>方法：</p>
<p>addItem：添加下拉内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JComboBox jcb=<span class="keyword">new</span> <span class="title class_">JComboBox</span>();</span><br><span class="line">jcb.addItem(<span class="string">&quot;请选择省份&quot;</span>);</span><br><span class="line">jcb.addItem(<span class="string">&quot;河北&quot;</span>);</span><br><span class="line">jcb.addItem(<span class="string">&quot;河南&quot;</span>);</span><br><span class="line">jf.add(jcb);</span><br></pre></td></tr></table></figure>

<h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h3><p>一级菜单：</p>
<p>创建菜单条 JMenuBar</p>
<p>创建菜单JMenu</p>
<p>创建菜单项JMenuItem</p>
<p>总结：菜单项依附菜单、菜单依附菜单条</p>
<p>创建菜单栏</p>
<p>创建菜单</p>
<p>创建菜单项</p>
<p>菜单添加一个菜单项</p>
<p>菜单项添加菜单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JMenuBar bar=<span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line">JMenu menu=<span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;菜单1&quot;</span>);</span><br><span class="line">JMenuItem item1=<span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;二级菜单1&quot;</span>);</span><br><span class="line">JMenuItem item2=<span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;二级菜单2&quot;</span>);</span><br><span class="line">JMenuItem item3=<span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;二级菜单3&quot;</span>);</span><br><span class="line">menu.add(item1);</span><br><span class="line">menu.add(item2);</span><br><span class="line">menu.add(item3);</span><br><span class="line">bar.add(menu);</span><br><span class="line">jf.add(bar);</span><br></pre></td></tr></table></figure>

<h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>类：JTextField</p>
<p>构造函数</p>
<p>new JTextField（）；</p>
<p>new JTextField（String text）；       设置默认文字</p>
<p>new JTextField（int fiel） 设置文本框长度</p>
<p>new JTextField（String str，int b）      默认文字+文本框长度</p>
<h3 id="密码框"><a href="#密码框" class="headerlink" title="密码框"></a>密码框</h3><p>类：JPasswordField</p>
<p>构造函数</p>
<p>new JPasswordField（）；</p>
<p>new JPasswordField（String text）；     设置默认文字</p>
<p>new JPasswordField（int fiel）   设置密码框长度</p>
<p>new JPasswordField（String str，int b）     默认文字+密码框长度</p>
<h3 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h3><p>类：JTextArea</p>
<p>构造函数</p>
<p>new JTextArea（）；</p>
<p>new JTextArea（String text）；       设置默认文字</p>
<p>new JTextArea（int fiel，int fiel）     设置文本框长度和宽度</p>
<p>方法：</p>
<p>setLineWrap（）；   设置文本框是否换行</p>
<h2 id="常用布局"><a href="#常用布局" class="headerlink" title="常用布局"></a>常用布局</h2><h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><p>构造方法：</p>
<p>FlowLayout（int aligment）;    设置对齐方式（默认居中）</p>
<p>FlowLayout（int aligment，int horizGap，int vertGap）;      设置对齐方式+上下偏移</p>
<p>通过setLayout设置布局方式</p>
<p>例如：jf.setLayout（new FlowLayout（FlowLayout.LEFT））</p>
<h3 id="网格式布局"><a href="#网格式布局" class="headerlink" title="网格式布局"></a>网格式布局</h3><p>构造方法：</p>
<p>GridLayout（int row，int col）;      指定行数和列数</p>
<p>GridLayout（int row，int col，int horizGap，int vertGap）;       设置行数列数+上下偏移</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux从入门到彻底放弃</title>
    <url>/2023/02/27/Linux%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Linux指令"><a href="#Linux指令" class="headerlink" title="Linux指令"></a>Linux指令</h1><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><h3 id="认识linux目录结构"><a href="#认识linux目录结构" class="headerlink" title="认识linux目录结构"></a>认识linux目录结构</h3><p>/:根目录标志</p>
<p><img src="/img/Linux%E6%8C%87%E4%BB%A4/image-20221230163149165.png" alt="image-20221230163149165" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/Linux%E6%8C%87%E4%BB%A4/image-20221230163757788.png" alt="image-20221230163757788" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="列出文件列表"><a href="#列出文件列表" class="headerlink" title="列出文件列表"></a>列出文件列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看当前目录下的所有文件夹</span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line">查看当前目录下扥所有文件（包括隐藏文件）</span><br><span class="line">ls -a</span><br><span class="line">//以点开头的蓝色文件就是隐藏文件</span><br><span class="line"></span><br><span class="line">查看所有目录下非隐藏文件及其详细信息</span><br><span class="line">ll</span><br></pre></td></tr></table></figure>

<h3 id="进入文件目录"><a href="#进入文件目录" class="headerlink" title="进入文件目录"></a>进入文件目录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进入指定目录</span><br><span class="line">cd 文件名</span><br><span class="line"></span><br><span class="line">返回上一级目录</span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">返回用户目录</span><br><span class="line">cd ~</span><br><span class="line"></span><br><span class="line">返回上一行的目录</span><br><span class="line">cd -</span><br></pre></td></tr></table></figure>

<h3 id="创建和删除目录"><a href="#创建和删除目录" class="headerlink" title="创建和删除目录"></a>创建和删除目录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建一个文件夹</span><br><span class="line">mkdir 文件夹名称</span><br><span class="line"></span><br><span class="line">创建一个空文件</span><br><span class="line">touch a.txt</span><br><span class="line"></span><br><span class="line">删除一个空文件夹</span><br><span class="line">redir 文件夹名称</span><br><span class="line"></span><br><span class="line">直接创建多级文件夹</span><br><span class="line">mkdir -p 父文件夹名/子文件夹</span><br></pre></td></tr></table></figure>

<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看文件所有内容</span><br><span class="line">cat 文件名</span><br><span class="line">more 文件名	只显示一屏按回车显示一行 按空格显示一屏 按q退出</span><br><span class="line"></span><br><span class="line">查看文件最后10行的内容</span><br><span class="line">tail -10 文件名</span><br><span class="line">动态查看</span><br><span class="line">tail -f 文件名</span><br></pre></td></tr></table></figure>

<h3 id="删除、复制和剪切"><a href="#删除、复制和剪切" class="headerlink" title="删除、复制和剪切"></a>删除、复制和剪切</h3><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在指定文件夹下将file1复制为file2</span><br><span class="line">cp file1 aaa/file2</span><br><span class="line"></span><br><span class="line">将file1复制到上一级文件夹</span><br><span class="line">cp file1 ../</span><br></pre></td></tr></table></figure>

<h4 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将file1剪切到指定文件夹</span><br><span class="line">mv file1 aaa/</span><br><span class="line"></span><br><span class="line">将file1剪切到上一级文件夹</span><br><span class="line">cp file1 ../</span><br></pre></td></tr></table></figure>

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在询问后删除文件</span><br><span class="line">rm bb</span><br><span class="line"></span><br><span class="line">删除目录</span><br><span class="line">rm -r bb</span><br><span class="line"></span><br><span class="line">不询问删除</span><br><span class="line">rm -rf bb</span><br><span class="line"></span><br><span class="line">删除所有东西</span><br><span class="line">rm -rf /*		//慎用</span><br></pre></td></tr></table></figure>

<h3 id="打包或解压"><a href="#打包或解压" class="headerlink" title="打包或解压"></a>打包或解压</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">压缩成a.tar</span><br><span class="line">tar -cvf a.tar 文件夹名/</span><br><span class="line">	-c:创建一个新的tar文件</span><br><span class="line">	-v:显示运行的过程信息</span><br><span class="line">	-f:指定文件名</span><br><span class="line">	-z:调用gzip压缩命令进行压缩</span><br><span class="line">	-t:查看压缩文件的内容</span><br><span class="line">	-x:解开tar文件</span><br></pre></td></tr></table></figure>

<h3 id="查找文件、查找内容"><a href="#查找文件、查找内容" class="headerlink" title="查找文件、查找内容"></a>查找文件、查找内容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">按文件名称查找</span><br><span class="line">find / -name 文件名</span><br><span class="line"></span><br><span class="line">不太清楚名字的查找方法</span><br><span class="line">find / -name cont*.log</span><br><span class="line"></span><br><span class="line">在aaa文件中查找字符串Address</span><br><span class="line">grep Address 文件路径 --color</span><br></pre></td></tr></table></figure>

<h2 id="Vi和Vim编辑器"><a href="#Vi和Vim编辑器" class="headerlink" title="Vi和Vim编辑器"></a>Vi和Vim编辑器</h2><p>在linux下一般使用vi编辑器来编辑文件。vi即可以查看文件也可以编辑文件。</p>
<p>三种模式：命令行、插入、底行模式。</p>
<p>切换到命令行模式：按Esc键</p>
<p>切换到插入模式：按i、o、a键</p>
<p>​    i 在当前位置前插入</p>
<p>​    I 在当前行首插入</p>
<p>​    a 在当前位置后插入</p>
<p>​    A 在当前行尾插入</p>
<p>​    o 在当前行之后插入一行</p>
<p>​    O 在当前行之前插入一行</p>
<p>切换到底行模式：按冒号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">打开文件： vim file</span><br><span class="line"></span><br><span class="line">退出：esc-&gt;:q</span><br><span class="line"></span><br><span class="line">修改文件：输入i进入插入模式</span><br><span class="line"></span><br><span class="line">保存并退出：esc-&gt;:wq</span><br><span class="line"></span><br><span class="line">不保存退出</span><br></pre></td></tr></table></figure>

<h2 id="重定向输出"><a href="#重定向输出" class="headerlink" title="重定向输出"></a>重定向输出</h2><p>重定向就是将本文件中的内容复制到别的文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将aaa.txt中的文字复制到bbb.txt中</span><br><span class="line">cat aaa.txt &gt; bbb.txt</span><br><span class="line"></span><br><span class="line">将aaa.txt中的文字追加到bbb.txt中</span><br><span class="line">cat aaa.txt &gt;&gt; bbb.txt</span><br></pre></td></tr></table></figure>

<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>管道是linux命令中重要的一个概念，其作用是<strong>将一个命令的输出用作另一个命令的输入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls --help | more 分页查询帮助信息</span><br><span class="line">ps -ef | grep java 查询名称中包含java的进程</span><br></pre></td></tr></table></figure>

<h2 id="Linux权限命令"><a href="#Linux权限命令" class="headerlink" title="Linux权限命令"></a>Linux权限命令</h2><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>—    ———    ———    ———</p>
<p><strong>第一个“—”表示文件的类型</strong></p>
<p>​    -：表示文件</p>
<p>​    d：表示文件夹</p>
<p>​    l：表示快捷方式</p>
<p><strong>第二个表示当前文件或文件夹的权限</strong></p>
<p>​    r：可读</p>
<p>​    w：可写</p>
<p>​    x：可运行</p>
<p><strong>第三个表示当前组内其他用户具有该文件的权限</strong></p>
<p><strong>第四个表示其他组的用户具有该文件的权限</strong></p>
<h3 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod u=rwx,g=rx,o=rx a.txt</span><br><span class="line">u代表当前用户 g代表当前组的其他用户 o代表其他组的用户</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">也可以用数字的形式</span><br><span class="line">可读是4 可写是2 可运行是1</span><br><span class="line">最高权限就变成了chmod 777</span><br></pre></td></tr></table></figure>

<h2 id="linux上常见的网络操作"><a href="#linux上常见的网络操作" class="headerlink" title="linux上常见的网络操作"></a>linux上常见的网络操作</h2><h3 id="主机名配置"><a href="#主机名配置" class="headerlink" title="主机名配置"></a>主机名配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname 查看主机名</span><br><span class="line">hostname XXX修改主机名 重启后失效</span><br><span class="line">如果要是永久生效，可以修改/erc/sysconfig/netword文件</span><br></pre></td></tr></table></figure>

<h3 id="IP地址配置"><a href="#IP地址配置" class="headerlink" title="IP地址配置"></a>IP地址配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig查看（修改）ip地址	重启后无效</span><br><span class="line">ifconfig etho 192.168.12.22</span><br><span class="line"></span><br><span class="line">如果想要永久生效</span><br><span class="line">修改/etc/sysconfig/network-scripts/ifcfg-eth0文件</span><br><span class="line">DEVICE=eth0 网卡名称</span><br><span class="line">BOOTPROTO=static #获取ip的方式(static/dhcp/bootp/none)</span><br><span class="line">HWADDR-00:0c:29:B5:B2:69 .MAC地址</span><br><span class="line">工PADDR-12-168-177.129 #IP地址</span><br><span class="line">NETMASK-255.255.255.0 #子网掩码</span><br><span class="line">NETWORK=192.168.177.0 网络地址</span><br><span class="line">BROADCAST=192.168.0.255 广播地址</span><br><span class="line">NBOOT=yes	系统启动时是否设置此网络接口</span><br></pre></td></tr></table></figure>

<h3 id="linux域名映射"><a href="#linux域名映射" class="headerlink" title="linux域名映射"></a>linux域名映射</h3><p>可以通过更改linux下的/etc/hosts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改域名映射</span><br><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<h3 id="网络服务管理"><a href="#网络服务管理" class="headerlink" title="网络服务管理"></a>网络服务管理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service network status查看指定服务的状态</span><br><span class="line">service network stop停止指定服务</span><br><span class="line">service network start启动指定服务</span><br><span class="line">service network restart 重启指定服务</span><br><span class="line">service --status-al1查看系统中所有后台服务</span><br><span class="line">netstat -nltp查看系统中网络进程的端口监听情况</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">防火墙设置</span><br><span class="line">防火墙根据配置文件/etc/sysconfig/iptables来控制本机的“出”、“入网络访问行为</span><br><span class="line">oservice iptables status 查看防火墙状态</span><br><span class="line">service iptables stop关闭防火墙</span><br><span class="line">service iptables start启动防火墙</span><br><span class="line">chkconfig iptables off禁止防火墙自启</span><br></pre></td></tr></table></figure>

<h2 id="linux上的软件安装"><a href="#linux上的软件安装" class="headerlink" title="linux上的软件安装"></a>linux上的软件安装</h2><ul>
<li><p>linux上软件安装有以下几种常用的方式介绍</p>
<ol>
<li><p>二进制发布包</p>
<p>软件已经针对具体平台编译打包发布只要解压修改配置即可</p>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql从入门到删库跑路</title>
    <url>/2023/02/27/MySQL%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="MySQL笔记"><a href="#MySQL笔记" class="headerlink" title="MySQL笔记"></a>MySQL笔记</h1><h2 id="数据库的概念"><a href="#数据库的概念" class="headerlink" title="数据库的概念"></a>数据库的概念</h2><h3 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h3><p>​    数据库是用于存储和管理数据的仓库</p>
<p>​    每个数据库都有一个或多个不同的API用于创建、访问，管理，搜索和复制所保存的数据</p>
<h3 id="数据库的特点"><a href="#数据库的特点" class="headerlink" title="数据库的特点"></a>数据库的特点</h3><ol>
<li>数据以表格的形式出现</li>
<li>每行为各种记录名称</li>
<li>每列为记录名称所对应的数据域</li>
<li>许多的行和列组成一张表单</li>
<li>若干的表单组成数据库（database）</li>
</ol>
<h3 id="数据库的行称为记录、列称为字段"><a href="#数据库的行称为记录、列称为字段" class="headerlink" title="数据库的行称为记录、列称为字段"></a>数据库的行称为记录、列称为字段</h3><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="修改结束符"><a href="#修改结束符" class="headerlink" title="修改结束符"></a>修改结束符</h3><p>​    delimiter 新结束符$</p>
<h3 id="退出MySQL"><a href="#退出MySQL" class="headerlink" title="退出MySQL"></a>退出MySQL</h3><p>​    exit</p>
<p>​    quit</p>
<h3 id="MySQL服务器信息"><a href="#MySQL服务器信息" class="headerlink" title="MySQL服务器信息"></a>MySQL服务器信息</h3><p>​    Status；</p>
<h3 id="创建数据库，使用指定参数"><a href="#创建数据库，使用指定参数" class="headerlink" title="创建数据库，使用指定参数"></a>创建数据库，使用指定参数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database （数据库名）</span><br><span class="line"></span><br><span class="line">create database if not exists （库名）	#如果不存在会被创建，而不会报错</span><br></pre></td></tr></table></figure>

<h3 id="创建数据库将字符集设置为gb2312"><a href="#创建数据库将字符集设置为gb2312" class="headerlink" title="创建数据库将字符集设置为gb2312"></a>创建数据库将字符集设置为gb2312</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database yym default character set gb2312;</span><br></pre></td></tr></table></figure>

<h3 id="排序规则"><a href="#排序规则" class="headerlink" title="排序规则"></a>排序规则</h3><p>​    collation 校对规则</p>
<p>​    show collation：查看可用的排序规则</p>
<h3 id="创建数据库，将字符集设置为utf8数据库排序规则设置为：utf8-unicode-ci"><a href="#创建数据库，将字符集设置为utf8数据库排序规则设置为：utf8-unicode-ci" class="headerlink" title="创建数据库，将字符集设置为utf8数据库排序规则设置为：utf8_unicode_ci"></a>创建数据库，将字符集设置为utf8数据库排序规则设置为：utf8_unicode_ci</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database abc default character set utf8 default collate utf8_unicode_ci;</span><br></pre></td></tr></table></figure>

<h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br><span class="line">#查看数据库列表</span><br><span class="line"></span><br><span class="line">show create database mysql;</span><br><span class="line">#查看数据库定义（字符集和排序规则）</span><br></pre></td></tr></table></figure>

<h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure>

<h3 id="修改数据库编码"><a href="#修改数据库编码" class="headerlink" title="修改数据库编码"></a>修改数据库编码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter database yym default character set gbk default collate gbk_unicode_ci；</span><br></pre></td></tr></table></figure>

<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database mysql;	#一次只能删除一个</span><br></pre></td></tr></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><p>​    int所占字节数四个字节</p>
<p>​    bigint                  八</p>
<p>​    tinyint                 一</p>
<p>​    smallint              二</p>
<p>​    mediumint          三</p>
<p>​    适用于：有数值 有大小比较的</p>
<p>​    数量 单价 字段名</p>
<h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p>​    浮点型数据类型 ：有小数点的数值</p>
<p>​    float（m，d）</p>
<p>​    double（m，d）</p>
<p>​    m：该数值有几位整数</p>
<p>​    d：位于小数点后面有几位</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>​    数据的组成：字母，汉字，数字符号、特殊符号</p>
<p>​    构成的数据对象</p>
<p>​    身份证号、编号、电话号码、联系方式、名称</p>
<h4 id="char和varchar"><a href="#char和varchar" class="headerlink" title="char和varchar"></a>char和varchar</h4><p>​    char：定长字符串，长度可以使0-255之间任何数</p>
<p>​        当保存char的值的时候，在他们的右边填充空格来达到指定的长度</p>
<p>​    varchar：可变字符串，长度可以0-65535之间的任何数</p>
<p>​        只保存需要的字符数，另外再加一个字节来记录n+1</p>
<p>​    varchar（8）    13  14个</p>
<p>​    汉字占两个字节，数字字母占一个字节</p>
<p>​    超出char和varchar规定的长度，将对其进项裁剪以适应，如果被裁减的字符不是空格，则会发出一条警告</p>
<h3 id="blob和ext类型（非二进制字符串）"><a href="#blob和ext类型（非二进制字符串）" class="headerlink" title="blob和ext类型（非二进制字符串）"></a>blob和ext类型（非二进制字符串）</h3><p>​    用于存储声音、视频、图像等数据</p>
<p>​    例如插入照片</p>
<h3 id="时间日期类型"><a href="#时间日期类型" class="headerlink" title="时间日期类型"></a>时间日期类型</h3><h4 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h4><p>​    data格式：yyyy-mm-dd 支持范围：1000-01-01~9999-12-31</p>
<h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><p>​    time：hh：mm：ss范围：-838:59:59~838:59:59小时可以表示超过一天的时间（大于二十四小时）</p>
<h4 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h4><p>​    datetime:表示日期和时间 格式：yyyy-mm-dd hh:mm:ss 1000-01-01 00:00:00~9999-12-31 23:59:59 2022-03-23 08:18:50</p>
<h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><p>​    数据类型：注册时间、订购时间</p>
<h2 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h2><h3 id="查看数据库中的数据表"><a href="#查看数据库中的数据表" class="headerlink" title="查看数据库中的数据表"></a>查看数据库中的数据表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>

<h3 id="使用数据表"><a href="#使用数据表" class="headerlink" title="使用数据表"></a>使用数据表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure>

<h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table teacher(</span><br><span class="line">     name varchar(10),</span><br><span class="line">     age int(2),</span><br><span class="line">     submission_date DATE,</span><br><span class="line">     tel int(20));</span><br></pre></td></tr></table></figure>

<h3 id="重命名数据表"><a href="#重命名数据表" class="headerlink" title="重命名数据表"></a>重命名数据表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rename table 旧表名 to 新表名</span><br></pre></td></tr></table></figure>

<h3 id="修改表的字符集"><a href="#修改表的字符集" class="headerlink" title="修改表的字符集"></a>修改表的字符集</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 character set 字符集名称;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">status；	#查看系统字符集设置，包括所有的字符集设置</span><br><span class="line"></span><br><span class="line">#当客户端、连接器、返回值的字符集相同，并且都是gbk的时候，我们可以采取如下的简写方式：</span><br><span class="line">set names gbk;</span><br><span class="line">#这就话其实包含了三层意思：</span><br><span class="line">set character_set_client=gbk;</span><br><span class="line">set character_set_connection=gbk;</span><br><span class="line">set character_set_results=gbk;</span><br></pre></td></tr></table></figure>

<h3 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 add 列名 数据类型;</span><br></pre></td></tr></table></figure>

<h3 id="修改列名称，类型"><a href="#修改列名称，类型" class="headerlink" title="修改列名称，类型"></a>修改列名称，类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 change 列名 新列别 新数据类型;</span><br><span class="line">alter table 表名 modify 列名 新数据类型;</span><br></pre></td></tr></table></figure>

<h3 id="修改某一个数据"><a href="#修改某一个数据" class="headerlink" title="修改某一个数据"></a>修改某一个数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 要更改列名=801 where 查找的列名=&#x27;C罗&#x27;;</span><br></pre></td></tr></table></figure>



<h3 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 新表名 like 旧表名;</span><br><span class="line">insert into 新表名 select * from 旧表名;</span><br></pre></td></tr></table></figure>

<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table if exists 表名;</span><br></pre></td></tr></table></figure>

<h3 id="查找数据表"><a href="#查找数据表" class="headerlink" title="查找数据表"></a>查找数据表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询所有字段</span><br><span class="line">select*from 表名;</span><br><span class="line">#查询指定字符</span><br><span class="line">select 字段名 from 表名;</span><br><span class="line">#查询年龄小于25岁的人</span><br><span class="line">select*from 表名 where age&lt;25;</span><br><span class="line">#查询年龄为18和20的人</span><br><span class="line">select*from 表名 age in (18,20);</span><br><span class="line">#	%用于匹配任意长度的字符串。例如，字符串“a%”匹配以字符a开始任意长度的字符串</span><br><span class="line">#	_用于匹配一个任意的字符串。例如，字符串&quot;ab_&quot;匹配&quot;ab&quot;开始长度为3的字符串，如abc、abp等</span><br><span class="line">select * from student where name link &quot;r%&quot;</span><br></pre></td></tr></table></figure>

<h3 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h3><p>​    temporary</p>
<h4 id="创建临时表"><a href="#创建临时表" class="headerlink" title="创建临时表"></a>创建临时表</h4><p>​    MySQL 临时表在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，Mysql会自动删除表并释放所有空间。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create temporary table 表名;</span><br></pre></td></tr></table></figure>

<h4 id="查看表的定义语句："><a href="#查看表的定义语句：" class="headerlink" title="查看表的定义语句："></a>查看表的定义语句：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table 表名;</span><br></pre></td></tr></table></figure>

<h4 id="添加默认值或者删除默认值"><a href="#添加默认值或者删除默认值" class="headerlink" title="添加默认值或者删除默认值"></a>添加默认值或者删除默认值</h4><p>​    change[colunm]旧的字段名 新的字段名 字段的定义——修改字段的名称或者字段的定义</p>
<p>​    modify[column]字段名 字段的新定义——修改字段的定义</p>
<p>​    drop[column]字段名——删除字段</p>
<p>​    rename to 新表名——为表重命名</p>
<h2 id="字段名操作"><a href="#字段名操作" class="headerlink" title="字段名操作"></a>字段名操作</h2><h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop[column] 字段名；</span><br></pre></td></tr></table></figure>



<h3 id="在数据表中使用默认值"><a href="#在数据表中使用默认值" class="headerlink" title="在数据表中使用默认值"></a>在数据表中使用默认值</h3><p>​    create table 表名(字段名1 数据类型 default 默认值)</p>
<p>​    中文字符不识别：set names gbk；</p>
<p>​    日期型的字段：timestamp</p>
<p>​    该类型如果没有手动给定值增加当前的日期，那么你使用timestamp类型直接输出当前系统的日期和时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t1(id char(10),date1 timestamp);</span><br></pre></td></tr></table></figure>

<h3 id="录入新信息"><a href="#录入新信息" class="headerlink" title="录入新信息"></a>录入新信息</h3><p>​    insert语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名 values(内容1)</span><br></pre></td></tr></table></figure>

<p>​    为表里面所有字段都增加内容</p>
<p>​    insert into 表名(字段名1，字段名2) values（‘内容1’,’内容2’);</p>
<p>​    为表中部分字段增加内容</p>
<p>​    注意事项：为表增加内容，内容是需要用单引号引起来。字段名是不需要用引号引起来的。</p>
<p>​    整形数据类型在增加内容的时候可以省略单引号。浮点型 int float double</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into Player (name,age,club,transfer,jqs,Country) </span><br><span class="line">-&gt; values </span><br><span class="line">-&gt;(&#x27;梅西&#x27;,35,&#x27;巴黎圣日耳曼&#x27;,&#x27;2021-08-11&#x27;,769,&#x27;阿根廷&#x27;);</span><br></pre></td></tr></table></figure>

<p>​    为表添加多组数据</p>
<p>​    验证：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select*from 表名;	#查看该表中存在的数据内容</span><br></pre></td></tr></table></figure>

<h3 id="在数据表中使用默认值-1"><a href="#在数据表中使用默认值-1" class="headerlink" title="在数据表中使用默认值"></a>在数据表中使用默认值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名 (字段名 数据类型 not null default &quot;默认名&quot;);</span><br></pre></td></tr></table></figure>

<p>举例：创建一个教师表**teacher,**包括的字段有教师编号、姓名、性别、生日、联系电话，所在系部编号，其中教师的性别字段有默认值：女。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Create table teacher(teacherid char(10),</span><br><span class="line"></span><br><span class="line">teachername varchar(10),</span><br><span class="line"></span><br><span class="line">teachersex char(2) default &quot;女&quot; ,</span><br><span class="line"></span><br><span class="line">teacherbirthday date,</span><br><span class="line"></span><br><span class="line">telephone char(11),</span><br><span class="line"></span><br><span class="line">departmentid char(8));</span><br></pre></td></tr></table></figure>

<p><em><strong>对表中定义内容与顺序大致为：字段名</strong> <strong>数据类型</strong> <strong>宽度</strong> <strong>非空约束的定义</strong> <strong>默认值</strong> <strong>自动增长列</strong> <strong>其他约束、字段的描述性文字</strong></em><em>(comment)</em>**</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CRATE TABLE customers    </span><br><span class="line">-&gt;(    </span><br><span class="line">-&gt; use_id int(5) not null default &quot;用户名&quot; atuo_increment  );</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a><strong>约束</strong></h2><p><strong>对字段取值进行限制，我们称为约束。</strong></p>
<p><strong>约束关键字及定义语句：主体部分，由于对字段的取值有各种不同的限定，因此，表中的约束页分为若干种，每种约束的关键字不同，</strong> <strong>约束的定于语句也不同</strong></p>
<h3 id="约束分类"><a href="#约束分类" class="headerlink" title="约束分类"></a>约束分类</h3><ul>
<li><strong>not null（非空约束）</strong> - 指示某列不能存储 NULL 值。</li>
<li><strong>unique（唯一约束）</strong> - 保证某列的每行必须是唯一的值。</li>
<li><strong>primary key（主键约束）</strong> - 非空约束 和 唯一约束的结合，确保某列（或两个列多个列的结合）不为空且有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</li>
<li><strong>foreign key（外键约束）</strong> - 保证一个表中的数据匹配另一个表中的值的参照完整性。</li>
<li><strong>check（限制）</strong> - 限制值的范围</li>
<li><strong>default（默认约束）</strong> - 规定没有给列赋值时的默认值。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table Persons(</span><br><span class="line">	P_Id int not null,</span><br><span class="line">	LastName varchar(255) unique,</span><br><span class="line">	FirstName varchar(255) primary key,</span><br><span class="line">	Address varchar(255) foreign key,</span><br><span class="line">	City varchar(255) default &quot;北京&quot;,</span><br><span class="line">	check (P_Id&gt;0)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="插入约束"><a href="#插入约束" class="headerlink" title="插入约束"></a>插入约束</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#格式一:在创建表的时候，直接将约束定义语句放在字段之后</span><br><span class="line">create table department(</span><br><span class="line">    departmentID char(10) not null primary key,</span><br><span class="line">    Departmentname varchar(10)</span><br><span class="line">);</span><br><span class="line">#格式二：字段定义完毕之后，在单独定义约束</span><br><span class="line">create table department(</span><br><span class="line">    departmentID char(10),</span><br><span class="line">	primary key(departmentID),</span><br><span class="line">	departmentname varchar(10));</span><br><span class="line">#格式三：为约束命名</span><br><span class="line">create table department(</span><br><span class="line">    departmentID char(10),</span><br><span class="line">	constraint pk_id Primary key(departmentID),</span><br><span class="line">	departmentname varchar(10)</span><br><span class="line">);</span><br><span class="line">#格式4：</span><br><span class="line">alter table 表名 add 字段名(条件) primary key(字段);</span><br></pre></td></tr></table></figure>

<h3 id="组合主键"><a href="#组合主键" class="headerlink" title="组合主键"></a><strong>组合主键</strong></h3><p>表中主键字段需要多个字段组合起来充当，来满足主键约束的要求。</p>
<p>特征：每个字段允许有重复值，但是组合在一起不可以重复，而且组合中每个字段都不可以取空值。</p>
<p>格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table tb_emp</span><br><span class="line">  -&gt; (</span><br><span class="line">  -&gt; name VARCHAR(25),</span><br><span class="line">  -&gt; deptId INT(11),</span><br><span class="line">  -&gt; salary FLOAT,</span><br><span class="line">  -&gt; PRIMARY KEY(id,deptId)</span><br><span class="line">  -&gt; );</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Create table student</span><br><span class="line"></span><br><span class="line">(id char(10) not null,</span><br><span class="line"></span><br><span class="line">Sex char(2) not null check(sex in(“男”,”女”)));</span><br><span class="line"></span><br><span class="line">         Check(sex=”男”or sex=”女”)</span><br><span class="line"></span><br><span class="line">In:操作符满足多个条件中的一个</span><br></pre></td></tr></table></figure>

<h3 id="Enum-枚举"><a href="#Enum-枚举" class="headerlink" title="Enum() 枚举"></a><strong>Enum()</strong> <strong>枚举</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Create table student</span><br><span class="line"></span><br><span class="line">(id char(10) not null,</span><br><span class="line"></span><br><span class="line">Sex enum(“男”,”女”));</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建表student 1,字段：学号、出生日期、学分，要求出生日期必须大于1980-01-01.</span><br><span class="line"></span><br><span class="line">Create table student1</span><br><span class="line"></span><br><span class="line">(学号 char(10) not null,</span><br><span class="line"></span><br><span class="line">出生日期 date not null,</span><br><span class="line"></span><br><span class="line">学分 int,</span><br><span class="line"></span><br><span class="line">Check(出生日期&gt;’1980-01-01’));</span><br><span class="line"></span><br><span class="line">#创建s2表，字段：学号、性别，要求：性别这列的所有值来源于student表中”性别列中。</span><br><span class="line"></span><br><span class="line">Select </span><br><span class="line">Create table s2</span><br><span class="line"></span><br><span class="line">(学号 char(10) not null,</span><br><span class="line"></span><br><span class="line">性别 char(2) not null,</span><br><span class="line"></span><br><span class="line">Check(性别in (select sex from student))</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">In 操作符：满足多个条件中的一个</span><br><span class="line"></span><br><span class="line">#创建s3，字段有：学号、最好成绩、平均成绩，要求：最好成绩必须大于平均成绩。</span><br><span class="line">Create table s3(</span><br><span class="line">学号 char(10) not null,</span><br><span class="line"></span><br><span class="line">最好成绩 int(2) not null,</span><br><span class="line"></span><br><span class="line">平均成绩 int(2) not null,</span><br><span class="line"></span><br><span class="line">Check(最好成绩&gt;平均成绩));</span><br></pre></td></tr></table></figure>

<h3 id="外键约束"><a href="#外键约束" class="headerlink" title="**外键约束 **"></a>**外键约束 **</h3><p>（foreign key)</p>
<p>例如：学生选课表 学号—学生基本信息表 学号 </p>
<p>​           点名系统表 学号–学生基本信息表 学号</p>
<p>一个表（子表）中某字段的取值应该参照另一个表（父表）中某字段的取值，我们就称为外键约束。</p>
<p>被约束的表通常称为子表</p>
<p>约束子表的表称为父表</p>
<p>外键约束定义在子表</p>
<p>四点限制：</p>
<p>1）子表中外键字段的数据类型要和父表中的参考字段的数据一致 int int </p>
<p>2）父表的参考字段必须定义为主键约束或者是唯一键约束，才能约束子表中外键约束。</p>
<p>3）父表中的主键值或者唯一键的值一旦被子表参照，那么这些值就不能随意修改或删除。</p>
<p>4）子表中外键字段可以取空值，但是如果有值必须在父表参照列的取值范围内。</p>
<p><font color='blue' style="background:#ccc">外键定义：foreign key(子表字段名) references 父表(主键字段/唯一键字段）</font></p>
<p>创建book_ref表，字段：图书编号、书名、出版日期，要求：所有book_ref表中的图书编号都必须参照book表中图书编号字段，假设已经创建book表，图书编号作为book<strong>表中的主键设置。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table book_ref(</span><br><span class="line">    图书编号 char(10),</span><br><span class="line">    书名 varchar(20),</span><br><span class="line">    出版日期 date,</span><br><span class="line">    foreign key (图书编号) references book(bookid)\</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="删除约束"><a href="#删除约束" class="headerlink" title="删除约束"></a><strong>删除约束</strong></h3><ol>
<li>   删除主键</li>
</ol>
<p> <strong>Alter table</strong> <strong>表名</strong> <strong>drop primary key;</strong> <strong>注意：不需要加主键的约束名</strong></p>
<ol>
<li>删除表中的外键</li>
</ol>
<p><strong>Alter table</strong> <strong>表名</strong> <strong>drop foreign key</strong> <strong>外键约束的名称</strong></p>
<p><strong>Create table t2(id char(10) primary key); t2****：父表</strong></p>
<p><strong>Create table t3(id char(10),constraint fk_id foreign key(id) references t2(id));</strong></p>
<p><strong>Alter table t3 drop foreign key fk_id;</strong></p>
<h3 id="自动增长列"><a href="#自动增长列" class="headerlink" title="自动增长列"></a><strong>自动增长列</strong></h3><p><strong>Auto_increment</strong> </p>
<p><strong>注意：</strong></p>
<p><strong>定义为****auto_increment</strong> *<em>属性的字段，必须是</em><em><strong>整型</strong></em>*，必须是主键或者唯一键</p>
<p><strong>Auto_increment</strong> *<em>的初始值可以在表后面的属性中使用”</em><em>*<em>auto_increment=<strong><strong>初始值</strong></strong>”</em>*</em><em>来自行定义，否则默认值为</em><em><strong>1</strong></em><em>开始。</em>*</p>
<p><strong>创建产品信息表</strong></p>
<p><strong>包含：产品编号、产品名称，要求将产品编号设置自动增长列属性。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table product(</span><br><span class="line">    id int auto_increment unique,</span><br><span class="line">    Name varchar(10)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="老表导入新表"><a href="#老表导入新表" class="headerlink" title="老表导入新表"></a>老表导入新表</h2><p><strong>从已有的表中查询数据并插入新表中</strong></p>
<p>​    <strong>insert into</strong> <strong>目标表****select*from</strong> <strong>来源表</strong>**;</p>
<p><strong>1）****将一个表中指定字段的值导入新表中</strong></p>
<p>​    <strong>Insert into</strong> <strong>目标表</strong>**(<strong><strong>字段</strong></strong>1,<strong><strong>字段</strong></strong>2) select (<strong><strong>字段</strong></strong>1,<strong><strong>字段</strong></strong>2)from** <strong>来源表</strong><strong>;</strong></p>
<p><strong>将<strong><strong>student</strong></strong>中学号和姓名字段导入到<strong><strong>s1</strong></strong>表中。</strong></p>
<p>​    <strong>Insert into s1(<strong><strong>学号</strong></strong>,<strong><strong>姓名</strong></strong>) select(<strong><strong>学号</strong></strong>,<strong><strong>姓名</strong></strong>)from student;</strong></p>
<p><strong>Update</strong> <strong>注意：修改的是表中数据，而不是字段</strong></p>
<p><strong>语法格式：</strong></p>
<p><strong>Update</strong> <strong>表名</strong> <strong>set</strong> *<em>字段名</em><em>*<em>1=<strong><strong>值</strong></strong>1</em>*</em><em>，字段</em>**<em>2=<strong><strong>值</strong></strong>2 ,….where</em>* <strong>条件；</strong></p>
<p><strong>Set****字句：设置</strong> </p>
<p><strong>1.</strong> <strong>将<strong><strong>student</strong></strong>表中所有的学生的班级修改为软件设计<strong><strong>1</strong></strong>班。</strong></p>
<p><strong>Update student set classid=”<strong><strong>软件设计</strong></strong>1<strong><strong>班</strong></strong>”**</strong>;**</p>
<p><strong>2</strong> <strong>将****bookstore</strong> <strong>数据库中<strong><strong>book</strong></strong>表中所有书籍数量都增加****10.</strong></p>
<p><strong>Use bookstore;</strong></p>
<p><strong>Update book set</strong> <strong>数量</strong><strong>=<strong><strong>数量</strong></strong>+10;</strong></p>
<p><strong>3<strong><strong>将</strong></strong>bookstore</strong> <strong>数据库中<strong><strong>book</strong></strong>表中所有书籍数量都增加****10,</strong></p>
<p><strong>将<strong><strong>number</strong></strong>表中姓名为张三的员工的联系电话修改为“<strong><strong>1994535525</strong></strong>”，密码修改为“<strong><strong>11111</strong></strong>”**</strong>.**</p>
<p><strong>Use bookstore;</strong></p>
<p><strong>Update book set</strong> <strong>数量</strong><strong>=<strong><strong>数量</strong></strong>+10;</strong></p>
<p><strong>Update number set</strong> <strong>联系电话</strong><strong>=”1994535525”,<strong><strong>密码</strong></strong>=”11111” where</strong> <strong>姓名</strong><strong>=”<strong><strong>张三</strong></strong>”;</strong></p>
<p><strong>引号：字符串</strong></p>
<p><strong>不加引号：****int float</strong> </p>
<p><strong>将****course</strong> <strong>表中课程编号为<strong><strong>10104</strong></strong>的课程名称修改为微机基础，课程性质修改为限选课。</strong></p>
<p><strong>2</strong> <strong>多表数据修改</strong></p>
<p><strong>Update</strong> <strong>表名列表</strong> <strong>set</strong> *<em>字段名</em><em>*<em>1=<strong><strong>值</strong></strong>1</em>*</em><em>，字段</em>**<em>2=<strong><strong>值</strong></strong>2 ,….where</em>* <strong>条件；</strong></p>
<p> <strong>表名列表：包含多个表的联合，各个表用逗号隔开</strong></p>
<p><strong>订单号为<strong><strong>16</strong></strong>的客户因某些原因退回<strong><strong>4</strong></strong>本图书，请在<strong><strong>sell</strong></strong>表中修改订购册数，同时书返回后，<strong><strong>book</strong></strong>表中该图书的数量增加****4.</strong></p>
<p><strong>Update sell set</strong> <strong>册数</strong><strong>=<strong><strong>册数</strong></strong>-4 where bookid=”16”;</strong></p>
<p><strong>Update book set</strong> <strong>数量</strong><strong>=<strong><strong>数量</strong></strong>+4 where bookid=”16”;</strong></p>
<p><strong>Update sell,book</strong> </p>
<p><strong>Set sell.<strong><strong>册数</strong></strong>=<strong><strong>册数</strong></strong>-4<strong><strong>，</strong></strong>book.<strong><strong>数量</strong></strong>=<strong><strong>数量</strong></strong>+4</strong></p>
<p> **Where sell.<strong><strong>图书编号</strong></strong>=book.**<strong>图书编号</strong> <strong>and sell.<strong><strong>订单号</strong></strong>=”16”;</strong></p>
<p><strong>表名</strong>**.**<strong>字段名</strong> <strong>代表是：某个表中某字段</strong> </p>
<p><strong>SELL</strong></p>
<table>
<thead>
<tr>
<th><strong>订单号</strong></th>
<th><strong>册数</strong></th>
<th><strong>图书编号</strong></th>
<th><strong>图书名称</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>16</strong></td>
<td><strong>100-4</strong></td>
<td><strong>101</strong></td>
<td><strong>Mysql</strong></td>
</tr>
<tr>
<td><strong>15</strong></td>
<td><strong>500</strong></td>
<td><strong>102</strong></td>
<td><strong>数学</strong></td>
</tr>
</tbody></table>
<p><strong>Book</strong></p>
<table>
<thead>
<tr>
<th><strong>图书编号</strong></th>
<th><strong>数量</strong></th>
<th><strong>图书名称</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>101</strong></td>
<td><strong>2000+4</strong></td>
<td><strong>Mysql</strong></td>
</tr>
<tr>
<td><strong>102</strong></td>
<td><strong>1000</strong></td>
<td><strong>数学</strong></td>
</tr>
</tbody></table>
<p><strong>任务<strong><strong>3</strong></strong>：按条件删除表中错误或失效的数据</strong></p>
<p><strong>Delete</strong> <strong>、****truncate</strong> </p>
<p><strong>1）<strong><strong>使用</strong></strong>delete****语句删除表中的所有数据</strong></p>
<p><strong>Delete from</strong> <strong>表名；</strong></p>
<p><strong>2）****删除部分行的记录（数据）</strong></p>
<p><strong>Delete from</strong> <strong>表名</strong> <strong>where</strong> <strong>条件；</strong> <strong>&gt; &lt; =</strong></p>
<p><strong>1</strong> <strong>删除<strong><strong>student</strong></strong>中学号是<strong><strong>10501</strong></strong>的学生信息。</strong></p>
<p><strong>Delete from student where</strong> <strong>学号</strong><strong>=”10501”;</strong></p>
<p><strong>2</strong> <strong>将****score</strong> <strong>中平时成绩低于<strong><strong>60</strong></strong>分的学生信息删除。</strong></p>
<p><strong>delete from score where partscore&lt;60;</strong></p>
<p><strong>truncate</strong> <strong>快速删除表中数据</strong></p>
<p><strong>语法：****truncate table</strong> <strong>表名；</strong></p>
<p><strong>没有删除部分数据的功能</strong></p>
<p> <strong>区别：</strong></p>
<p>**Delete:**<strong>删除部分数据或者所有数据</strong> <strong>执行速度比较慢，删除后在日志中可以找回</strong></p>
<p><strong>Truncate<strong><strong>：删除表中所有数据，功能不可以使用</strong></strong>where****字句，执行速度快，不能找回</strong></p>
<p><strong>项目****5</strong> <strong>实现对学生信息的****简单查询</strong></p>
<p><strong>子任务一：查询数据库中部分字段的信息</strong></p>
<p><strong>Select*from</strong> <strong>表</strong>**–**<strong>查询表中所有字段的值</strong></p>
<p>*****<strong>：所有的列</strong></p>
<p><strong>查看<strong><strong>student</strong></strong>表中所有数据。</strong></p>
<p><strong>查询部分字段的值</strong> <strong>select</strong> <strong>字段名</strong> <strong>from</strong> <strong>表名</strong></p>
<p><strong>查询****student</strong> <strong>表中学生姓名的名单</strong></p>
<p><strong>Select</strong> <strong>姓名</strong> <strong>from student;</strong></p>
<p><strong>查询课程表（<strong><strong>course</strong></strong>）中所有的课程编号**</strong>(courseid)<strong><strong>和课程名</strong></strong>(coursename)**<strong>。</strong></p>
<p><strong>Select courseid,coursename from course;</strong></p>
<p><strong>Select</strong> <strong>计算功能</strong></p>
<p><strong>200*450</strong> </p>
<p><strong>Select 200*450;</strong></p>
<p><strong>Select”<strong><strong>鑫行你好帅</strong></strong>”;</strong></p>
<p>**Select now();**<strong>显示当前的时间</strong></p>
<p><strong>成绩表</strong></p>
<table>
<thead>
<tr>
<th><strong>Id</strong></th>
<th><strong>Name</strong></th>
<th><strong>mysql</strong></th>
<th><strong>c****语言</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>101</strong></td>
<td><strong>召开</strong></td>
<td><strong>90</strong></td>
<td><strong>80</strong></td>
</tr>
<tr>
<td><strong>102</strong></td>
<td><strong>陪严</strong></td>
<td><strong>87</strong></td>
<td><strong>78</strong></td>
</tr>
<tr>
<td><strong>103</strong></td>
<td><strong>新河</strong></td>
<td><strong>91</strong></td>
<td><strong>89</strong></td>
</tr>
</tbody></table>
<p><strong>查询每一位同学的总成绩</strong></p>
<p><strong>Select name as</strong> <strong>姓名</strong><strong>,mysql+c as****总成绩</strong> <strong>from score;</strong></p>
<p><strong>为所有的学生的<strong><strong>c</strong></strong>语言加上<strong><strong>10</strong></strong>分显示出来。</strong></p>
<p><strong>Select*,c**<strong>语言</strong></strong>+10 as** <strong>新<strong><strong>c</strong></strong>语言</strong> <strong>from score;</strong></p>
<p><strong>As</strong> <strong>：省略掉</strong></p>
<p><strong>Select</strong> <strong>字段名</strong> <strong>as</strong> <strong>列名</strong> </p>
<p><strong>任务<strong><strong>2</strong></strong>：根据指定的条件来进行查询</strong></p>
<p><strong>1****：消除结果集中的重复行</strong></p>
<p><strong>Student</strong> </p>
<table>
<thead>
<tr>
<th><strong>Id</strong></th>
<th><strong>姓名</strong></th>
<th><strong>生源地</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>01</strong></td>
<td><strong>鑫行</strong></td>
<td><strong>保定</strong></td>
</tr>
<tr>
<td><strong>02</strong></td>
<td><strong>佳豪</strong></td>
<td><strong>张家口</strong></td>
</tr>
<tr>
<td><strong>03</strong></td>
<td><strong>丽芳</strong></td>
<td><strong>保定</strong></td>
</tr>
</tbody></table>
<p>**Distinct:**<strong>有区别</strong> </p>
<p><strong>Select distinct</strong> <strong>字段</strong> <strong>from</strong> <strong>表名；</strong></p>
<p><strong>在<strong><strong>student</strong></strong>表中查询学生的生源地有哪些，去掉结果中重复行。</strong></p>
<p><strong>Select distinct</strong> <strong>生源地</strong> <strong>from student****；</strong></p>
<p><strong>在<strong><strong>stu</strong></strong>表中，查询学生的生源地和民族有哪些，去掉结果中的重复行。</strong></p>
<p><strong>Select distinct</strong> <strong>生源地</strong>**,<strong><strong>民族</strong> <strong>from stu</strong></strong>；**</p>
<p><strong>子任务****2</strong> <strong>实现有条件的筛选</strong></p>
<p> <strong>运算符</strong></p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>=</strong></td>
<td><strong>等于</strong></td>
<td><strong>检索项等于给定值</strong></td>
</tr>
<tr>
<td><strong>&lt;&gt;  !=</strong></td>
<td><strong>不等于</strong></td>
<td><strong>不等于</strong></td>
</tr>
<tr>
<td><strong>&lt; &lt;= &gt;   &gt;=</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>Between</strong></td>
<td><strong>在两者之间</strong></td>
<td><strong>检索项在给定的两个数值之间，包括二个端点值。</strong></td>
</tr>
<tr>
<td><strong>Is null</strong></td>
<td></td>
<td><strong>检查空值</strong></td>
</tr>
</tbody></table>
<p><strong>查询<strong><strong>student</strong></strong>表中生源地不是石家庄的同学的信息。</strong></p>
<p><strong>Select *from student where</strong> <strong>生源地</strong><strong>!=”<strong><strong>石家庄</strong></strong>”;</strong></p>
<p>​               <strong>&lt;&gt;</strong></p>
<p><strong>Where</strong> <strong>子句：</strong> <strong>查询符合条件的行，而不是所有的行</strong> </p>
<p><strong>Select</strong> <strong>字段名</strong> <strong>from</strong> <strong>表名</strong> <strong>where</strong> <strong>筛选条件。</strong></p>
<p><strong>Between</strong> <strong>表达****1 and</strong> <strong>表达****2</strong> </p>
<p><strong>表示的值在表达<strong><strong>1</strong></strong>和表达式<strong><strong>2</strong></strong>之间，包含表达式<strong><strong>1</strong></strong>和表达式****2</strong> </p>
<p><strong>查询所有期末成绩（<strong><strong>examscore</strong></strong>）在<strong><strong>80-90</strong></strong>之间的学生的成绩。****Score</strong></p>
<p><strong>Select*from score where examscore between 80 and 90;</strong></p>
<p><strong>Select*from score where examscore&gt;=80 and examscore&lt;=90;</strong></p>
<p> <strong>Not between</strong> <strong>表达****1 and</strong> <strong>表达****2</strong> <strong>：不包含表达<strong><strong>1</strong></strong>和表达****2</strong></p>
<p><strong>查询所有期末成绩（<strong><strong>examscore</strong></strong>）在<strong><strong>90</strong></strong>以上或者<strong><strong>70</strong></strong>分以下之间的学生的成绩。</strong></p>
<p><strong>Select*from score where examscore not between 70 and 90;</strong></p>
<p><strong>select*from score where examscore&gt;90 or examscore&lt;70;</strong></p>
<p><strong>查询课程表（<strong><strong>course</strong></strong>）中备注（<strong><strong>remark</strong></strong>）为空的课程信息。</strong></p>
<p><strong>Select*from course where remark is null;</strong></p>
<p><strong>查询课程表中备注不为空的课程信息。</strong></p>
<p><strong>Select*from course where remark is not null;</strong></p>
<p><strong>操作符：多条件的查询</strong></p>
<p><strong>Where****子句搭配使用：</strong></p>
<p><strong>And:</strong> <strong>两个或者多个条件同时满足，</strong></p>
<p>**Or:**<strong>满足多个条件中的任何一个就表示检索成功</strong></p>
<p>**In:**<strong>满足多个条件中的一个。</strong></p>
<p><strong>Like**<strong>：搭配</strong></strong>%<strong><strong>通配符和</strong></strong>_**<strong>通配符来实现模糊匹配。</strong></p>
<p><strong>And:</strong></p>
<p><strong>查询软件<strong><strong>1</strong></strong>班男生的信息。</strong></p>
<p><strong>Select*from student where</strong> <strong>班级</strong><strong>=”<strong><strong>软件一班</strong></strong>” and</strong> <strong>性别</strong><strong>=”<strong><strong>男</strong></strong>”****；</strong></p>
<p><strong>查询生源地为石家庄且为汉族的男生。</strong></p>
<p><strong>Select*from student where s**<strong>性别</strong></strong>=”<strong><strong>男</strong></strong>”and<strong><strong>生源地</strong></strong>=”<strong><strong>石家庄</strong></strong>” and** <strong>民族</strong><strong>=”<strong><strong>汉</strong></strong>”****；</strong></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之 “一人设计九人慌”</title>
    <url>/2023/02/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h1><h2 id="根据目的分类"><a href="#根据目的分类" class="headerlink" title="根据目的分类"></a>根据目的分类</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><p>​        用于描述”怎样创建对象“，他的主要特点是将对象的创建与使用分离</p>
<p>​        单例、原型、工厂方法、抽象工厂、建造者等物种创建型模式</p>
<h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><p>​        用于描述如何将类或对象按某种布局组成更大的结构</p>
<p>​        代理、适配器、桥接、装饰、外观、享元、组合等7种构造型模式</p>
<h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><p>​        用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责</p>
<p>​        模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等11种</p>
<h2 id="根据作用分类"><a href="#根据作用分类" class="headerlink" title="根据作用分类"></a>根据作用分类</h2><p><strong>（1）类模式：</strong></p>
<p>​          用于处理类与子类之间的继承关系，这些关系是静态的。</p>
<p>​          GoF中的工厂方法、（类）适配器、模板方法、解释器属于该模式</p>
<p><strong>（2）对象模式：</strong></p>
<p>​           用于处理对象之间的组合或聚合关系，具动态性。除了上述四种模式，都是对象                                                                     </p>
<h1 id="UML类图表示法"><a href="#UML类图表示法" class="headerlink" title="UML类图表示法"></a>UML类图表示法</h1><h2 id="类的表示方式"><a href="#类的表示方式" class="headerlink" title="类的表示方式"></a>类的表示方式</h2><p>​        在UML类图中，类使用包含类名、属性（field）和方法（method）且带有分割线的矩形表示，比如下面表示一个Employee类，它包含name、age和address这三个属性以及word方法</p>
<table>
<thead>
<tr>
<th>Employee</th>
</tr>
</thead>
<tbody><tr>
<td>-name：String   -age：int   -address：String</td>
</tr>
<tr>
<td>+work（）：void</td>
</tr>
</tbody></table>
<p>​        属性/方法名称前加的加号和减号表示这个属性/方法的可见性，UML图中表示可见性的符号有三种：</p>
<p>​        +：表示public</p>
<p>​        -：表示private</p>
<p>​        #：表示protected</p>
<h2 id="类与类之间的关系"><a href="#类与类之间的关系" class="headerlink" title="类与类之间的关系"></a>类与类之间的关系</h2><h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><h4 id="单向关联和双向关联"><a href="#单向关联和双向关联" class="headerlink" title="单向关联和双向关联"></a>单向关联和双向关联</h4><p>例如，一个学生选修一门特定的课程是学生类Student和课程类Course之间的一个关联，而一个教师教授一门课程是师资类Faculty和课程类Course之间的一个关联</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Course[] courses;</span><br><span class="line"></span><br><span class="line">          </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCourse</span><span class="params">(Course s)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Strudent[] students;</span><br><span class="line">    <span class="keyword">private</span> Faculty faculty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(Student s)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFaculty</span><span class="params">(Faculty faculty)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.faculty = faculty;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Faculty</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Course[] courses;</span><br><span class="line">           </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCourse</span><span class="params">(Course s)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><p>聚合是强关联关系，是整体和部分的关系</p>
<p>例如，一个公司有很多员工就是公司类Company和员工类Employee之间的一种聚合关系。被聚合对象和聚合对象有着各自的生命周期，即如果公司倒闭并不影响员工的存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Company</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Employee&gt; employees;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><p>组合表示类之间的整体与部分之间的关系，但它是一种更为强烈的聚合关系</p>
<p>整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不复存在。部分对象不能脱离整体对象而单独存在，就像头和嘴的关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">head</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Mouth mouth=<span class="keyword">new</span> <span class="title class_">Mouth</span>();  </span><br><span class="line">       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mouth</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>在代码中，某个类的方法通过局部变量，方法的参数或者对静态方法的调用来访问另一类中的某些方法来完成一些职责</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Driver</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">driver</span><span class="params">(Car car)</span> &#123;</span><br><span class="line">        car.move();</span><br><span class="line">    &#125;	<span class="comment">//当调用driver方法时，必定会使用形参car类对象</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>在继承的关系中，“子类就是一个父类”。也就是说，子类可以被当做父类看待</p>
<p>​       定义父类的格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 父类名称&#123;</span><br><span class="line"></span><br><span class="line">  …</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>​       定义子类的格式</p>
<p>​           </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 子类名称 extends 父类名称&#123;</span><br><span class="line"></span><br><span class="line">              …</span><br><span class="line"></span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>

<p>​       <strong>注：子类在引用时可以找到父类中的方法和变量，但是父类就只能调用自己的</strong></p>
<p>​       <strong>super****详解：</strong></p>
<p>​           <strong>1. super<strong><strong>是Java</strong></strong>的关键字，他是直接父类对象的引用</strong></p>
<p>​           *<em>2.<strong><strong>就像this</strong></strong>不能出现在static</em><em><strong>修饰的方法中一样，super</strong></em><em>也不能出现在static</em>*<strong>修饰的方法中</strong></p>
<p>​           **3.***<em>如果子类定义里父类同名的属性，也会发生子类属性覆盖父类属性的情形。子类的方法直接访问该属性，都会访问到覆盖属性，无法访问父类被覆盖的属性—<strong><strong>通过super</strong></strong>访问父类被覆盖的属性</em>*</p>
<p>​           *<em>4.<strong><strong>如果没有在子类中写super</strong></strong>，系统将会自动调用</em>*</p>
<p>​           *<em>5.<strong><strong>一般把super</strong></strong>写到方法的最前面</em>*</p>
<p>​       <strong>在继承中，当父类有构造方法时，子类一定会调用父类的构造方法</strong></p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>​    \1)    不能直接new抽象类对象，必须用一个子类来继承抽象父类</p>
<p>​    \2)    子类必须覆盖重写抽象父类的所有的抽象方法</p>
<p>​    重写和覆盖的实现：子类去掉抽象方法的abstract关键字，然后补上方法的大括号</p>
<p>​    \3)    创建子类对象进行使用</p>
<p>​    \4)    在抽象类中，不一定包含抽象对象，但是有抽象方法的类必须是抽象类</p>
<h1 id="软件设计原则"><a href="#软件设计原则" class="headerlink" title="软件设计原则"></a>软件设计原则</h1><p>在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据六条原则来开发程序，从而提高软件开发效率、节约软件开发和维护成本</p>
<h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>​    <strong>对扩展开放，对修改关闭。</strong>在程序需要进行扩展的时候，不能去修改原有的代码。实现一个热插拔的效果，简而言之，是为了是程序的扩展性好，易于维护和升级</p>
<p>想要达到这样的效果，我们需要使用接口和抽象类。</p>
<p>因为抽象类灵活性好，适应性广，只要抽象的合理，可以基本保证软件架构的稳定。而软件中容易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要根据需求重新派生一个实现类来扩展就可以了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractSkin</span> &#123;</span><br><span class="line"><span class="comment">//    输入法样式</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Default</span> <span class="keyword">extends</span> <span class="title class_">AbstractSkin</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是默认皮肤&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">AbstractSkin</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是用户自定义皮肤&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SougouInput</span> &#123;</span><br><span class="line"><span class="comment">//    创建抽象类对象</span></span><br><span class="line">    <span class="keyword">public</span> AbstractSkin skin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSkin</span><span class="params">(AbstractSkin skin)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.skin = skin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">skien</span><span class="params">(AbstractSkin skin)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.skin=skin;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>&#123;</span><br><span class="line">        skin.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">run</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        1.创建搜狗输入法</span></span><br><span class="line">        SougouInput sgi=<span class="keyword">new</span> <span class="title class_">SougouInput</span>();</span><br><span class="line"><span class="comment">//        2.创建皮肤对象</span></span><br><span class="line">        Default def=<span class="keyword">new</span> <span class="title class_">Default</span>();</span><br><span class="line"><span class="comment">//        3.将皮肤传入输入法</span></span><br><span class="line">        sgi.setSkin(def);</span><br><span class="line"><span class="comment">//        4.展示皮肤</span></span><br><span class="line">        sgi.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="里氏原则"><a href="#里氏原则" class="headerlink" title="里氏原则"></a>里氏原则</h2><p>子类可以扩展父类的功能，但不能改变父类原有的功能。即子类继承父类时，除添加新增功能外尽量不要重写父类方法</p>
<p>例子：正方形不是长方形</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">changfangxing</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getLength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">double</span> length)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">zhengfangxing</span> <span class="keyword">extends</span> <span class="title class_">changfangxing</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">double</span> length)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.setLength(length);</span><br><span class="line">        <span class="built_in">super</span>.setWidth(length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">double</span> width)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.setWidth(width);</span><br><span class="line">        <span class="built_in">super</span>.setLength(width);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RectangleDome</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        changfangxing cfx=<span class="keyword">new</span> <span class="title class_">changfangxing</span>();</span><br><span class="line">        cfx.setWidth(<span class="number">10</span>);</span><br><span class="line">        cfx.setLength(<span class="number">20</span>);</span><br><span class="line"><span class="comment">//        通过resize方法进行扩展</span></span><br><span class="line">        resize(cfx);</span><br><span class="line">        print(cfx);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        zhengfangxing zfx=<span class="keyword">new</span> <span class="title class_">zhengfangxing</span>();</span><br><span class="line">        zfx.setLength(<span class="number">10</span>);</span><br><span class="line">        resize(zfx);		<span class="comment">//会报错</span></span><br><span class="line">        print(zfx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">(changfangxing changfangxing)</span>&#123;			<span class="comment">//可以通过多态让正方形方法使用</span></span><br><span class="line">        <span class="keyword">while</span> (changfangxing.getWidth()&lt;=changfangxing.getLength())&#123;</span><br><span class="line">            changfangxing.setWidth(changfangxing.getLength()+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(changfangxing changfangxing)</span>&#123;</span><br><span class="line">        System.out.println(changfangxing.getLength());</span><br><span class="line">        System.out.println(changfangxing.getWidth());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更新后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Quadrilateral</span> &#123;</span><br><span class="line">    <span class="comment">//获取长</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">getlength</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//获取宽</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">getwidth</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">zhengfangxing</span> <span class="keyword">implements</span> <span class="title class_">Quadrilateral</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> side;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSide</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> side;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSide</span><span class="params">(<span class="type">double</span> side)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.side = side;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getlength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getwidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">changfangxing</span> <span class="keyword">implements</span> <span class="title class_">Quadrilateral</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">double</span> length)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getlength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getwidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RectangleDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        changfangxing changfangxing=<span class="keyword">new</span> <span class="title class_">changfangxing</span>();</span><br><span class="line">        changfangxing.setLength(<span class="number">20</span>);</span><br><span class="line">        changfangxing.setWidth(<span class="number">10</span>);</span><br><span class="line">        resize(changfangxing);</span><br><span class="line">        print(changfangxing);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    扩宽方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">(changfangxing changfangxing)</span>&#123;			<span class="comment">//因为没有继承关系所有正方形无法使用完美解决卡死问题</span></span><br><span class="line">        <span class="keyword">while</span> (changfangxing.getwidth()&lt;=changfangxing.getlength())&#123;</span><br><span class="line">            changfangxing.setWidth(changfangxing.getwidth()+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Quadrilateral quadrilateral)</span>&#123;</span><br><span class="line">        System.out.println(quadrilateral.getlength());</span><br><span class="line">        System.out.println(quadrilateral.getwidth());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="倒转依赖原则"><a href="#倒转依赖原则" class="headerlink" title="倒转依赖原则"></a>倒转依赖原则</h2><p>​    要对抽象进行编程不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p>
<p>​    例如：组装一台主机，要求有CPU、内存条、硬盘。而CPU有英特尔、AMD等，硬盘可以有希捷、西数，内存条可以选择金士顿和海盗船</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XijieDisk</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(String data)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用希捷硬盘存储数据为&quot;</span>+data);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用希捷硬盘取数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterCPU</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用因特尔处理器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KingSton</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用金士顿内存条&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> XijieDisk xijie;</span><br><span class="line">    <span class="keyword">private</span> InterCPU inter;</span><br><span class="line">    <span class="keyword">private</span> KingSton kingSton;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> XijieDisk <span class="title function_">getXijie</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> xijie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setXijie</span><span class="params">(XijieDisk xijie)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.xijie = xijie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> InterCPU <span class="title function_">getInter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> inter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInter</span><span class="params">(InterCPU inter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.inter = inter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> KingSton <span class="title function_">getKingSton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> kingSton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKingSton</span><span class="params">(KingSton kingSton)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.kingSton = kingSton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;运行计算机&quot;</span>);</span><br><span class="line">        String data=xijie.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;从硬盘上获取的数据是&quot;</span>+data);</span><br><span class="line">        inter.run();</span><br><span class="line">        kingSton.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">run</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        XijieDisk xijie=<span class="keyword">new</span> <span class="title class_">XijieDisk</span>();</span><br><span class="line">        InterCPU inter=<span class="keyword">new</span> <span class="title class_">InterCPU</span>();</span><br><span class="line">        KingSton kingSton=<span class="keyword">new</span> <span class="title class_">KingSton</span>();</span><br><span class="line"></span><br><span class="line">        Computer c=<span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        c.setInter(inter);</span><br><span class="line">        c.setXijie(xijie);</span><br><span class="line">        c.setKingSton(kingSton);</span><br><span class="line">        c.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue框架</title>
    <url>/2023/02/27/Vue%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="Vue框架"><a href="#Vue框架" class="headerlink" title="Vue框架"></a>Vue框架</h1><h2 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h2><h3 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a>Vue简介</h3><p>​                是一款用于构建用户界面的<strong>渐进式框架</strong></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>​                vue下载地址：<a href="https://unpkg.com/vue@3.2.36/dist/vue.global.js">https://unpkg.com/vue@3.2.36/dist/vue.global.js</a></p>
<h4 id="安装脚手架vite"><a href="#安装脚手架vite" class="headerlink" title="安装脚手架vite"></a>安装脚手架vite</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm init vite@latest vue-begin -- -- template vue</span><br><span class="line"></span><br><span class="line">运行</span><br><span class="line">cd 项目名</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h4 id="安装jquery库"><a href="#安装jquery库" class="headerlink" title="安装jquery库"></a>安装jquery库</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install jquery --save-dev</span><br></pre></td></tr></table></figure>

<h4 id="安装bootstrap"><a href="#安装bootstrap" class="headerlink" title="安装bootstrap"></a>安装bootstrap</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install  --save-dev bootstrap@<span class="number">3.4</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<h3 id="安装并使用jquery"><a href="#安装并使用jquery" class="headerlink" title="安装并使用jquery"></a>安装并使用jquery</h3><p>在vite中不具有使用jquery的配置，因此只能通过插件将webpack的jquery注入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">安装插件</span><br><span class="line">npm i jquery @rollup/plugin-inject -S</span><br></pre></td></tr></table></figure>



<h3 id="vue的特性"><a href="#vue的特性" class="headerlink" title="vue的特性"></a>vue的特性</h3><p>​                    Vue框架的特性主要体现在两个方面</p>
<p>​                        1.数据驱动视图</p>
<p>​                    在使用vue的页面中，vue会监听数据的变化，从而自动重新渲染结构</p>
<p>​                        2.双向数据绑定</p>
<h3 id="vue基本使用"><a href="#vue基本使用" class="headerlink" title="vue基本使用"></a>vue基本使用</h3><p>​                    1.导入vue.js的script的脚本文件</p>
<p>​                    2.在页面中声明一个将要被vue所控制的DOM区域</p>
<p>​                    3.创建vm实例化对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Vue应用通过createApp函数</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">      <span class="title function_">data</span>(<span class="params"></span>) &#123;		<span class="comment">//data 选项是一个函数。Vue 在创建新组件实例的过程中调用此函数</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!!&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#wai&#x27;</span>)	</span><br><span class="line"><span class="comment">//使用.mount将app挂载应用  </span></span><br><span class="line"><span class="comment">//一个应用需要被挂载到一个 DOM 元素中，以上代码使用 mount(&#x27;#wai&#x27;) 将 Vue 应用 app 挂载到 &lt;div id=&quot;wai&quot;&gt;&lt;/div&gt; 中</span></span><br></pre></td></tr></table></figure>

<h3 id="创建根组件（应用实例）"><a href="#创建根组件（应用实例）" class="headerlink" title="创建根组件（应用实例）"></a>创建根组件（应用实例）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Const</span> <span class="keyword">const</span>=<span class="title function_">createApp</span>(&#123;</span><br><span class="line">	<span class="comment">//根组件选项</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Vue 应用</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义一个名为 runoob 的新全局组件</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;runoob&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;自定义组件!&lt;/h1&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//引入根节点</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>我们传入的createApp实际上是一个根组件，其他的所有组件都隶属于这个根组件</p>
<h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h3><p>​                </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//最基本的格式就是用“&#123;&#123;  &#125;&#125;”</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  export default&#123;</span><br><span class="line">    name:&#x27;HelloWorld&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        msg:&quot;看见我就对了&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入原始HTML"><a href="#插入原始HTML" class="headerlink" title="插入原始HTML"></a>插入原始HTML</h3><p>使用v-html插入原始html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;link&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> export default&#123;</span><br><span class="line">  name:&#x27;HelloWorld&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      link:&quot;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;http://www.baidu.com&#x27;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Attribute-绑定"><a href="#Attribute-绑定" class="headerlink" title="Attribute 绑定"></a>Attribute 绑定</h3><p>可以动态更改id、class和自定义名称    :id    :class</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 :id=&quot;hao&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  export default&#123;</span><br><span class="line">    name:&#x27;HelloWorld&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        msg:&quot;看见我就对了&quot;,</span><br><span class="line">        hao:&quot;ma&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用js表达式"><a href="#使用js表达式" class="headerlink" title="使用js表达式"></a>使用js表达式</h3><p>vue已经全面支持js完整表达式，可以在双括号中进行js运算和判断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;div :id=&quot;`list-$&#123;id&#125;`&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="v-bind属性绑定"><a href="#v-bind属性绑定" class="headerlink" title="v-bind属性绑定"></a>v-bind属性绑定</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	v-bind指令主要用于**响应式的更新html的属性**</span><br><span class="line"></span><br><span class="line">​	一般我们要想在元素节点的属性上绑定vue的data数据是不可以直接使用“&#123;&#123;&#125;&#125;”插入值语法来使用</span><br><span class="line"></span><br><span class="line">​	如果我们想让dom属性节点与data数据绑定响应就需要使用v-bind指令</span><br></pre></td></tr></table></figure>

<p>例如：为h1添加title属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:title</span>=<span class="string">&quot;tit&quot;</span>&gt;</span>这是一个h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app=<span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">tit</span>:<span class="string">&quot;abcd&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;div&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例如：添加class类active</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;static&quot; :class=&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    classObject: &#123;</span><br><span class="line">      active: true,</span><br><span class="line">      &#x27;text-danger&#x27;: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">则等同于class=&quot;static isActice&quot;</span><br></pre></td></tr></table></figure>

<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>只有当v-if条件为真时才进行渲染，否则不显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 v-if=&quot;flag&quot;&gt;Vue is awesome!&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  export default&#123;</span><br><span class="line">    name:&#x27;HelloWorld&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        flag:true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><p>用于为v-if设置另一个选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button @click=&quot;awesome = !awesome&quot;&gt;Toggle&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1 v-if=&quot;awesome&quot;&gt;Vue is awesome!&lt;/h1&gt;</span><br><span class="line">&lt;h1 v-else&gt;Oh no 😢&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  export default&#123;</span><br><span class="line">    name:&#x27;HelloWorld&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        flag:true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="v-show和v-if的区别"><a href="#v-show和v-if的区别" class="headerlink" title="v-show和v-if的区别"></a>v-show和v-if的区别</h3><p>v-if在设置false之后是见不到这个DOM元素的，而v-show则会相当于加了display属性none一样</p>
<h2 id="v-for列表渲染"><a href="#v-for列表渲染" class="headerlink" title="v-for列表渲染"></a>v-for列表渲染</h2><p>用v-for将一个数组映射为一组元素</p>
<p>v-for指令需要使用item in items形式的特殊语法，其中items是源数据数组，而item则是被迭代的数组元素的别名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in aaa&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;item.title&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  export default&#123;</span><br><span class="line">  name:&#x27;HelloWorld&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      aaa:[&#123;</span><br><span class="line">        id:1,</span><br><span class="line">        title:&quot;第一个列表&quot;</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        id:2,</span><br><span class="line">        title:&quot;第二个列表&quot;</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        id:3,</span><br><span class="line">        title:&quot;第三个列表&quot;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例子：点击添加数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>班级<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in students&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.sex&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">students</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&quot;alice&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">sex</span>: <span class="string">&#x27;female&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&quot;marry&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">age</span>: <span class="number">19</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">sex</span>: <span class="string">&#x27;female&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;]</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> user = &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="string">&#x27;004&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">age</span>: <span class="string">&#x27;21&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">students</span>.<span class="title function_">push</span>(user)	<span class="comment">//添加</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">del</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">students</span>.<span class="title function_">pop</span>()			<span class="comment">//删除</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        app.<span class="title function_">mount</span>(<span class="string">&quot;#center&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>使用@+事件进行绑定，methods里面写函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;dianji&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;++num&quot;</span>&gt;</span>按钮&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  export default&#123;</span><br><span class="line">  name:&#x27;HelloWorld&#x27;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    dianji()&#123;</span><br><span class="line">      num+=1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h2><p>v-model设置表单双向绑定（输入什么就获取什么），v-model=”huoqv.lazy”在失去焦点时获取内容    .number自动将输入的内容转化为数字    .trim自动去除两端的空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;huoqv&quot;&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;huoqv&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  export default&#123;</span><br><span class="line">    name:&#x27;HelloWorld&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        huoqv:&quot;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="事件处理-1"><a href="#事件处理-1" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul>
<li><code>.stop</code>：点击事件将停止传递</li>
<li><code>.prevent</code>：点击超链接之类不再重新加载</li>
<li><code>.self</code>：当有多个父级子级时只有点击它本身才回触发</li>
<li><code>.capture：谁有该事件修饰符，就先触发谁</code></li>
<li><code>.once</code>：只触发一次</li>
<li><code>.passive</code>：事件的默认行为，立即执行无需等待</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">	&lt;div style=<span class="string">&quot;width: 500px; height: 500px; background: red;&quot;</span> <span class="meta">@click</span>.stop=<span class="string">&quot;clickdiv1&quot;</span>&gt;</span><br><span class="line">		&lt;div style=<span class="string">&quot;width: 300px; height: 300px; background: blue;&quot;</span> <span class="meta">@click</span>.stop=<span class="string">&quot;clickdiv2&quot;</span>&gt;</span><br><span class="line">						</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>用于处理一些复杂逻辑运算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body <span class="keyword">class</span>=<span class="string">&quot;body&quot;</span>&gt;</span><br><span class="line">		&lt;input type=&quot;text&quot; v-model=str1 &gt;&lt;br&gt;</span><br><span class="line">		&lt;input type=&quot;text&quot; v-model=str2 &gt;</span><br><span class="line">		&lt;h2&gt;&#123;&#123;hn&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">	&lt;script&gt;</span><br><span class="line">		const app = Vue.createApp(&#123;</span><br><span class="line">			data() &#123;</span><br><span class="line">					return &#123;</span><br><span class="line">						str1: &#x27;&#x27;,</span><br><span class="line">						str2: &#x27;&#x27;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">			computed: &#123;</span><br><span class="line">				hn: &#123;</span><br><span class="line">					get() &#123;</span><br><span class="line">						return (this.str1.toUpperCase() + &quot; &quot; + this.str2.toUpperCase()).split(&#x27;&#x27;).reverse().join(&#x27;&#x27;);</span><br><span class="line">					&#125;,</span><br><span class="line">					set(newnum)&#123;</span><br><span class="line">						var new1 = newnum.split(&quot; &quot;)</span><br><span class="line">						this.str1=new1[0]</span><br><span class="line">						this.str2=new1[1]</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">		app.mount(&quot;.body&quot;)</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="监听属性"><a href="#监听属性" class="headerlink" title="监听属性"></a>监听属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">	&lt;body&gt;</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气是&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changWeacher&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气是&#123;&#123;weather&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changWeacher&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;!-- 	侦听属性watch：</span><br><span class="line">	<span class="number">1.</span>当被侦听的属性发生改变时，会自动去执行回调属性 --&gt;</span><br><span class="line">	&lt;script&gt;</span><br><span class="line">		<span class="keyword">const</span> con=<span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">			<span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="keyword">return</span>&#123;</span><br><span class="line">					<span class="attr">isHot</span>:<span class="literal">true</span>,</span><br><span class="line">					<span class="attr">weather</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">methods</span>:&#123;</span><br><span class="line">				<span class="title function_">changWeacher</span>(<span class="params"></span>)&#123;</span><br><span class="line">					<span class="variable language_">this</span>.<span class="property">isHot</span>=!<span class="variable language_">this</span>.<span class="property">isHot</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">watch</span>:&#123;</span><br><span class="line">				<span class="attr">isHot</span>:&#123;</span><br><span class="line">					<span class="comment">// 当isHot值改变时自动调用下面的方法</span></span><br><span class="line">					<span class="title function_">handler</span>(<span class="params">newVal,oldVal</span>)&#123;</span><br><span class="line">						<span class="variable language_">this</span>.<span class="property">weather</span>=newVal?<span class="string">&quot;炎热&quot;</span>:<span class="string">&quot;凉爽&quot;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					<span class="comment">// 初始化时,让handler先执行一次</span></span><br><span class="line">					<span class="attr">immediate</span>:<span class="literal">true</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">		</span><br><span class="line">		con.<span class="title function_">mount</span>(<span class="string">&quot;#div1&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="过滤器filter（vue3弃用）"><a href="#过滤器filter（vue3弃用）" class="headerlink" title="过滤器filter（vue3弃用）"></a>过滤器filter（vue3弃用）</h2><h3 id="过滤器作用"><a href="#过滤器作用" class="headerlink" title="过滤器作用"></a>过滤器作用</h3><p>​    用来格式化数据的一个函数。过滤器<strong>不会修改原始数据</strong>，它的作用是过滤数据，就是对数据进行加工处理并返回处理后的数据，比如做一些数据格式上的修改，状态修改等。</p>
<h3 id="过滤器分为两种"><a href="#过滤器分为两种" class="headerlink" title="过滤器分为两种"></a>过滤器分为两种</h3><p>​        组件内的过滤器（组件内有效）</p>
<p>​        全局过滤器（所有组件共享）</p>
<h3 id="定义过滤器"><a href="#定义过滤器" class="headerlink" title="定义过滤器"></a>定义过滤器</h3><ul>
<li><p>第一个参数是过滤器的名字</p>
</li>
<li><p>第二个参数是过滤器的功能函数（若不定义vue就不知道这个字符串是什么，有什么作用）</p>
<p>过滤器的功能函数</p>
<ul>
<li>声明function(data,argv1,argv2…){}</li>
<li>第一个参数是传入的要过滤的数据，即调用时管道符左边的内容</li>
<li>第二个参数开始就是调用过滤器的时候传入的参数</li>
</ul>
</li>
</ul>
<h3 id="过滤器的使用"><a href="#过滤器的使用" class="headerlink" title="过滤器的使用"></a>过滤器的使用</h3><blockquote>
<ul>
<li><p>先注册，后使用</p>
</li>
<li><p>组件内 filters:{过滤器：fn} fn内通过return返回最终的数据</p>
</li>
<li><p>全局Vue.filter(‘过滤器名’，fn) fn内通过return返回最终的数据</p>
</li>
<li><p>使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;数据 | 过滤器名&#125;&#125;</span><br></pre></td></tr></table></figure>

<p> 管道符 | 右边是过滤器名称，即文本功能函数</p>
</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;price | filter_addPricePrefix&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;price | filter_addPricePrefix |filter_addPriceSuffix&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">price</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">filter_addPricePrefix</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="string">&quot;¥&quot;</span> + value;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">filter_addPriceSuffix</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> value + <span class="string">&quot;元&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.test</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="过渡和动画"><a href="#过渡和动画" class="headerlink" title="过渡和动画"></a>过渡和动画</h2><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><p>​        进入（显示，创建）</p>
<p>​            v-enter-from 进入前</p>
<p>​            v-enter-active 进入中</p>
<p>​            v-enter-to 进入后</p>
<p>​        离开（隐藏，移除）</p>
<p>​            v-leave-from 离开前 </p>
<p>​            v-leave-active 离开中</p>
<p>​            v-leave-to 离开后</p>
<p>​    <b>这里的v指的是默认前缀如果transition标签中设置了name属性可替代为name-enter-from</b></p>
<p><img src="/img/Vue%E6%A1%86%E6%9E%B6/gd.gif" alt="gd" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">		<span class="selector-class">.dong-enter-active</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">transition</span>: all .<span class="number">3s</span> ease;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-class">.dong-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">		  <span class="attribute">transition</span>: all .<span class="number">8s</span> <span class="built_in">cubic-bezier</span>(<span class="number">1.0</span>, <span class="number">0.5</span>, <span class="number">0.8</span>, <span class="number">1.0</span>);</span></span><br><span class="line"><span class="language-css">		&#125;隐藏中的过度</span></span><br><span class="line"><span class="language-css">		<span class="selector-class">.dong-enter-from</span>, <span class="selector-class">.dong-leave-to</span>&#123;</span></span><br><span class="line"><span class="language-css">		  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">10px</span>);</span></span><br><span class="line"><span class="language-css">		  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;databinding&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;dong&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>动画实例<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">const</span> vm = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;);</span></span><br><span class="line"><span class="language-javascript">		vm.<span class="title function_">mount</span>(<span class="string">&quot;body&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>​                                                    <img src="/img/Vue%E6%A1%86%E6%9E%B6/dh.gif" alt="dh" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">		<span class="selector-class">.dong-enter-active</span> &#123;</span></span><br><span class="line"><span class="language-css">		  <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-class">.dong-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">		  <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span> reverse;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="keyword">@keyframes</span> bounce-in &#123;</span></span><br><span class="line"><span class="language-css">		  <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">		    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">		  &#125;</span></span><br><span class="line"><span class="language-css">		  <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">		    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span></span><br><span class="line"><span class="language-css">		  &#125;</span></span><br><span class="line"><span class="language-css">		  <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">		    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">		  &#125;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;databinding&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;dong&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>闫雨萌<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">const</span> vm = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;);</span></span><br><span class="line"><span class="language-javascript">		vm.<span class="title function_">mount</span>(<span class="string">&quot;body&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="通过自定义动画"><a href="#通过自定义动画" class="headerlink" title="通过自定义动画"></a>通过自定义动画</h3><p>​                                                                                    <img src="/img/Vue框架/zdydh.gif" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/animate.css@3.5.1&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;databinding&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span> = <span class="string">&quot;show = !show&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">		    <span class="attr">name</span>=<span class="string">&quot;custom-classes-transition&quot;</span></span></span><br><span class="line"><span class="tag">		    <span class="attr">enter-active-class</span>=<span class="string">&quot;animated tada&quot;</span></span></span><br><span class="line"><span class="tag">		    <span class="attr">leave-active-class</span>=<span class="string">&quot;animated bounceOutRight&quot;</span></span></span><br><span class="line"><span class="tag">		&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>闫雨萌<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">const</span> vm = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">						<span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">					&#125;</span></span><br><span class="line"><span class="language-javascript">					</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;);</span></span><br><span class="line"><span class="language-javascript">			vm.<span class="title function_">mount</span>(<span class="string">&quot;body&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="结合Velocity-js实现动画"><a href="#结合Velocity-js实现动画" class="headerlink" title="结合Velocity.js实现动画"></a>结合Velocity.js实现动画</h3><p><img src="/img/Vue%E6%A1%86%E6%9E%B6/QQ%E5%BD%95%E5%B1%8F20221121172034.gif" alt="QQ录屏20221121172034" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show=!show&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">transition</span> @<span class="attr">before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span> @<span class="attr">enter</span>=<span class="string">&quot;enter&quot;</span> @<span class="attr">leave</span>=<span class="string">&quot;leave&quot;</span> <span class="attr">v-bind:css</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>文字动画效果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">const</span> app=<span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">show</span>:<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">beforeEnter</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				el.<span class="property">style</span>.<span class="property">opacity</span>=<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">				el.<span class="property">style</span>.<span class="property">transformOrigin</span>=<span class="string">&#x27;left&#x27;</span></span></span><br><span class="line"><span class="language-javascript">				el.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">enter</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title class_">Velocity</span>(el,&#123;<span class="attr">opacity</span>:<span class="number">1</span>,<span class="attr">fontSize</span>:<span class="string">&#x27;1.4em&#x27;</span>&#125;,&#123;<span class="attr">duration</span>:<span class="number">300</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">				<span class="title class_">Velocity</span>(el,&#123;<span class="attr">fontSize</span>:<span class="string">&#x27;1em&#x27;</span>&#125;,&#123;<span class="attr">complete</span>:done&#125;)</span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">leave</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title class_">Velocity</span>(el,&#123;<span class="attr">translateX</span>:<span class="string">&#x27;15px&#x27;</span>,<span class="attr">rotateZ</span>:<span class="string">&#x27;50deg&#x27;</span>&#125;,&#123;<span class="attr">duration</span>:<span class="number">300</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">				<span class="title class_">Velocity</span>(el,&#123;<span class="attr">rotateZ</span>:<span class="string">&#x27;100deg&#x27;</span>&#125;,&#123;<span class="attr">loop</span>:<span class="number">1</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">				<span class="title class_">Velocity</span>(el,&#123;<span class="attr">rotateZ</span>:<span class="string">&#x27;45deg&#x27;</span>,<span class="attr">translateY</span>:<span class="string">&#x27;30px&#x27;</span>,<span class="attr">translateX</span>:<span class="string">&#x27;30px&#x27;</span>,<span class="attr">opacity</span>:<span class="number">0</span>&#125;,&#123;<span class="attr">complete</span>:done&#125;)</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//Velocity函数的第一个参数是DOM元素，第二个参数是用来传入css参数列表，第三个参数表示动画配置</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript">	app.<span class="title function_">mount</span>(<span class="string">&quot;div&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><p>创建组件并赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">       </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">component</span>(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">aaa</span>:[&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>:<span class="string">&quot;火锅&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>:<span class="string">&quot;烧烤&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>:<span class="string">&quot;小龙虾&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>:<span class="string">&quot;牛排&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;ul :style=&quot;&#x27;background-color:#80c7ec&#x27;&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;li v-for=&#x27;item in aaa&#x27;&gt;&#123;&#123;item.title&#125;&#125;&lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;/ul&gt;`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br></pre></td></tr></table></figure>

<p>Vue单文件组件，是一种特殊的文件格式，它允许将vue组件的模板、逻辑样式封装在单个文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script &gt;</span><br><span class="line">import learn from &#x27;./components/learn.vue&#x27;		//this</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">  name:&quot;App&quot;,</span><br><span class="line">  components: &#123; learn &#125;		//this</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;a href=&quot;https://vitejs.dev&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;/vite.svg&quot; class=&quot;logo&quot; alt=&quot;Vite logo&quot; /&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;https://vuejs.org/&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;./assets/vue.svg&quot; class=&quot;logo vue&quot; alt=&quot;Vue logo&quot; /&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">  &lt;HelloWorld msg=&quot;Vite + Vue&quot; /&gt;</span><br><span class="line">  &lt;learn/&gt;					&lt;!--this--&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.logo &#123;</span><br><span class="line">  height: 6em;</span><br><span class="line">  padding: 1.5em;</span><br><span class="line">  will-change: filter;</span><br><span class="line">&#125;</span><br><span class="line">.logo:hover &#123;</span><br><span class="line">  filter: drop-shadow(0 0 2em #646cffaa);</span><br><span class="line">&#125;</span><br><span class="line">.logo.vue:hover &#123;</span><br><span class="line">  filter: drop-shadow(0 0 2em #42b883aa);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="加载组件"><a href="#加载组件" class="headerlink" title="加载组件"></a>加载组件</h3><p>第一步：引入组件    import learn from ‘./components/learn.vue’</p>
<p>第二步：挂载组件    export default{<br>                                  name:”App”,<br>                                  components: { learn }        //this<br>                                }</p>
<p>第三步：显示挂件    <learn/></p>
<h3 id="Props组件交互"><a href="#Props组件交互" class="headerlink" title="Props组件交互"></a>Props组件交互</h3><p>组件和组件之间是存在交互的，否则完全没有关系</p>
<p>props是你可以在组件上注册的一些自定义attribute</p>
<p>props交互示意图：</p>
<p><img src="/img/Vue%E6%A1%86%E6%9E%B6/QQ%E6%88%AA%E5%9B%BE20221124213859.png" alt="QQ截图20221124213859" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">App.vue</span><br><span class="line">&lt;learn :title=&quot;title&quot; :names=&quot;names&quot;/&gt;</span><br><span class="line">    </span><br><span class="line">&lt;script&gt;</span><br><span class="line">  name:&quot;App&quot;,</span><br><span class="line">  components: &#123; learn &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      title:&quot;我是一个标题&quot;,</span><br><span class="line">      names:[&quot;LiMing&quot;,&quot;Jenny&quot;,&quot;Danny&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">learn.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;title&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;</span><br><span class="line">        name:&quot;learn&quot;,</span><br><span class="line">        props:&#123;</span><br><span class="line">            title:&#123;</span><br><span class="line">                type:String,			&lt;!--数组和对象必须使用函数进行返回--&gt;</span><br><span class="line">                default:&quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            names:&#123;</span><br><span class="line">                type:Array,</span><br><span class="line">                default:function()&#123;</span><br><span class="line">                    return []</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">name</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">component</span>(<span class="string">&quot;parent&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;name&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&#x27;&lt;h4&gt;我的名字是&#123;&#123;name&#125;&#125;&lt;/h4&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;#aaa&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;aaa&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#80c7ec&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">site</span> <span class="attr">v-for</span>=<span class="string">&quot;lis in lise&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;lis.title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">lise</span>:[</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">title</span>:<span class="string">&quot;火锅&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">title</span>:<span class="string">&quot;烧烤&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">title</span>:<span class="string">&quot;小龙虾&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">title</span>:<span class="string">&quot;啤酒&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">component</span>(<span class="string">&quot;site&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`&lt;li&gt;&#123;&#123;title&#125;&#125;&lt;/li&gt;`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;#aaa&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="自定义事件组件交互"><a href="#自定义事件组件交互" class="headerlink" title="自定义事件组件交互"></a>自定义事件组件交互</h3><p>自定义事件可以在组件中反向传递数据，prop可以将数据从父组件传到子组件，那么反向将数据从父组件传到子组件就可以使用自定义事件$emit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">learn.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;button @click=&quot;pao&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;</span><br><span class="line">        name:&quot;learn&quot;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                message:&quot;我是learn数据&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            pao()&#123;</span><br><span class="line">                this.$emit(&quot;run&quot;,this.message)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;MyComponent @run=&quot;pao&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import MyComponent from &#x27;./compents/MyComponent.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">  name:&quot;App&quot;,</span><br><span class="line">  components: &#123; learn &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    run(date)&#123;</span><br><span class="line">      console.log(date)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="slot插槽"><a href="#slot插槽" class="headerlink" title="slot插槽"></a>slot插槽</h2><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><p>​    子类模板中定义一个slot插槽标签，父类使用组件时会自动将chacao自定义标签内部的标签替换掉子组件中的slot插槽标签</p>
<p>​        App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">chacao</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">chacao</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">chacao</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">chacao</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        chacao.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是content组件内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>​    在子组件的插槽标签slot中设置name属性，当父组件替换子标签中的slot会通过template标签中的v-slot属性去寻找对应的name值并完成对应的替换。</p>
<p>​        App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">chacao</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:button</span>&gt;</span></span><br><span class="line">   	 	<span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:input</span>&gt;</span></span><br><span class="line">   	 	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">chacao</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        changcao.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是content组件内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而没有被设置名字的则会通过设置默认值来进行被父组件的替换</p>
<p><img src="/img/Vue%E6%A1%86%E6%9E%B6/image-20221125173349689.png" alt="image-20221125173349689" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="插槽作用域"><a href="#插槽作用域" class="headerlink" title="插槽作用域"></a>插槽作用域</h3><p>插槽就是子组件中的提供给父组件使用的一个占位符，用slot表示，父组件可以在这个占位符中填充任何模板代码，如 HTML、组件等，填充的内容会替换子组件的slot标签。插槽<strong>显不显示</strong>、<strong>显示什么结构</strong>是由<strong>父组件</strong>来控制的，而插槽<strong>在哪里显示</strong>就由<strong>子组件</strong>来进行控制</p>
<p>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> chacao <span class="keyword">from</span> <span class="string">&#x27;./components/chacao.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;chacao&#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chacao</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;chide&quot;</span>&gt;</span>			//v-slot:default用来接收子类传来的数据</span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你可以选择吃东西<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in chide.eat&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">chacao</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chacao</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;wande&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你可以选择看玩游戏<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in wande.game&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">chacao</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chacao</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;wande&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你可以选择看电影<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in wande.movie&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">chacao</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>chacao.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:eat</span>=<span class="string">&quot;eat&quot;</span> <span class="attr">:game</span>=<span class="string">&quot;game&quot;</span> <span class="attr">:movie</span>=<span class="string">&quot;movie&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">eat</span>:[<span class="string">&#x27;火锅&#x27;</span>,<span class="string">&#x27;烧烤&#x27;</span>,<span class="string">&#x27;小龙虾&#x27;</span>,<span class="string">&#x27;牛排&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">game</span>:[<span class="string">&#x27;GTA5&#x27;</span>,<span class="string">&#x27;地平线&#x27;</span>,<span class="string">&#x27;看门狗&#x27;</span>,<span class="string">&#x27;使命召唤&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">movie</span>:[<span class="string">&#x27;盗梦空间&#x27;</span>,<span class="string">&#x27;战狼&#x27;</span>,<span class="string">&#x27;肖申克的救赎&#x27;</span>,<span class="string">&#x27;阿甘正传&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="跨级通信"><a href="#跨级通信" class="headerlink" title="跨级通信"></a>跨级通信</h2><p>在组建的嵌套中如果单纯使用props会变得非常复杂，因此我们可以使用provide和inject</p>
<p>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> zi <span class="keyword">from</span> <span class="string">&#x27;./components/zi.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;chacao,zi&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="string">&quot;parent&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">obj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">message</span>:<span class="string">&quot;父组件的信息&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">provide</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="function">()=&gt;</span><span class="variable language_">this</span>.<span class="property">message</span>		<span class="comment">//传走message数据</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zi</span>&gt;</span><span class="tag">&lt;/<span class="name">zi</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;message=&#x27;你好&#x27;&quot;</span>&gt;</span>改变message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;obj.message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>zi.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sun</span>&gt;</span><span class="tag">&lt;/<span class="name">sun</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> sun <span class="keyword">from</span> <span class="string">&#x27;./sun.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        sun</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>sun.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是sun组件&#123;&#123;message()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>	<span class="comment">&lt;!--this--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">inject</span>:[<span class="string">&#x27;message&#x27;</span>]			<span class="comment">//接收message方法传给h2</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/Vue%E6%A1%86%E6%9E%B6/image-20221126095934014.png" alt="image-20221126095934014" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>点击后：<img src="/img/Vue%E6%A1%86%E6%9E%B6/image-20221126095949170.png" alt="image-20221126095949170" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="生命周期（钩子函数）"><a href="#生命周期（钩子函数）" class="headerlink" title="生命周期（钩子函数）"></a>生命周期（钩子函数）</h2><p><b>给了用户在不同阶段添加要执行的函数</b></p>
<p>1、beforeCreate（创建前）</p>
<p>表示实例完全被创建出来之前，vue 实例的挂载元素$el和数据对象 data 都为 undefined，还未初始化。</p>
<p>2、created（创建后）</p>
<p>数据对象 data 已存在，可以调用 methods 中的方法，操作 data 中的数据，但 dom 未生成，$el 未存在 。</p>
<p>3、beforeMount（挂载前）</p>
<p>vue 实例的 $el 和 data 都已初始化，挂载之前为虚拟的 dom节点，模板已经在内存中编辑完成了，但是尚未把模板渲染到页面中。data.message 未替换。</p>
<p>4、mounted（挂载后）</p>
<p>vue 实例挂载完成，data.message 成功渲染。内存中的模板，已经真实的挂载到了页面中，用户已经可以看到渲染好的页面了。实例创建期间的最后一个生命周期函数，当执行完 mounted 就表示，实例已经被完全创建好了，DOM 渲染在 mounted 中就已经完成了。</p>
<p>5、beforeUpdate（更新前）</p>
<p>当 data 变化时，会触发beforeUpdate方法 。data 数据尚未和最新的数据保持同步。</p>
<p>6、updated（更新后）</p>
<p>当 data 变化时，会触发 updated 方法。页面和 data 数据已经保持同步了。</p>
<p>7、beforeDestory（销毁前）</p>
<p>组件销毁之前调用 ，在这一步，实例仍然完全可用。</p>
<p>8、destoryed（销毁后）</p>
<p>组件销毁之后调用，对 data 的改变不会再触发周期函数，vue 实例已解除事件监听和 dom绑定，但 dom 结构依然存在。</p>
<h2 id="Vue引入第三方"><a href="#Vue引入第三方" class="headerlink" title="Vue引入第三方"></a>Vue引入第三方</h2><p>安装swiper</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安装指定版本：npm install --save swiper@8.4.1</span><br></pre></td></tr></table></figure>

<p>基础实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Swiper&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/梅西.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/C罗.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/德布劳内.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/莱万多夫斯基.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/内马尔.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/萨拉赫.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">  &lt;/Swiper&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#x27;swiper/css&#x27;</span><br><span class="line">import &#123; Swiper, SwiperSlide &#125; from &#x27;swiper/vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">	name:&quot;carousel&quot;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Swiper,</span><br><span class="line">      SwiperSlide,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>添加分页效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Swiper :modules=&quot;modules&quot; :pagination=&quot;&#123;clickable:true&#125;&quot;&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/梅西.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/C罗.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/德布劳内.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/莱万多夫斯基.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/内马尔.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;swiper-slide&gt;&lt;img src=&quot;../../img/萨拉赫.jpg&quot;&gt;&lt;/swiper-slide&gt;</span><br><span class="line">  &lt;/Swiper&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#x27;swiper/css&#x27;</span><br><span class="line">import&#123; Pagination&#125; from &#x27;swiper&#x27;;</span><br><span class="line">import &#123; Swiper, SwiperSlide &#125; from &#x27;swiper/vue&#x27;</span><br><span class="line">import &#x27;swiper/css/pagination&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">	name:&quot;carousel&quot;,</span><br><span class="line">	data()&#123;</span><br><span class="line">		return&#123;</span><br><span class="line">			modules:[Pagination]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Swiper,</span><br><span class="line">      SwiperSlide,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Axios网络请求"><a href="#Axios网络请求" class="headerlink" title="Axios网络请求"></a>Axios网络请求</h2><h3 id="什么是Axios"><a href="#什么是Axios" class="headerlink" title="什么是Axios"></a>什么是Axios</h3><p>​            Axios是一个基于promise的异步ajax请求库 </p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save axios</span><br><span class="line"></span><br><span class="line">post请求参数是需要额外处理的</span><br><span class="line">npm install --save querystring</span><br><span class="line"></span><br><span class="line">data:qs.stringify(&#123;</span><br><span class="line">				</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>​    在组件中引用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123;aaa&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &quot;axios&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">	name:&quot;carousel&quot;,</span><br><span class="line">	data()&#123;</span><br><span class="line">		return&#123;</span><br><span class="line">			aaa:&quot;&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	mounted() &#123;		//挂载后执行</span><br><span class="line">		axios(&#123;</span><br><span class="line">			method:&quot;get&quot;,</span><br><span class="line">			url:&quot;/src/components/1.txt&quot;,</span><br><span class="line">			// data:qs.stringify(&#123;</span><br><span class="line">				</span><br><span class="line">			// &#125;)</span><br><span class="line">		&#125;).then(res=&gt;&#123;</span><br><span class="line">			this.aaa=res.data</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">      </span><br><span class="line">     //简写方法</span><br><span class="line">      mounted()&#123;</span><br><span class="line">          axios.get(&quot;/src/components/1.txt&quot;).then(res=&gt;&#123;</span><br><span class="line">              this.aaa=res.data</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>​    使用全局引用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="vue路由"><a href="#vue路由" class="headerlink" title="vue路由"></a>vue路由</h2><h3 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h3><p>​    可以让Vue.js构建单页应用实现不刷新跳转变得轻而易举</p>
<h3 id="安装路由"><a href="#安装路由" class="headerlink" title="安装路由"></a>安装路由</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save vue-router</span><br></pre></td></tr></table></figure>

<h3 id="引入、使用路由"><a href="#引入、使用路由" class="headerlink" title="引入、使用路由"></a>引入、使用路由</h3><p>​    1.新建两个文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HomeView.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AboutView.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;关于&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>​    2.创建配置文件</p>
<p>​        index.js（在components文件夹中）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置文件</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>	<span class="comment">//固定配置</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AboutView</span> <span class="keyword">from</span> <span class="string">&#x27;./AboutView.vue&#x27;</span>			<span class="comment">//文件1</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;./HomeView.vue&#x27;</span>			<span class="comment">//文件2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置信息中需要页面的相关配置</span></span><br><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/about&quot;</span>,				<span class="comment">//设置访问地址</span></span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">AboutView</span>			<span class="comment">//对应文件</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">HomeView</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),		<span class="comment">//可以替换为createWebHistory但是容易引起404所以需要后台配合</span></span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<p>​            3.在入口文件main.js中配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./luyou&#x27;</span>		<span class="comment">//将第二步设置的配置文件导入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)		<span class="comment">//.use使用router</span></span><br></pre></td></tr></table></figure>

<p>​            4.在页面中使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">     //router创建超链接，to属性用来指定路径和配置文件的path相匹配</span><br><span class="line">    &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;</span><br><span class="line">     //用来显示页面内容</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="路由传递参数"><a href="#路由传递参数" class="headerlink" title="路由传递参数"></a>路由传递参数</h3><p>​    1.新建两个文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HomeView.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;$route.params.ho&#125;&#125;&lt;/p&gt;		//获取路由中的参数</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AboutView.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;关于&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;$route.params.ab&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>​    2.创建配置文件</p>
<p>​        index.js（在components文件夹中）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置文件</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>	<span class="comment">//固定配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置信息中需要页面的相关配置</span></span><br><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/about/:ab&quot;</span>,							<span class="comment">//设置地址及附带参数	:ab</span></span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;about&#x27;</span>,								<span class="comment">//名字，可带可不带</span></span><br><span class="line">        <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./AboutView.vue&#x27;</span>)		<span class="comment">//组件地址</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/:ho&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./HomeView.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),		<span class="comment">//可以替换为createWebHistory但是容易引起404所以需要后台配合</span></span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<p>​            3.在入口文件main.js中配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./luyou&#x27;</span>		<span class="comment">//将第二步设置的配置文件导入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)		<span class="comment">//.use使用router</span></span><br></pre></td></tr></table></figure>

<p>​            4.在页面中使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script &gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      aaa:prompt(&#x27;请填写要显示的内容&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;router-link :to=&quot;/home/+aaa&quot;&gt;首页&lt;/router-link&gt;		//动态绑定传递数据</span><br><span class="line">    &lt;router-link to=&quot;/about/这里是关于&quot;&gt;关于&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="嵌套路由配置"><a href="#嵌套路由配置" class="headerlink" title="嵌套路由配置"></a>嵌套路由配置</h3><p>​    1.新建两个文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HomeView.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;$route.params.ho&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;router-link to=&quot;/one&quot;&gt;分页1&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/two&quot;&gt;分页2&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AboutView.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;关于&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;$route.params.ab&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about/us&quot;&gt;关于我们&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about/info&quot;&gt;关于信息&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AboutInfo</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;关于信息&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AboutUS</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;关于我们&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>​    2.创建配置文件</p>
<p>​        index.js（在components文件夹中）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置文件</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置信息中需要页面的相关配置</span></span><br><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/about&quot;</span>,					<span class="comment">//:ab添加参数</span></span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./AboutView.vue&#x27;</span>),</span><br><span class="line">        <span class="attr">children</span>:[&#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;us&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;./AboutUS.vue&quot;</span>)</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;info&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;./AboutInfo.vue&quot;</span>)</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./HomeView.vue&#x27;</span>),</span><br><span class="line">        <span class="attr">children</span>:[&#123;			<span class="comment">//通过children嵌套，中的path不要加/</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;one&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;./AboutUS.vue&quot;</span>)</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;two&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;./AboutInfo.vue&quot;</span>)</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<p>​            3.在入口文件main.js中配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./luyou&#x27;</span>		<span class="comment">//将第二步设置的配置文件导入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)		<span class="comment">//.use使用router</span></span><br></pre></td></tr></table></figure>

<p>​            4.在页面中使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script &gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      aaa:prompt(&#x27;请填写要显示的内容&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;router-link :to=&quot;/home/+aaa&quot;&gt;首页&lt;/router-link&gt;		//动态绑定传递数据</span><br><span class="line">    &lt;router-link to=&quot;/about/这里是关于&quot;&gt;关于&lt;/router-link&gt;	</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h2&gt;page页面&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;goPage&quot;&gt;点击按钮跳转&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;</span><br><span class="line">        methods:&#123;</span><br><span class="line">            goPage:function()&#123;</span><br><span class="line">                // 跳转导航</span><br><span class="line">                this.$router.push(&quot;/&quot;)</span><br><span class="line">                </span><br><span class="line">                if(123==123)&#123;</span><br><span class="line">                    this.$router.push(&quot;/&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">                // 通过传递对象跳转</span><br><span class="line">                this.$router.push(&#123;path:&quot;/about:654565&quot;&#125;)</span><br><span class="line">                // 通过name名跳转</span><br><span class="line">                this.$router.push(&#123;name:&quot;guanyv&quot;,params:&#123;id:123546&#125;&#125;)</span><br><span class="line">                // 设置带？的附加参数</span><br><span class="line">                this.$router.push(&#123;path:&quot;/about&quot;,query:&#123;name:&quot;zhangsan&quot;&#125;&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;关于&lt;/h1&gt;</span><br><span class="line">        &lt;router-link to=&quot;/about/us&quot;&gt;关于我们&lt;/router-link&gt;</span><br><span class="line">        &lt;router-link to=&quot;/about/info&quot;&gt;关于信息&lt;/router-link&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AboutView.vue</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            //在跳转页面可以通过this.$route.query.name拿取数据</span><br><span class="line">            console.log(this.$route.query.name);		</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="替换、前进后退"><a href="#替换、前进后退" class="headerlink" title="替换、前进后退"></a>替换、前进后退</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 替换当前位置</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;<span class="attr">path</span>:<span class="string">&quot;/about&quot;</span>,<span class="attr">query</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;zhangsan&quot;</span>&#125;&#125;)</span><br><span class="line"><span class="comment">// 前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>()</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>()</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="命名路由和命名视图"><a href="#命名路由和命名视图" class="headerlink" title="命名路由和命名视图"></a>命名路由和命名视图</h3><p>指定某个地方分配怎样的路由</p>
<p>1.创建三个组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shopTop.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;shop的头部&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shopCen</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;shop的中部&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shopFoot</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;shop的尾部&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>2.在配置文件中指定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> tou <span class="keyword">from</span> <span class="string">&#x27;../luyou/shopTop.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zhong <span class="keyword">from</span> <span class="string">&#x27;../luyou/shopCen.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> wei <span class="keyword">from</span> <span class="string">&#x27;../luyou/shopFoot.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置信息中需要页面的相关配置</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/shop&quot;</span>,	<span class="comment">//当访问路径为/shop时将shopTop、shopChen、shopFoot渲染到指定位置</span></span><br><span class="line">        <span class="attr">components</span>:&#123;</span><br><span class="line">            <span class="attr">default</span>:zhong,	<span class="comment">//当没有指定名字时，渲染zhong</span></span><br><span class="line">            tou,wei</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<p>3.页面上渲染App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;router-link to=&quot;/&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/tz&quot;&gt;go to&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view name=&quot;tou&quot;&gt;&lt;/router-view&gt;			//指定渲染</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;						//默认渲染</span><br><span class="line">    &lt;router-view name=&quot;wei&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt; </span><br></pre></td></tr></table></figure>

<h2 id="Vuex状态管理"><a href="#Vuex状态管理" class="headerlink" title="Vuex状态管理"></a>Vuex状态管理</h2><p>状态管理可以理解成为更方便的管理组件之间的数据交互</p>
<p>1.下载Vuex</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vuex@next --save</span><br></pre></td></tr></table></figure>

<p>2.设置配置文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>		<span class="comment">//引入vuex</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Vuex的核心作用就是帮我们管理组件之间的状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">    <span class="comment">// 所有的数据都放在这里</span></span><br><span class="line">    <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//主要用来放需要复杂运算的数据</span></span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">getCounter</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">count</span>&gt;<span class="number">0</span> ? state.<span class="property">count</span> : <span class="string">&quot;内容小于0，不予显示&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//可以通过事件改变数据</span></span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">addCounter</span>(<span class="params">state,num</span>)&#123;      <span class="comment">//state表示上面定义的state对象</span></span><br><span class="line">            state.<span class="property">count</span>+=num</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//从外部拿取数据</span></span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">asyn</span>(<span class="params">&#123;commit&#125;</span>)&#123;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="string">&quot;http://iwenwiki.com/api/generator/list.php&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">commit</span>(<span class="string">&quot;addCounter&quot;</span>,res.<span class="property">data</span>[<span class="number">0</span>])</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>3.在入口文件中引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(store).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>4.在页面上使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;addClickHandle&quot;&gt;点击功德+1&lt;/button&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; $store.state.count &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;addas&quot;&gt;点击得到进口功德&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt; </span><br><span class="line">&lt;script &gt;</span><br><span class="line">// vuex提供的mapState快捷读取方式</span><br><span class="line">import &#123; mapState,mapGetter,mapActions&#125; from &#x27;vuex&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    //把各个数据和方法引入到这里</span><br><span class="line">    ...mapState([&#x27;count&#x27;]),</span><br><span class="line">    ...mapGetters([&#x27;getCounter&#x27;])</span><br><span class="line">    ...mapActions([&quot;asyn&quot;])</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addClickHandle() &#123;</span><br><span class="line">      // 固定调用方式,可以选择添加或者不添加参数</span><br><span class="line">      this.$store.commit(&quot;addCounter&quot;,20)  	//使用store.commit方法调用mutations的addCounter函数</span><br><span class="line">    &#125;,</span><br><span class="line">    addas()&#123;</span><br><span class="line">      this.$store.dispatch(&quot;asyn&quot;)			//使用dispatch方法调用actions的asyn方法</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/img/Vue%E6%A1%86%E6%9E%B6/image-20221130181737218.png" alt="image-20221130181737218" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
